{% extends "base.j2" %}

{% block body %}
<div id="status"></div>
<div id="nbviewer">{{ _nbviewer }}</div>
{% endblock %}

{% block script %}
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.slim.min.js" integrity="sha256-pasqAKBDmFT4eHoN2ndd6lN370kFiGUFyTiUHWhU7k8=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.slim.js" integrity="sha256-Dul4c09cdrWKXVtallPxF558lwxMwCC8dXJdZ0PVW54=" crossorigin="anonymous"></script>
<script type="text/javascript" charset="utf-8">
var socket = io()
var $nbviewer, $status, current_index, current_code_cell, started, scroll

function find_or_create(root, classes) {
  var $el = root.find(classes.map(function (cls) { return `.cls` }).join(' '))
  if ($el[0] === undefined) {
    var $el = $('<div></div>')
    for (var cls of classes) {
      $el.addClass(cls)
    }
    $el.appendTo(root)
  }
  return $el
}

socket.on('connect', function() {
  console.debug('connect')

  $nbviewer = $('#nbviewer')
  $status = $('#status')
  current_index = undefined
  current_code_cell = 1
  started = false
  scroll = false

  socket.emit('init', {{ _data }})
})
socket.on('notebook', function(data) {
  console.debug('notebook')
  console.debug(data)
})
socket.on('status', function(value) {
  $("#status").text(value)
})
socket.on('error', function(value) {
  $status.text(`Error: ${value}`)
})
socket.on('progress', function (value) {
  var cell = $($('#nbviewer').find('.cell')[value])
  var input_prompt =  $(cell.find('.input_prompt'))
  if (input_prompt.closest('.cell').hasClass('code_cell')) {
    input_prompt.text('In [*]:')
  }
  var cell_output_status = $(cell.find('.output-status')[0])
  cell_output_status.removeClass('pending')
  cell_output_status.addClass('loading')

  current_index = value // save the current index
})
socket.on('cell', function (value) {
  console.debug(value)
  if (value.cell_type == 'code') {
    var cell = $($('#nbviewer').find('.cell')[current_index])
    var cell_output_wrapper = find_or_create(cell, ['output_wrapper'])
    var cell_output = find_or_create(cell_output_wrapper, ['output'])
    var cell_output_area = find_or_create(cell_output, ['output_area'])
    var cell_output_prompt = find_or_create(cell_output_area, ['prompt'])
    var cell_output_subarea = find_or_create(cell_output_area, ['output_subarea'])
    cell_output_subarea.empty()
    value.outputs.forEach(function (ele) {
      console.debug(ele)
      if (ele.output_type == 'stream') {
        var cell_output_container = $('<div class="output_stream output_' + ele.name + ' output_text">')
        var cell_output_text = $('<pre>').text(ele.text)
        cell_output_container.append(cell_output_text)
        cell_output_subarea.append(cell_output_container)
      } else if (ele.output_type == 'execute_result') {
        var cell_output_container = $('<div class="output_html rendered_html output_execute_result">')
        var cell_output_html = ele.data['text/html']
        if (cell_output_html === undefined) {
          cell_output_html = $('<div></div>').text(ele.data['text/plain'])
        }
        cell_output_container.append(cell_output_html)
        cell_output_subarea.append(cell_output_container)
      } else if (ele.output_type == 'display_data') {
        if (ele.data['image/png'] !== undefined) {
          var cell_output_container = $('<div class="output_png">')
          var cell_output_image = new Image()
          cell_output_image.src = 'data:img/png;base64,' + ele.data['image/png']
          cell_output_container.append(cell_output_image)
          cell_output_subarea.append(cell_output_container)
        } else if (ele.data['text/html'] !== undefined) {
          var cell_output_container = $('<div class="output_html rendered_html output_execute_result">')
          var cell_output_html = ele.data['text/html']
          cell_output_container.append(cell_output_html)
          cell_output_subarea.append(cell_output_container)
        } else if (ele.data['text/plain'] !== undefined) {
          var cell_output_container = $('<div class="output_stream output_' + ele.name + ' output_text">')
          var cell_output_text = $('<pre>').text(ele.data['text/plain'])
          cell_output_container.append(cell_output_text)
          cell_output_subarea.append(cell_output_container)
        } else {
          console.warn("Unrecognized output type "+ele.output_type)
        }
      } else if (ele.output_type == 'error') {
        var cell_output_container = $('<div class="output_subarea output_test output_error">')
        var cell_output_text = $('<pre>').text(ele.ename+': '+ele.evalue+'\n'+ele.traceback)
        cell_output_container.append(cell_output_text)
        cell_output_subarea.append(cell_output_container)
      } else {
        console.warn("Unrecognized output type "+ele.output_type)
      }
    })
    var cell_output_status = $(cell.find('.output-status')[0])
    cell_output_status.removeClass('loading')
    cell_output_status.addClass('ready')

    var current_cell_ele = cell.find('.input_prompt')
    current_cell_ele.text('In ['+(current_code_cell++)+']:')
    if (scroll) {
      $('html, body').animate({
        scrollTop: current_cell_ele.offset().top
      }, 2500)
    }
  } else if (value.cell_type == 'markdown') {
  } else {
    console.warn("Unrecognized cell type")
  }
})
</script>
{% endblock %}
