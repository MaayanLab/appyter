!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;((t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).VariableField||(t.VariableField={})).svelte=e()}}((function(){var e={};(function(t){"use strict";function n(){}Object.defineProperty(e,"__esModule",{value:!0});function o(e){return e()}function r(){return Object.create(null)}function a(e){e.forEach(o)}function i(e){return"function"==typeof e}function s(e){return 0===Object.keys(e).length}const c="undefined"!=typeof window;e.raf=c?e=>requestAnimationFrame(e):n;new Set;function l(e,t){e.appendChild(t)}function u(e,t,n){e.insertBefore(t,n||null)}function f(e){e.parentNode.removeChild(e)}function d(e){return document.createElement(e)}function p(e){return document.createTextNode(e)}function m(e,t,n,o){return e.addEventListener(t,n,o),()=>e.removeEventListener(t,n,o)}function g(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function h(e){return Array.from(e.childNodes)}function y(e,t){const n=document.createEvent("CustomEvent");return n.initCustomEvent(e,!1,!1,t),n}new Set;function $(t){e.current_component=t}function b(){if(!e.current_component)throw new Error("Function called outside component initialization");return e.current_component}const _=[],v=[],x=[],w=[],k=Promise.resolve();let j=!1;function O(){j||(j=!0,k.then(M))}function E(e){x.push(e)}let C=!1;const S=new Set;function M(){if(!C){C=!0;do{for(let e=0;e<_.length;e+=1){const t=_[e];$(t),P(t.$$)}for(_.length=0;v.length;)v.pop()();for(let e=0;e<x.length;e+=1){const t=x[e];S.has(t)||(S.add(t),t())}x.length=0}while(_.length);for(;w.length;)w.pop()();j=!1,C=!1,S.clear()}}function P(e){if(null!==e.fragment){e.update(),a(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(E)}}const q=new Set;let D;function T(){D={r:0,c:[],p:D}}function U(){D.r||a(D.c),D=D.p}function A(e,t){e&&e.i&&(q.delete(e),e.i(t))}function L(e,t,n,o){if(e&&e.o){if(q.has(e))return;q.add(e),D.c.push(()=>{q.delete(e),o&&(n&&e.d(1),o())}),e.o(t)}}"undefined"!=typeof window?window:"undefined"!=typeof globalThis&&globalThis;function N(e,t){L(e,1,1,()=>{t.delete(e.key)})}new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);function F(e,t,n){const{fragment:r,on_mount:s,on_destroy:c,after_update:l}=e.$$;r&&r.m(t,n),E(()=>{const t=s.map(o).filter(i);c?c.push(...t):a(t),e.$$.on_mount=[]}),l.forEach(E)}function B(e,t){const n=e.$$;null!==n.fragment&&(a(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}"function"==typeof HTMLElement&&HTMLElement;class H{$destroy(){B(this,1),this.$destroy=n}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){this.$$set&&!s(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}e.SvelteComponent=H,e.SvelteComponentDev=class extends H{constructor(e){if(!e||!e.target&&!e.$$inline)throw new Error("'target' is a required option");super()}$destroy(){super.$destroy(),this.$destroy=()=>{console.warn("Component was already destroyed")}}$capture_state(){}$inject_state(){}},e.afterUpdate=function(e){b().$$.after_update.push(e)},e.append=l,e.attr=g,e.beforeUpdate=function(e){b().$$.before_update.push(e)},e.check_outros=U,e.createEventDispatcher=function(){const e=b();return(t,n)=>{const o=e.$$.callbacks[t];if(o){const r=y(t,n);o.slice().forEach(t=>{t.call(e,r)})}}},e.create_component=function(e){e&&e.c()},e.destroy_component=B,e.detach=f,e.element=d,e.getContext=function(e){return b().$$.context.get(e)},e.group_outros=T,e.init=function(t,o,i,s,c,l,u=[-1]){const d=e.current_component;$(t);const p=o.props||{},m=t.$$={fragment:null,ctx:null,props:l,update:n,not_equal:c,bound:r(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(d?d.$$.context:[]),callbacks:r(),dirty:u,skip_bound:!1};let g=!1;if(m.ctx=i?i(t,p,(e,n,...o)=>{const r=o.length?o[0]:n;return m.ctx&&c(m.ctx[e],m.ctx[e]=r)&&(!m.skip_bound&&m.bound[e]&&m.bound[e](r),g&&function(e,t){-1===e.$$.dirty[0]&&(_.push(e),O(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(t,e)),n}):[],m.update(),g=!0,a(m.before_update),m.fragment=!!s&&s(m.ctx),o.target){if(o.hydrate){const e=h(o.target);m.fragment&&m.fragment.l(e),e.forEach(f)}else m.fragment&&m.fragment.c();o.intro&&A(t.$$.fragment),F(t,o.target,o.anchor),M()}$(d)},e.insert=u,e.listen=m,e.mount_component=F,e.noop=n,e.onDestroy=function(e){b().$$.on_destroy.push(e)},e.onMount=function(e){b().$$.on_mount.push(e)},e.outro_and_destroy_block=N,e.safe_not_equal=function(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e},e.setContext=function(e,t){b().$$.context.set(e,t)},e.set_data=function(e,t){t=""+t,e.wholeText!==t&&(e.data=t)},e.set_style=function(e,t,n,o){e.style.setProperty(t,n,o?"important":"")},e.space=function(){return p(" ")},e.text=p,e.tick=function(){return O(),k},e.toggle_class=function(e,t,n){e.classList[n?"add":"remove"](t)},e.transition_in=A,e.transition_out=L,e.update_keyed_each=function(e,t,n,o,r,a,i,s,c,l,u,f){let d=e.length,p=a.length,m=d;const g={};for(;m--;)g[e[m].key]=m;const h=[],y=new Map,$=new Map;for(m=p;m--;){const e=f(r,a,m),s=n(e);let c=i.get(s);c?o&&c.p(e,t):(c=l(s,e)).c(),y.set(s,h[m]=c),s in g&&$.set(s,Math.abs(m-g[s]))}const b=new Set,_=new Set;function v(e){A(e,1),e.m(s,u),i.set(e.key,e),u=e.first,p--}for(;d&&p;){const t=h[p-1],n=e[d-1],o=t.key,r=n.key;t===n?(u=t.first,d--,p--):y.has(r)?!i.has(o)||b.has(o)?v(t):_.has(r)?d--:$.get(o)>$.get(r)?(_.add(o),v(t)):(b.add(r),d--):(c(n,i),d--)}for(;d--;){const t=e[d];y.has(t.key)||c(t,i)}for(;p;)v(h[p-1]);return h}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var t={};Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"SvelteComponent",{enumerable:!0,get:function(){return e.SvelteComponentDev}}),Object.defineProperty(t,"afterUpdate",{enumerable:!0,get:function(){return e.afterUpdate}}),Object.defineProperty(t,"beforeUpdate",{enumerable:!0,get:function(){return e.beforeUpdate}}),Object.defineProperty(t,"createEventDispatcher",{enumerable:!0,get:function(){return e.createEventDispatcher}}),Object.defineProperty(t,"getContext",{enumerable:!0,get:function(){return e.getContext}}),Object.defineProperty(t,"onDestroy",{enumerable:!0,get:function(){return e.onDestroy}}),Object.defineProperty(t,"onMount",{enumerable:!0,get:function(){return e.onMount}}),Object.defineProperty(t,"setContext",{enumerable:!0,get:function(){return e.setContext}}),Object.defineProperty(t,"tick",{enumerable:!0,get:function(){return e.tick}});const{SvelteComponent:n,append:o,attr:r,detach:a,element:i,init:s,insert:c,noop:l,safe_not_equal:u}=e,{onMount:f}=t;function d(e){let t,n,s;return{c(){t=i("div"),n=i("script"),r(t,"id",s=e[0].args.name),r(t,"class","loading")},m(e,r){c(e,t,r),o(t,n)},p(e,[n]){1&n&&s!==(s=e[0].args.name)&&r(t,"id",s)},i:l,o:l,d(e){e&&a(t)}}}function p(e,t,n){let{data:o={}}=t;return f(()=>{window.require(["svelte"],(function(e){e.render(document.getElementById(o.args.name),o.js_url,o)}))}),e.$$set=e=>{"data"in e&&n(0,o=e.data)},[o]}var m=class extends n{constructor(e){super(),s(this,e,p,d,u,{data:0})}};const{SvelteComponent:g,append:h,attr:y,check_outros:$,create_component:b,destroy_component:_,detach:v,element:x,group_outros:w,init:k,insert:j,listen:O,mount_component:E,outro_and_destroy_block:C,safe_not_equal:S,set_data:M,set_style:P,space:q,text:D,toggle_class:T,transition_in:U,transition_out:A,update_keyed_each:L}=e;function N(e,t,n){const o=e.slice();return o[5]=t[n],o}function F(e){let t,n,o,r;return{c(){t=x("sup"),n=x("i"),r=q(),y(n,"class","far fa-question-circle"),y(t,"data-toggle","tooltip"),y(t,"title",o=e[0].description)},m(e,o){j(e,t,o),h(t,n),j(e,r,o)},p(e,n){1&n&&o!==(o=e[0].description)&&y(t,"title",o)},d(e){e&&v(t),e&&v(r)}}}function B(e,t){let n,o,r,a,i,s,c,l;function u(...e){return t[3](t[5],...e)}return i=new m({props:{data:t[1][t[5]]}}),{key:e,first:null,c(){n=x("a"),o=x("i"),a=q(),b(i.$$.fragment),y(o,"class","fas fa-trash text-white"),y(n,"href","javascript:"),y(n,"class","btn btn-sm btn-danger"),P(n,"float","right"),y(n,"data-target",r=t[5]),this.first=n},m(e,t){j(e,n,t),h(n,o),j(e,a,t),E(i,e,t),s=!0,c||(l=O(n,"click",u),c=!0)},p(e,o){t=e,(!s||2&o&&r!==(r=t[5]))&&y(n,"data-target",r);const a={};2&o&&(a.data=t[1][t[5]]),i.$set(a)},i(e){s||(U(i.$$.fragment,e),s=!0)},o(e){A(i.$$.fragment,e),s=!1},d(e){e&&v(n),e&&v(a),_(i,e),c=!1,l()}}}function H(e){let t,n,o,r,a,i,s,c,l,u,f,d,p,g,k,S,H,V,z,I,G,K=e[0].label+"",Q=[],R=new Map,W=e[0].description&&F(e),X=Object.keys(e[1]);const Y=e=>e[5];for(let m=0;m<X.length;m+=1){let t=N(e,X,m),n=Y(t);R.set(n,Q[m]=B(n,t))}return V=new m({props:{data:{...e[0].field,args:{...e[0].field.args,value:""}}}}),{c(){t=x("div"),n=x("div"),o=D(K),r=q(),W&&W.c(),a=D(":"),i=q(),s=x("div");for(let e=0;e<Q.length;e+=1)Q[e].c();c=q(),l=x("a"),u=x("i"),d=q(),p=x("div"),g=x("input"),H=q(),b(V.$$.fragment),y(n,"class","col-lg-3 bold text-lg-right my-auto"),y(u,"class","fas fa-plus text-white"),y(l,"href","javascript:"),y(l,"class","btn btn-sm btn-success"),P(l,"float","right"),y(l,"disabled",f=e[0].max&&e[1].length>e[0].max),T(l,"disabled",e[0].max&&e[1].length>e[0].max),y(s,"class","col-lg-6 pt-2 pt-lg-0"),y(t,"class","row px-3 pb-3"),y(g,"type","text"),y(g,"class","hidden"),y(g,"name",k=e[0].name),g.value=S=JSON.stringify(Object.values(e[1]).map(J)),P(p,"display","none")},m(f,m){j(f,t,m),h(t,n),h(n,o),h(n,r),W&&W.m(n,null),h(n,a),h(t,i),h(t,s);for(let e=0;e<Q.length;e+=1)Q[e].m(s,null);h(s,c),h(s,l),h(l,u),j(f,d,m),j(f,p,m),h(p,g),h(p,H),E(V,p,null),z=!0,I||(G=O(l,"click",e[4]),I=!0)},p(e,[t]){if((!z||1&t)&&K!==(K=e[0].label+"")&&M(o,K),e[0].description?W?W.p(e,t):((W=F(e)).c(),W.m(n,a)):W&&(W.d(1),W=null),2&t){const n=Object.keys(e[1]);w(),Q=L(Q,t,Y,1,e,n,R,s,C,B,c,N),$()}(!z||3&t&&f!==(f=e[0].max&&e[1].length>e[0].max))&&y(l,"disabled",f),3&t&&T(l,"disabled",e[0].max&&e[1].length>e[0].max),(!z||1&t&&k!==(k=e[0].name))&&y(g,"name",k),(!z||2&t&&S!==(S=JSON.stringify(Object.values(e[1]).map(J)))&&g.value!==S)&&(g.value=S);const r={};1&t&&(r.data={...e[0].field,args:{...e[0].field.args,value:""}}),V.$set(r)},i(e){if(!z){for(let e=0;e<X.length;e+=1)U(Q[e]);U(V.$$.fragment,e),z=!0}},o(e){for(let t=0;t<Q.length;t+=1)A(Q[t]);A(V.$$.fragment,e),z=!1},d(e){e&&v(t),W&&W.d();for(let t=0;t<Q.length;t+=1)Q[t].d();e&&v(d),e&&v(p),_(V),I=!1,G()}}}const J=e=>e.args.name;function V(e,t,n){let{args:o}=t,r={},a=0;for(const i of o.default||[])r[a++]={...i,args:{...i.args,name:`${i.args.name}_${a}`}};return e.$$set=e=>{"args"in e&&n(0,o=e.args)},[o,r,a,e=>{delete r[e],n(1,r)},()=>{o.max&&r.length>o.max||n(1,r[n(2,a++,a)]={...o.field,args:{...o.field.args,name:`${o.field.args.name}_${a}`}},r)}]}return class extends g{constructor(e){super(),k(this,e,V,H,S,{args:0})}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,