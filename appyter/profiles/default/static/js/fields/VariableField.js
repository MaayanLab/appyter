!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;((t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).VariableField||(t.VariableField={})).svelte=e()}}((function(){var e={};(function(t){"use strict";function n(){}Object.defineProperty(e,"__esModule",{value:!0});function o(e){return e()}function r(){return Object.create(null)}function a(e){e.forEach(o)}function i(e){return"function"==typeof e}function s(e){return 0===Object.keys(e).length}const c="undefined"!=typeof window;e.raf=c?e=>requestAnimationFrame(e):n;new Set;function l(e,t){e.appendChild(t)}function u(e,t,n){e.insertBefore(t,n||null)}function f(e){e.parentNode.removeChild(e)}function d(e){return document.createElement(e)}function p(e){return document.createTextNode(e)}function m(e,t,n,o){return e.addEventListener(t,n,o),()=>e.removeEventListener(t,n,o)}function g(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function h(e){return Array.from(e.childNodes)}function y(e,t){const n=document.createEvent("CustomEvent");return n.initCustomEvent(e,!1,!1,t),n}new Set;function $(t){e.current_component=t}function b(){if(!e.current_component)throw new Error("Function called outside component initialization");return e.current_component}const _=[],v=[],x=[],w=[],k=Promise.resolve();let j=!1;function O(){j||(j=!0,k.then(M))}function E(e){x.push(e)}let C=!1;const S=new Set;function M(){if(!C){C=!0;do{for(let e=0;e<_.length;e+=1){const t=_[e];$(t),P(t.$$)}for(_.length=0;v.length;)v.pop()();for(let e=0;e<x.length;e+=1){const t=x[e];S.has(t)||(S.add(t),t())}x.length=0}while(_.length);for(;w.length;)w.pop()();j=!1,C=!1,S.clear()}}function P(e){if(null!==e.fragment){e.update(),a(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(E)}}const q=new Set;let D;function T(){D={r:0,c:[],p:D}}function U(){D.r||a(D.c),D=D.p}function A(e,t){e&&e.i&&(q.delete(e),e.i(t))}function L(e,t,n,o){if(e&&e.o){if(q.has(e))return;q.add(e),D.c.push(()=>{q.delete(e),o&&(n&&e.d(1),o())}),e.o(t)}}"undefined"!=typeof window?window:"undefined"!=typeof globalThis&&globalThis;function N(e,t){L(e,1,1,()=>{t.delete(e.key)})}new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);function F(e,t,n){const{fragment:r,on_mount:s,on_destroy:c,after_update:l}=e.$$;r&&r.m(t,n),E(()=>{const t=s.map(o).filter(i);c?c.push(...t):a(t),e.$$.on_mount=[]}),l.forEach(E)}function B(e,t){const n=e.$$;null!==n.fragment&&(a(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}"function"==typeof HTMLElement&&HTMLElement;class H{$destroy(){B(this,1),this.$destroy=n}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){this.$$set&&!s(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}e.SvelteComponent=H,e.SvelteComponentDev=class extends H{constructor(e){if(!e||!e.target&&!e.$$inline)throw new Error("'target' is a required option");super()}$destroy(){super.$destroy(),this.$destroy=()=>{console.warn("Component was already destroyed")}}$capture_state(){}$inject_state(){}},e.afterUpdate=function(e){b().$$.after_update.push(e)},e.append=l,e.attr=g,e.beforeUpdate=function(e){b().$$.before_update.push(e)},e.check_outros=U,e.createEventDispatcher=function(){const e=b();return(t,n)=>{const o=e.$$.callbacks[t];if(o){const r=y(t,n);o.slice().forEach(t=>{t.call(e,r)})}}},e.create_component=function(e){e&&e.c()},e.destroy_component=B,e.detach=f,e.element=d,e.getContext=function(e){return b().$$.context.get(e)},e.group_outros=T,e.init=function(t,o,i,s,c,l,u=[-1]){const d=e.current_component;$(t);const p=o.props||{},m=t.$$={fragment:null,ctx:null,props:l,update:n,not_equal:c,bound:r(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(d?d.$$.context:[]),callbacks:r(),dirty:u,skip_bound:!1};let g=!1;if(m.ctx=i?i(t,p,(e,n,...o)=>{const r=o.length?o[0]:n;return m.ctx&&c(m.ctx[e],m.ctx[e]=r)&&(!m.skip_bound&&m.bound[e]&&m.bound[e](r),g&&function(e,t){-1===e.$$.dirty[0]&&(_.push(e),O(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(t,e)),n}):[],m.update(),g=!0,a(m.before_update),m.fragment=!!s&&s(m.ctx),o.target){if(o.hydrate){const e=h(o.target);m.fragment&&m.fragment.l(e),e.forEach(f)}else m.fragment&&m.fragment.c();o.intro&&A(t.$$.fragment),F(t,o.target,o.anchor),M()}$(d)},e.insert=u,e.listen=m,e.mount_component=F,e.noop=n,e.onDestroy=function(e){b().$$.on_destroy.push(e)},e.onMount=function(e){b().$$.on_mount.push(e)},e.outro_and_destroy_block=N,e.safe_not_equal=function(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e},e.setContext=function(e,t){b().$$.context.set(e,t)},e.set_data=function(e,t){t=""+t,e.wholeText!==t&&(e.data=t)},e.set_style=function(e,t,n,o){e.style.setProperty(t,n,o?"important":"")},e.space=function(){return p(" ")},e.text=p,e.tick=function(){return O(),k},e.toggle_class=function(e,t,n){e.classList[n?"add":"remove"](t)},e.transition_in=A,e.transition_out=L,e.update_keyed_each=function(e,t,n,o,r,a,i,s,c,l,u,f){let d=e.length,p=a.length,m=d;const g={};for(;m--;)g[e[m].key]=m;const h=[],y=new Map,$=new Map;for(m=p;m--;){const e=f(r,a,m),s=n(e);let c=i.get(s);c?o&&c.p(e,t):(c=l(s,e)).c(),y.set(s,h[m]=c),s in g&&$.set(s,Math.abs(m-g[s]))}const b=new Set,_=new Set;function v(e){A(e,1),e.m(s,u),i.set(e.key,e),u=e.first,p--}for(;d&&p;){const t=h[p-1],n=e[d-1],o=t.key,r=n.key;t===n?(u=t.first,d--,p--):y.has(r)?!i.has(o)||b.has(o)?v(t):_.has(r)?d--:$.get(o)>$.get(r)?(_.add(o),v(t)):(b.add(r),d--):(c(n,i),d--)}for(;d--;){const t=e[d];y.has(t.key)||c(t,i)}for(;p;)v(h[p-1]);return h}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var t={};Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"SvelteComponent",{enumerable:!0,get:function(){return e.SvelteComponentDev}}),Object.defineProperty(t,"afterUpdate",{enumerable:!0,get:function(){return e.afterUpdate}}),Object.defineProperty(t,"beforeUpdate",{enumerable:!0,get:function(){return e.beforeUpdate}}),Object.defineProperty(t,"createEventDispatcher",{enumerable:!0,get:function(){return e.createEventDispatcher}}),Object.defineProperty(t,"getContext",{enumerable:!0,get:function(){return e.getContext}}),Object.defineProperty(t,"onDestroy",{enumerable:!0,get:function(){return e.onDestroy}}),Object.defineProperty(t,"onMount",{enumerable:!0,get:function(){return e.onMount}}),Object.defineProperty(t,"setContext",{enumerable:!0,get:function(){return e.setContext}}),Object.defineProperty(t,"tick",{enumerable:!0,get:function(){return e.tick}});const{SvelteComponent:n,append:o,attr:r,detach:a,element:i,init:s,insert:c,noop:l,safe_not_equal:u}=e,{onMount:f}=t;function d(e){let t,n,s;return{c(){t=i("div"),n=i("script"),r(t,"id",s=e[0].args.name),r(t,"class","loading")},m(e,r){c(e,t,r),o(t,n)},p(e,[n]){1&n&&s!==(s=e[0].args.name)&&r(t,"id",s)},i:l,o:l,d(e){e&&a(t)}}}function p(e,t,n){let{data:o={}}=t;return f(()=>{window.require(["svelte"],(function(e){e.render(document.getElementById(o.args.name),o.js_url,o)}))}),e.$$set=e=>{"data"in e&&n(0,o=e.data)},[o]}var m=class extends n{constructor(e){super(),s(this,e,p,d,u,{data:0})}};const{SvelteComponent:g,append:h,attr:y,check_outros:$,create_component:b,destroy_component:_,detach:v,element:x,group_outros:w,init:k,insert:j,listen:O,mount_component:E,outro_and_destroy_block:C,safe_not_equal:S,set_data:M,set_style:P,space:q,text:D,toggle_class:T,transition_in:U,transition_out:A,update_keyed_each:L}=e;function N(e,t,n){const o=e.slice();return o[5]=t[n],o}function F(e){let t,n,o,r;return{c(){t=x("sup"),n=x("i"),r=q(),y(n,"class","far fa-question-circle"),y(t,"data-toggle","tooltip"),y(t,"title",o=e[0].description)},m(e,o){j(e,t,o),h(t,n),j(e,r,o)},p(e,n){1&n&&o!==(o=e[0].description)&&y(t,"title",o)},d(e){e&&v(t),e&&v(r)}}}function B(e,t){let n,o,r,a,i,s,c,l;function u(...e){return t[3](t[5],...e)}return i=new m({props:{data:t[1][t[5]]}}),{key:e,first:null,c(){n=x("a"),o=x("i"),a=q(),b(i.$$.fragment),y(o,"class","fas fa-trash text-white"),y(n,"href","javascript:"),y(n,"class","btn btn-sm btn-danger"),P(n,"float","right"),y(n,"data-target",r=t[5]),this.first=n},m(e,t){j(e,n,t),h(n,o),j(e,a,t),E(i,e,t),s=!0,c||(l=O(n,"click",u),c=!0)},p(e,o){t=e,(!s||2&o&&r!==(r=t[5]))&&y(n,"data-target",r);const a={};2&o&&(a.data=t[1][t[5]]),i.$set(a)},i(e){s||(U(i.$$.fragment,e),s=!0)},o(e){A(i.$$.fragment,e),s=!1},d(e){e&&v(n),e&&v(a),_(i,e),c=!1,l()}}}function H(e){let t,n,o,r,a,i,s,c,l,u,f,d,p,g,k,S,H,V,z,I,G,K=e[0].label+"",Q=[],R=new Map,W=e[0].description&&F(e),X=Object.keys(e[1]);const Y=e=>e[5];for(let m=0;m<X.length;m+=1){let t=N(e,X,m),n=Y(t);R.set(n,Q[m]=B(n,t))}return V=new m({props:{data:{...e[0].field,args:{...e[0].field.args,value:""}}}}),{c(){t=x("div"),n=x("div"),o=D(K),r=q(),W&&W.c(),a=D(":"),i=q(),s=x("div");for(let e=0;e<Q.length;e+=1)Q[e].c();c=q(),l=x("a"),u=x("i"),d=q(),p=x("div"),g=x("input"),H=q(),b(V.$$.fragment),y(n,"class","col-lg-3 bold text-lg-right my-auto"),y(u,"class","fas fa-plus text-white"),y(l,"href","javascript:"),y(l,"class","btn btn-sm btn-success"),P(l,"float","right"),y(l,"disabled",f=e[0].max&&e[1].length>e[0].max),T(l,"disabled",e[0].max&&e[1].length>e[0].max),y(s,"class","col-lg-6 pt-2 pt-lg-0"),y(t,"class","row px-3 pb-3"),y(g,"type","text"),y(g,"class","hidden"),y(g,"name",k=e[0].name),g.value=S=JSON.stringify(Object.keys(e[1]).map(J)),P(p,"display","none")},m(f,m){j(f,t,m),h(t,n),h(n,o),h(n,r),W&&W.m(n,null),h(n,a),h(t,i),h(t,s);for(let e=0;e<Q.length;e+=1)Q[e].m(s,null);h(s,c),h(s,l),h(l,u),j(f,d,m),j(f,p,m),h(p,g),h(p,H),E(V,p,null),z=!0,I||(G=O(l,"click",e[4]),I=!0)},p(e,[t]){if((!z||1&t)&&K!==(K=e[0].label+"")&&M(o,K),e[0].description?W?W.p(e,t):((W=F(e)).c(),W.m(n,a)):W&&(W.d(1),W=null),2&t){const n=Object.keys(e[1]);w(),Q=L(Q,t,Y,1,e,n,R,s,C,B,c,N),$()}(!z||3&t&&f!==(f=e[0].max&&e[1].length>e[0].max))&&y(l,"disabled",f),3&t&&T(l,"disabled",e[0].max&&e[1].length>e[0].max),(!z||1&t&&k!==(k=e[0].name))&&y(g,"name",k),(!z||2&t&&S!==(S=JSON.stringify(Object.keys(e[1]).map(J)))&&g.value!==S)&&(g.value=S);const r={};1&t&&(r.data={...e[0].field,args:{...e[0].field.args,value:""}}),V.$set(r)},i(e){if(!z){for(let e=0;e<X.length;e+=1)U(Q[e]);U(V.$$.fragment,e),z=!0}},o(e){for(let t=0;t<Q.length;t+=1)A(Q[t]);A(V.$$.fragment,e),z=!1},d(e){e&&v(t),W&&W.d();for(let t=0;t<Q.length;t+=1)Q[t].d();e&&v(d),e&&v(p),_(V),I=!1,G()}}}const J=e=>e.args.name;function V(e,t,n){let{args:o}=t,r={},a=0;for(const i of o.default||[])r[a++]={...i,args:{...i.args,name:`${i.args.name}_${a}`}};return e.$$set=e=>{"args"in e&&n(0,o=e.args)},[o,r,a,e=>{delete r[e],n(1,r)},()=>{o.max&&r.length>o.max||n(1,r[n(2,a++,a)]={...o.field,args:{...o.field.args,name:`${o.field.args.name}_${a}`}},r)}]}return class extends g{constructor(e){super(),k(this,e,V,H,S,{args:0})}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2stZmxhdC9fcHJlbHVkZSIsIm5vZGVfbW9kdWxlcy9zdmVsdGUvaW50ZXJuYWwvaW5kZXguanMiLCJub2RlX21vZHVsZXMvc3ZlbHRlL2luZGV4LmpzIiwiY29tcG9uZW50cy9BcHB5dGVyRmllbGQuc3ZlbHRlIiwicHJvZmlsZXMvZGVmYXVsdC9zdGF0aWMvanMvZmllbGRzL1ZhcmlhYmxlRmllbGQuc3ZlbHRlIl0sIm5hbWVzIjpbImYiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiZyIsIndpbmRvdyIsImdsb2JhbCIsInNlbGYiLCJ0aGlzIiwiVmFyaWFibGVGaWVsZCIsInN2ZWx0ZSIsIl8kaW50ZXJuYWxfMyIsIm5vb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwicnVuIiwiZm4iLCJibGFua19vYmplY3QiLCJjcmVhdGUiLCJydW5fYWxsIiwiZm5zIiwiZm9yRWFjaCIsImlzX2Z1bmN0aW9uIiwidGhpbmciLCJpc19lbXB0eSIsIm9iaiIsImtleXMiLCJsZW5ndGgiLCJpc19jbGllbnQiLCJyYWYiLCJjYiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIlNldCIsImFwcGVuZCIsInRhcmdldCIsIm5vZGUiLCJhcHBlbmRDaGlsZCIsImluc2VydCIsImFuY2hvciIsImluc2VydEJlZm9yZSIsImRldGFjaCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImVsZW1lbnQiLCJuYW1lIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImRhdGEiLCJjcmVhdGVUZXh0Tm9kZSIsImxpc3RlbiIsImV2ZW50IiwiaGFuZGxlciIsIm9wdGlvbnMiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImF0dHIiLCJhdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJjaGlsZHJlbiIsIkFycmF5IiwiZnJvbSIsImNoaWxkTm9kZXMiLCJjdXN0b21fZXZlbnQiLCJ0eXBlIiwiZGV0YWlsIiwiZSIsImNyZWF0ZUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50Iiwic2V0X2N1cnJlbnRfY29tcG9uZW50IiwiY29tcG9uZW50IiwiY3VycmVudF9jb21wb25lbnQiLCJnZXRfY3VycmVudF9jb21wb25lbnQiLCJFcnJvciIsImRpcnR5X2NvbXBvbmVudHMiLCJiaW5kaW5nX2NhbGxiYWNrcyIsInJlbmRlcl9jYWxsYmFja3MiLCJmbHVzaF9jYWxsYmFja3MiLCJyZXNvbHZlZF9wcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ1cGRhdGVfc2NoZWR1bGVkIiwic2NoZWR1bGVfdXBkYXRlIiwidGhlbiIsImZsdXNoIiwiYWRkX3JlbmRlcl9jYWxsYmFjayIsInB1c2giLCJmbHVzaGluZyIsInNlZW5fY2FsbGJhY2tzIiwiaSIsInVwZGF0ZSIsIiQkIiwicG9wIiwiY2FsbGJhY2siLCJoYXMiLCJhZGQiLCJjbGVhciIsImZyYWdtZW50IiwiYmVmb3JlX3VwZGF0ZSIsImRpcnR5IiwicCIsImN0eCIsImFmdGVyX3VwZGF0ZSIsIm91dHJvaW5nIiwib3V0cm9zIiwiZ3JvdXBfb3V0cm9zIiwiciIsImMiLCJjaGVja19vdXRyb3MiLCJ0cmFuc2l0aW9uX2luIiwiYmxvY2siLCJsb2NhbCIsImRlbGV0ZSIsInRyYW5zaXRpb25fb3V0IiwibyIsImQiLCJnbG9iYWxUaGlzIiwib3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2siLCJsb29rdXAiLCJrZXkiLCJtb3VudF9jb21wb25lbnQiLCJvbl9tb3VudCIsIm9uX2Rlc3Ryb3kiLCJtIiwibmV3X29uX2Rlc3Ryb3kiLCJtYXAiLCJmaWx0ZXIiLCJkZXN0cm95X2NvbXBvbmVudCIsImRldGFjaGluZyIsIkhUTUxFbGVtZW50IiwiU3ZlbHRlQ29tcG9uZW50IiwiW29iamVjdCBPYmplY3RdIiwiJGRlc3Ryb3kiLCJjYWxsYmFja3MiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCIkJHByb3BzIiwiJCRzZXQiLCJza2lwX2JvdW5kIiwiU3ZlbHRlQ29tcG9uZW50RGV2IiwiJCRpbmxpbmUiLCJzdXBlciIsImNvbnNvbGUiLCJ3YXJuIiwiYWZ0ZXJVcGRhdGUiLCJiZWZvcmVVcGRhdGUiLCJjcmVhdGVFdmVudERpc3BhdGNoZXIiLCJzbGljZSIsImNhbGwiLCJjcmVhdGVfY29tcG9uZW50IiwiZ2V0Q29udGV4dCIsImNvbnRleHQiLCJnZXQiLCJpbml0IiwiaW5zdGFuY2UiLCJjcmVhdGVfZnJhZ21lbnQiLCJub3RfZXF1YWwiLCJwcm9wcyIsInBhcmVudF9jb21wb25lbnQiLCJwcm9wX3ZhbHVlcyIsImJvdW5kIiwiTWFwIiwicmVhZHkiLCJyZXQiLCJyZXN0IiwiZmlsbCIsImh5ZHJhdGUiLCJub2RlcyIsImwiLCJpbnRybyIsIm9uRGVzdHJveSIsIm9uTW91bnQiLCJzYWZlX25vdF9lcXVhbCIsImEiLCJiIiwic2V0Q29udGV4dCIsInNldCIsInNldF9kYXRhIiwid2hvbGVUZXh0Iiwic2V0X3N0eWxlIiwiaW1wb3J0YW50Iiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsInNwYWNlIiwidGljayIsInRvZ2dsZV9jbGFzcyIsInRvZ2dsZSIsImNsYXNzTGlzdCIsInVwZGF0ZV9rZXllZF9lYWNoIiwib2xkX2Jsb2NrcyIsImdldF9rZXkiLCJkeW5hbWljIiwibGlzdCIsImRlc3Ryb3kiLCJjcmVhdGVfZWFjaF9ibG9jayIsIm5leHQiLCJnZXRfY29udGV4dCIsIm4iLCJvbGRfaW5kZXhlcyIsIm5ld19ibG9ja3MiLCJuZXdfbG9va3VwIiwiZGVsdGFzIiwiY2hpbGRfY3R4IiwiTWF0aCIsImFicyIsIndpbGxfbW92ZSIsImRpZF9tb3ZlIiwiZmlyc3QiLCJuZXdfYmxvY2siLCJvbGRfYmxvY2siLCJuZXdfa2V5Iiwib2xkX2tleSIsIl8kc3ZlbHRlXzIiLCJlbnVtZXJhYmxlIiwiZGl2Iiwic2NyaXB0IiwiZGl2X2lkX3ZhbHVlIiwiYXJncyIsIiQkc2VsZiIsIiQkaW52YWxpZGF0ZSIsInJlcXVpcmUiLCJyZW5kZXIiLCJnZXRFbGVtZW50QnlJZCIsImpzX3VybCIsIl8kQXBweXRlckZpZWxkXzEiLCJfX1N2ZWx0ZUNvbXBvbmVudF80IiwiX19hcHBlbmRfNCIsIl9fYXR0cl80IiwiX19kZXRhY2hfNCIsIl9fZWxlbWVudF80IiwiX19pbml0XzQiLCJfX2luc2VydF80IiwiX19zYWZlX25vdF9lcXVhbF80IiwiZ2V0X2VhY2hfY29udGV4dCIsImNyZWF0ZV9pZl9ibG9jayIsInN1cCIsInN1cF90aXRsZV92YWx1ZSIsInQiLCJkZXNjcmlwdGlvbiIsImtleV8xIiwiYV9kYXRhX3RhcmdldF92YWx1ZSIsImFwcHl0ZXJmaWVsZCIsImN1cnJlbnQiLCJtb3VudGVkIiwiZGlzcG9zZSIsImNsaWNrX2hhbmRsZXIiLCJuZXdfY3R4IiwiYXBweXRlcmZpZWxkX2NoYW5nZXMiLCIkc2V0IiwiX19jcmVhdGVfZnJhZ21lbnRfNCIsImRpdjIiLCJkaXYwIiwidDAiLCJ0MSIsInQyIiwidDMiLCJkaXYxIiwidDQiLCJhX2Rpc2FibGVkX3ZhbHVlIiwidDUiLCJkaXYzIiwiaW5wdXQiLCJpbnB1dF9uYW1lX3ZhbHVlIiwiaW5wdXRfdmFsdWVfdmFsdWUiLCJ0NiIsInQwX3ZhbHVlIiwibGFiZWwiLCJlYWNoX2Jsb2NrcyIsImVhY2hfMV9sb29rdXAiLCJpZl9ibG9jayIsImVhY2hfdmFsdWUiLCJmaWVsZCIsIm1heCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmdW5jIiwidiIsIl9faW5zdGFuY2VfNCIsInZhbHVlcyIsImlkX2NvdW50ZXIiLCJkZWZhdWx0IiwidmFsdWVfaWQiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEdBQUEsR0FBQSxpQkFBQUMsU0FBQSxvQkFBQUMsT0FBQUEsT0FBQUQsUUFBQUQsU0FBQSxHQUFBLG1CQUFBRyxRQUFBQSxPQUFBQyxJQUFBRCxPQUFBLEdBQUFILE9BQUEsQ0FBQSxJQUFBSyxJQUFBQSxFQUFBLG9CQUFBQyxPQUFBQSxPQUFBLG9CQUFBQyxP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QUE5UCxPQUFBaU0sRUFBQXVELEtBQUFyRCxFQUFBLEVBQUEyRCxFQUFBM0QsRUFBQSxFQUFBNEQsSUFBQUEsSUFBQSxJQUFBOUQsRUFBQXNELE1BQUF0RCxLQUFBLElBQUFBLEVBQUFzRCxNQUFBdEQsS0FBQWhMLEtBQUEsR0FBQWdMLEVBQUFzRCxNQUFBdEQsS0FBQWhMLFFBQUE4TyxNQUFBRCxLQ0FBLE9EQUEsY0FBQXJELEVBQUEvRixZQUFBaEYsR0FBQTJGLFFBQUF5RixFQUFBbE8sS0FBQThDLEVBQUFtTyxFQUFBNUIsRUFBQWpCLEVBQUEsQ0FBQWYsS0FBQSIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGUhPT1cInVuZGVmaW5lZFwiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCIpe2c9c2VsZn1lbHNle2c9dGhpc30oZy5WYXJpYWJsZUZpZWxkIHx8IChnLlZhcmlhYmxlRmllbGQgPSB7fSkpLnN2ZWx0ZSA9IGYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7IH1cbmNvbnN0IGlkZW50aXR5ID0geCA9PiB4O1xuZnVuY3Rpb24gYXNzaWduKHRhciwgc3JjKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZvciAoY29uc3QgayBpbiBzcmMpXG4gICAgICAgIHRhcltrXSA9IHNyY1trXTtcbiAgICByZXR1cm4gdGFyO1xufVxuZnVuY3Rpb24gaXNfcHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gYWRkX2xvY2F0aW9uKGVsZW1lbnQsIGZpbGUsIGxpbmUsIGNvbHVtbiwgY2hhcikge1xuICAgIGVsZW1lbnQuX19zdmVsdGVfbWV0YSA9IHtcbiAgICAgICAgbG9jOiB7IGZpbGUsIGxpbmUsIGNvbHVtbiwgY2hhciB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJ1bihmbikge1xuICAgIHJldHVybiBmbigpO1xufVxuZnVuY3Rpb24gYmxhbmtfb2JqZWN0KCkge1xuICAgIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuZnVuY3Rpb24gcnVuX2FsbChmbnMpIHtcbiAgICBmbnMuZm9yRWFjaChydW4pO1xufVxuZnVuY3Rpb24gaXNfZnVuY3Rpb24odGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gc2FmZV9ub3RfZXF1YWwoYSwgYikge1xuICAgIHJldHVybiBhICE9IGEgPyBiID09IGIgOiBhICE9PSBiIHx8ICgoYSAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHx8IHR5cGVvZiBhID09PSAnZnVuY3Rpb24nKTtcbn1cbmZ1bmN0aW9uIG5vdF9lcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGI7XG59XG5mdW5jdGlvbiBpc19lbXB0eShvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9zdG9yZShzdG9yZSwgbmFtZSkge1xuICAgIGlmIChzdG9yZSAhPSBudWxsICYmIHR5cGVvZiBzdG9yZS5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHtuYW1lfScgaXMgbm90IGEgc3RvcmUgd2l0aCBhICdzdWJzY3JpYmUnIG1ldGhvZGApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN1YnNjcmliZShzdG9yZSwgLi4uY2FsbGJhY2tzKSB7XG4gICAgaWYgKHN0b3JlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfVxuICAgIGNvbnN0IHVuc3ViID0gc3RvcmUuc3Vic2NyaWJlKC4uLmNhbGxiYWNrcyk7XG4gICAgcmV0dXJuIHVuc3ViLnVuc3Vic2NyaWJlID8gKCkgPT4gdW5zdWIudW5zdWJzY3JpYmUoKSA6IHVuc3ViO1xufVxuZnVuY3Rpb24gZ2V0X3N0b3JlX3ZhbHVlKHN0b3JlKSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIHN1YnNjcmliZShzdG9yZSwgXyA9PiB2YWx1ZSA9IF8pKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY29tcG9uZW50X3N1YnNjcmliZShjb21wb25lbnQsIHN0b3JlLCBjYWxsYmFjaykge1xuICAgIGNvbXBvbmVudC4kJC5vbl9kZXN0cm95LnB1c2goc3Vic2NyaWJlKHN0b3JlLCBjYWxsYmFjaykpO1xufVxuZnVuY3Rpb24gY3JlYXRlX3Nsb3QoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuICAgIGlmIChkZWZpbml0aW9uKSB7XG4gICAgICAgIGNvbnN0IHNsb3RfY3R4ID0gZ2V0X3Nsb3RfY29udGV4dChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKTtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25bMF0oc2xvdF9jdHgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldF9zbG90X2NvbnRleHQoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuICAgIHJldHVybiBkZWZpbml0aW9uWzFdICYmIGZuXG4gICAgICAgID8gYXNzaWduKCQkc2NvcGUuY3R4LnNsaWNlKCksIGRlZmluaXRpb25bMV0oZm4oY3R4KSkpXG4gICAgICAgIDogJCRzY29wZS5jdHg7XG59XG5mdW5jdGlvbiBnZXRfc2xvdF9jaGFuZ2VzKGRlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBmbikge1xuICAgIGlmIChkZWZpbml0aW9uWzJdICYmIGZuKSB7XG4gICAgICAgIGNvbnN0IGxldHMgPSBkZWZpbml0aW9uWzJdKGZuKGRpcnR5KSk7XG4gICAgICAgIGlmICgkJHNjb3BlLmRpcnR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZXRzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbGV0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZCA9IFtdO1xuICAgICAgICAgICAgY29uc3QgbGVuID0gTWF0aC5tYXgoJCRzY29wZS5kaXJ0eS5sZW5ndGgsIGxldHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBtZXJnZWRbaV0gPSAkJHNjb3BlLmRpcnR5W2ldIHwgbGV0c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQkc2NvcGUuZGlydHkgfCBsZXRzO1xuICAgIH1cbiAgICByZXR1cm4gJCRzY29wZS5kaXJ0eTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9zbG90KHNsb3QsIHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBkaXJ0eSwgZ2V0X3Nsb3RfY2hhbmdlc19mbiwgZ2V0X3Nsb3RfY29udGV4dF9mbikge1xuICAgIGNvbnN0IHNsb3RfY2hhbmdlcyA9IGdldF9zbG90X2NoYW5nZXMoc2xvdF9kZWZpbml0aW9uLCAkJHNjb3BlLCBkaXJ0eSwgZ2V0X3Nsb3RfY2hhbmdlc19mbik7XG4gICAgaWYgKHNsb3RfY2hhbmdlcykge1xuICAgICAgICBjb25zdCBzbG90X2NvbnRleHQgPSBnZXRfc2xvdF9jb250ZXh0KHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBnZXRfc2xvdF9jb250ZXh0X2ZuKTtcbiAgICAgICAgc2xvdC5wKHNsb3RfY29udGV4dCwgc2xvdF9jaGFuZ2VzKTtcbiAgICB9XG59XG5mdW5jdGlvbiBleGNsdWRlX2ludGVybmFsX3Byb3BzKHByb3BzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrIGluIHByb3BzKVxuICAgICAgICBpZiAoa1swXSAhPT0gJyQnKVxuICAgICAgICAgICAgcmVzdWx0W2tdID0gcHJvcHNba107XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVfcmVzdF9wcm9wcyhwcm9wcywga2V5cykge1xuICAgIGNvbnN0IHJlc3QgPSB7fTtcbiAgICBrZXlzID0gbmV3IFNldChrZXlzKTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gcHJvcHMpXG4gICAgICAgIGlmICgha2V5cy5oYXMoaykgJiYga1swXSAhPT0gJyQnKVxuICAgICAgICAgICAgcmVzdFtrXSA9IHByb3BzW2tdO1xuICAgIHJldHVybiByZXN0O1xufVxuZnVuY3Rpb24gb25jZShmbikge1xuICAgIGxldCByYW4gPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHJhbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgICAgZm4uY2FsbCh0aGlzLCAuLi5hcmdzKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gbnVsbF90b19lbXB0eSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNldF9zdG9yZV92YWx1ZShzdG9yZSwgcmV0LCB2YWx1ZSA9IHJldCkge1xuICAgIHN0b3JlLnNldCh2YWx1ZSk7XG4gICAgcmV0dXJuIHJldDtcbn1cbmNvbnN0IGhhc19wcm9wID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG5mdW5jdGlvbiBhY3Rpb25fZGVzdHJveWVyKGFjdGlvbl9yZXN1bHQpIHtcbiAgICByZXR1cm4gYWN0aW9uX3Jlc3VsdCAmJiBpc19mdW5jdGlvbihhY3Rpb25fcmVzdWx0LmRlc3Ryb3kpID8gYWN0aW9uX3Jlc3VsdC5kZXN0cm95IDogbm9vcDtcbn1cblxuY29uc3QgaXNfY2xpZW50ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5leHBvcnRzLm5vdyA9IGlzX2NsaWVudFxuICAgID8gKCkgPT4gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpXG4gICAgOiAoKSA9PiBEYXRlLm5vdygpO1xuZXhwb3J0cy5yYWYgPSBpc19jbGllbnQgPyBjYiA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpIDogbm9vcDtcbi8vIHVzZWQgaW50ZXJuYWxseSBmb3IgdGVzdGluZ1xuZnVuY3Rpb24gc2V0X25vdyhmbikge1xuICAgIGV4cG9ydHMubm93ID0gZm47XG59XG5mdW5jdGlvbiBzZXRfcmFmKGZuKSB7XG4gICAgZXhwb3J0cy5yYWYgPSBmbjtcbn1cblxuY29uc3QgdGFza3MgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBydW5fdGFza3Mobm93KSB7XG4gICAgdGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgaWYgKCF0YXNrLmMobm93KSkge1xuICAgICAgICAgICAgdGFza3MuZGVsZXRlKHRhc2spO1xuICAgICAgICAgICAgdGFzay5mKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodGFza3Muc2l6ZSAhPT0gMClcbiAgICAgICAgZXhwb3J0cy5yYWYocnVuX3Rhc2tzKTtcbn1cbi8qKlxuICogRm9yIHRlc3RpbmcgcHVycG9zZXMgb25seSFcbiAqL1xuZnVuY3Rpb24gY2xlYXJfbG9vcHMoKSB7XG4gICAgdGFza3MuY2xlYXIoKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB0YXNrIHRoYXQgcnVucyBvbiBlYWNoIHJhZiBmcmFtZVxuICogdW50aWwgaXQgcmV0dXJucyBhIGZhbHN5IHZhbHVlIG9yIGlzIGFib3J0ZWRcbiAqL1xuZnVuY3Rpb24gbG9vcChjYWxsYmFjaykge1xuICAgIGxldCB0YXNrO1xuICAgIGlmICh0YXNrcy5zaXplID09PSAwKVxuICAgICAgICBleHBvcnRzLnJhZihydW5fdGFza3MpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByb21pc2U6IG5ldyBQcm9taXNlKGZ1bGZpbGwgPT4ge1xuICAgICAgICAgICAgdGFza3MuYWRkKHRhc2sgPSB7IGM6IGNhbGxiYWNrLCBmOiBmdWxmaWxsIH0pO1xuICAgICAgICB9KSxcbiAgICAgICAgYWJvcnQoKSB7XG4gICAgICAgICAgICB0YXNrcy5kZWxldGUodGFzayk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBhcHBlbmQodGFyZ2V0LCBub2RlKSB7XG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xufVxuZnVuY3Rpb24gaW5zZXJ0KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgdGFyZ2V0Lmluc2VydEJlZm9yZShub2RlLCBhbmNob3IgfHwgbnVsbCk7XG59XG5mdW5jdGlvbiBkZXRhY2gobm9kZSkge1xuICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfZWFjaChpdGVyYXRpb25zLCBkZXRhY2hpbmcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGl0ZXJhdGlvbnNbaV0pXG4gICAgICAgICAgICBpdGVyYXRpb25zW2ldLmQoZGV0YWNoaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRfaXMobmFtZSwgaXMpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lLCB7IGlzIH0pO1xufVxuZnVuY3Rpb24gb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcyhvYmosIGV4Y2x1ZGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG4gICAgICAgIGlmIChoYXNfcHJvcChvYmosIGspXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAmJiBleGNsdWRlLmluZGV4T2YoaykgPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0YXJnZXRba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIHN2Z19lbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIG5hbWUpO1xufVxuZnVuY3Rpb24gdGV4dChkYXRhKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRhdGEpO1xufVxuZnVuY3Rpb24gc3BhY2UoKSB7XG4gICAgcmV0dXJuIHRleHQoJyAnKTtcbn1cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICAgIHJldHVybiB0ZXh0KCcnKTtcbn1cbmZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBwcmV2ZW50X2RlZmF1bHQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzdG9wX3Byb3BhZ2F0aW9uKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNlbGYoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcylcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBhdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICBlbHNlIGlmIChub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpICE9PSB2YWx1ZSlcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBzZXRfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMobm9kZS5fX3Byb3RvX18pO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgbm9kZS5zdHlsZS5jc3NUZXh0ID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ19fdmFsdWUnKSB7XG4gICAgICAgICAgICBub2RlLnZhbHVlID0gbm9kZVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlc2NyaXB0b3JzW2tleV0gJiYgZGVzY3JpcHRvcnNba2V5XS5zZXQpIHtcbiAgICAgICAgICAgIG5vZGVba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N2Z19hdHRyaWJ1dGVzKG5vZGUsIGF0dHJpYnV0ZXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9jdXN0b21fZWxlbWVudF9kYXRhKG5vZGUsIHByb3AsIHZhbHVlKSB7XG4gICAgaWYgKHByb3AgaW4gbm9kZSkge1xuICAgICAgICBub2RlW3Byb3BdID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhdHRyKG5vZGUsIHByb3AsIHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiB4bGlua19hdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRfYmluZGluZ19ncm91cF92YWx1ZShncm91cCwgX192YWx1ZSwgY2hlY2tlZCkge1xuICAgIGNvbnN0IHZhbHVlID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGdyb3VwW2ldLmNoZWNrZWQpXG4gICAgICAgICAgICB2YWx1ZS5hZGQoZ3JvdXBbaV0uX192YWx1ZSk7XG4gICAgfVxuICAgIGlmICghY2hlY2tlZCkge1xuICAgICAgICB2YWx1ZS5kZWxldGUoX192YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHRvX251bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gJycgPyB1bmRlZmluZWQgOiArdmFsdWU7XG59XG5mdW5jdGlvbiB0aW1lX3Jhbmdlc190b19hcnJheShyYW5nZXMpIHtcbiAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFycmF5LnB1c2goeyBzdGFydDogcmFuZ2VzLnN0YXJ0KGkpLCBlbmQ6IHJhbmdlcy5lbmQoaSkgfSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cbmZ1bmN0aW9uIGNoaWxkcmVuKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShlbGVtZW50LmNoaWxkTm9kZXMpO1xufVxuZnVuY3Rpb24gY2xhaW1fZWxlbWVudChub2RlcywgbmFtZSwgYXR0cmlidXRlcywgc3ZnKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLm5vZGVOYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgICBsZXQgaiA9IDA7XG4gICAgICAgICAgICBjb25zdCByZW1vdmUgPSBbXTtcbiAgICAgICAgICAgIHdoaWxlIChqIDwgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IG5vZGUuYXR0cmlidXRlc1tqKytdO1xuICAgICAgICAgICAgICAgIGlmICghYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlLnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgcmVtb3ZlLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUocmVtb3ZlW2tdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub2Rlcy5zcGxpY2UoaSwgMSlbMF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN2ZyA/IHN2Z19lbGVtZW50KG5hbWUpIDogZWxlbWVudChuYW1lKTtcbn1cbmZ1bmN0aW9uIGNsYWltX3RleHQobm9kZXMsIGRhdGEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgICAgIG5vZGUuZGF0YSA9ICcnICsgZGF0YTtcbiAgICAgICAgICAgIHJldHVybiBub2Rlcy5zcGxpY2UoaSwgMSlbMF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRleHQoZGF0YSk7XG59XG5mdW5jdGlvbiBjbGFpbV9zcGFjZShub2Rlcykge1xuICAgIHJldHVybiBjbGFpbV90ZXh0KG5vZGVzLCAnICcpO1xufVxuZnVuY3Rpb24gc2V0X2RhdGEodGV4dCwgZGF0YSkge1xuICAgIGRhdGEgPSAnJyArIGRhdGE7XG4gICAgaWYgKHRleHQud2hvbGVUZXh0ICE9PSBkYXRhKVxuICAgICAgICB0ZXh0LmRhdGEgPSBkYXRhO1xufVxuZnVuY3Rpb24gc2V0X2lucHV0X3ZhbHVlKGlucHV0LCB2YWx1ZSkge1xuICAgIGlucHV0LnZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdHlwZShpbnB1dCwgdHlwZSkge1xuICAgIHRyeSB7XG4gICAgICAgIGlucHV0LnR5cGUgPSB0eXBlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N0eWxlKG5vZGUsIGtleSwgdmFsdWUsIGltcG9ydGFudCkge1xuICAgIG5vZGUuc3R5bGUuc2V0UHJvcGVydHkoa2V5LCB2YWx1ZSwgaW1wb3J0YW50ID8gJ2ltcG9ydGFudCcgOiAnJyk7XG59XG5mdW5jdGlvbiBzZWxlY3Rfb3B0aW9uKHNlbGVjdCwgdmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHNlbGVjdC5vcHRpb25zW2ldO1xuICAgICAgICBpZiAob3B0aW9uLl9fdmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2VsZWN0X29wdGlvbnMoc2VsZWN0LCB2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0Lm9wdGlvbnNbaV07XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IH52YWx1ZS5pbmRleE9mKG9wdGlvbi5fX3ZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZWxlY3RfdmFsdWUoc2VsZWN0KSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRfb3B0aW9uID0gc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJzpjaGVja2VkJykgfHwgc2VsZWN0Lm9wdGlvbnNbMF07XG4gICAgcmV0dXJuIHNlbGVjdGVkX29wdGlvbiAmJiBzZWxlY3RlZF9vcHRpb24uX192YWx1ZTtcbn1cbmZ1bmN0aW9uIHNlbGVjdF9tdWx0aXBsZV92YWx1ZShzZWxlY3QpIHtcbiAgICByZXR1cm4gW10ubWFwLmNhbGwoc2VsZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoJzpjaGVja2VkJyksIG9wdGlvbiA9PiBvcHRpb24uX192YWx1ZSk7XG59XG4vLyB1bmZvcnR1bmF0ZWx5IHRoaXMgY2FuJ3QgYmUgYSBjb25zdGFudCBhcyB0aGF0IHdvdWxkbid0IGJlIHRyZWUtc2hha2VhYmxlXG4vLyBzbyB3ZSBjYWNoZSB0aGUgcmVzdWx0IGluc3RlYWRcbmxldCBjcm9zc29yaWdpbjtcbmZ1bmN0aW9uIGlzX2Nyb3Nzb3JpZ2luKCkge1xuICAgIGlmIChjcm9zc29yaWdpbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNyb3Nzb3JpZ2luID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHZvaWQgd2luZG93LnBhcmVudC5kb2N1bWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNyb3Nzb3JpZ2luID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3Jvc3NvcmlnaW47XG59XG5mdW5jdGlvbiBhZGRfcmVzaXplX2xpc3RlbmVyKG5vZGUsIGZuKSB7XG4gICAgY29uc3QgY29tcHV0ZWRfc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGNvbnN0IHpfaW5kZXggPSAocGFyc2VJbnQoY29tcHV0ZWRfc3R5bGUuekluZGV4KSB8fCAwKSAtIDE7XG4gICAgaWYgKGNvbXB1dGVkX3N0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICB9XG4gICAgY29uc3QgaWZyYW1lID0gZWxlbWVudCgnaWZyYW1lJyk7XG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgZGlzcGxheTogYmxvY2s7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyBgICtcbiAgICAgICAgYG92ZXJmbG93OiBoaWRkZW47IGJvcmRlcjogMDsgb3BhY2l0eTogMDsgcG9pbnRlci1ldmVudHM6IG5vbmU7IHotaW5kZXg6ICR7el9pbmRleH07YCk7XG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgIGlmcmFtZS50YWJJbmRleCA9IC0xO1xuICAgIGNvbnN0IGNyb3Nzb3JpZ2luID0gaXNfY3Jvc3NvcmlnaW4oKTtcbiAgICBsZXQgdW5zdWJzY3JpYmU7XG4gICAgaWYgKGNyb3Nzb3JpZ2luKSB7XG4gICAgICAgIGlmcmFtZS5zcmMgPSBgZGF0YTp0ZXh0L2h0bWwsPHNjcmlwdD5vbnJlc2l6ZT1mdW5jdGlvbigpe3BhcmVudC5wb3N0TWVzc2FnZSgwLCcqJyl9PC9zY3JpcHQ+YDtcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBsaXN0ZW4od2luZG93LCAnbWVzc2FnZScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gaWZyYW1lLmNvbnRlbnRXaW5kb3cpXG4gICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZnJhbWUuc3JjID0gJ2Fib3V0OmJsYW5rJztcbiAgICAgICAgaWZyYW1lLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gbGlzdGVuKGlmcmFtZS5jb250ZW50V2luZG93LCAncmVzaXplJywgZm4pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBhcHBlbmQobm9kZSwgaWZyYW1lKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoY3Jvc3NvcmlnaW4pIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodW5zdWJzY3JpYmUgJiYgaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZGV0YWNoKGlmcmFtZSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvZ2dsZV9jbGFzcyhlbGVtZW50LCBuYW1lLCB0b2dnbGUpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdFt0b2dnbGUgPyAnYWRkJyA6ICdyZW1vdmUnXShuYW1lKTtcbn1cbmZ1bmN0aW9uIGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwpIHtcbiAgICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgZS5pbml0Q3VzdG9tRXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlLCBkZXRhaWwpO1xuICAgIHJldHVybiBlO1xufVxuZnVuY3Rpb24gcXVlcnlfc2VsZWN0b3JfYWxsKHNlbGVjdG9yLCBwYXJlbnQgPSBkb2N1bWVudC5ib2R5KSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbn1cbmNsYXNzIEh0bWxUYWcge1xuICAgIGNvbnN0cnVjdG9yKGFuY2hvciA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5hID0gYW5jaG9yO1xuICAgICAgICB0aGlzLmUgPSB0aGlzLm4gPSBudWxsO1xuICAgIH1cbiAgICBtKGh0bWwsIHRhcmdldCwgYW5jaG9yID0gbnVsbCkge1xuICAgICAgICBpZiAoIXRoaXMuZSkge1xuICAgICAgICAgICAgdGhpcy5lID0gZWxlbWVudCh0YXJnZXQubm9kZU5hbWUpO1xuICAgICAgICAgICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgICAgICAgICAgdGhpcy5oKGh0bWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaShhbmNob3IpO1xuICAgIH1cbiAgICBoKGh0bWwpIHtcbiAgICAgICAgdGhpcy5lLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHRoaXMubiA9IEFycmF5LmZyb20odGhpcy5lLmNoaWxkTm9kZXMpO1xuICAgIH1cbiAgICBpKGFuY2hvcikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaW5zZXJ0KHRoaXMudCwgdGhpcy5uW2ldLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHAoaHRtbCkge1xuICAgICAgICB0aGlzLmQoKTtcbiAgICAgICAgdGhpcy5oKGh0bWwpO1xuICAgICAgICB0aGlzLmkodGhpcy5hKTtcbiAgICB9XG4gICAgZCgpIHtcbiAgICAgICAgdGhpcy5uLmZvckVhY2goZGV0YWNoKTtcbiAgICB9XG59XG5cbmNvbnN0IGFjdGl2ZV9kb2NzID0gbmV3IFNldCgpO1xubGV0IGFjdGl2ZSA9IDA7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZGFya3NreWFwcC9zdHJpbmctaGFzaC9ibG9iL21hc3Rlci9pbmRleC5qc1xuZnVuY3Rpb24gaGFzaChzdHIpIHtcbiAgICBsZXQgaGFzaCA9IDUzODE7XG4gICAgbGV0IGkgPSBzdHIubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pXG4gICAgICAgIGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSBeIHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBoYXNoID4+PiAwO1xufVxuZnVuY3Rpb24gY3JlYXRlX3J1bGUobm9kZSwgYSwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNlLCBmbiwgdWlkID0gMCkge1xuICAgIGNvbnN0IHN0ZXAgPSAxNi42NjYgLyBkdXJhdGlvbjtcbiAgICBsZXQga2V5ZnJhbWVzID0gJ3tcXG4nO1xuICAgIGZvciAobGV0IHAgPSAwOyBwIDw9IDE7IHAgKz0gc3RlcCkge1xuICAgICAgICBjb25zdCB0ID0gYSArIChiIC0gYSkgKiBlYXNlKHApO1xuICAgICAgICBrZXlmcmFtZXMgKz0gcCAqIDEwMCArIGAleyR7Zm4odCwgMSAtIHQpfX1cXG5gO1xuICAgIH1cbiAgICBjb25zdCBydWxlID0ga2V5ZnJhbWVzICsgYDEwMCUgeyR7Zm4oYiwgMSAtIGIpfX1cXG59YDtcbiAgICBjb25zdCBuYW1lID0gYF9fc3ZlbHRlXyR7aGFzaChydWxlKX1fJHt1aWR9YDtcbiAgICBjb25zdCBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgYWN0aXZlX2RvY3MuYWRkKGRvYyk7XG4gICAgY29uc3Qgc3R5bGVzaGVldCA9IGRvYy5fX3N2ZWx0ZV9zdHlsZXNoZWV0IHx8IChkb2MuX19zdmVsdGVfc3R5bGVzaGVldCA9IGRvYy5oZWFkLmFwcGVuZENoaWxkKGVsZW1lbnQoJ3N0eWxlJykpLnNoZWV0KTtcbiAgICBjb25zdCBjdXJyZW50X3J1bGVzID0gZG9jLl9fc3ZlbHRlX3J1bGVzIHx8IChkb2MuX19zdmVsdGVfcnVsZXMgPSB7fSk7XG4gICAgaWYgKCFjdXJyZW50X3J1bGVzW25hbWVdKSB7XG4gICAgICAgIGN1cnJlbnRfcnVsZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgICBzdHlsZXNoZWV0Lmluc2VydFJ1bGUoYEBrZXlmcmFtZXMgJHtuYW1lfSAke3J1bGV9YCwgc3R5bGVzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgIH1cbiAgICBjb25zdCBhbmltYXRpb24gPSBub2RlLnN0eWxlLmFuaW1hdGlvbiB8fCAnJztcbiAgICBub2RlLnN0eWxlLmFuaW1hdGlvbiA9IGAke2FuaW1hdGlvbiA/IGAke2FuaW1hdGlvbn0sIGAgOiBgYH0ke25hbWV9ICR7ZHVyYXRpb259bXMgbGluZWFyICR7ZGVsYXl9bXMgMSBib3RoYDtcbiAgICBhY3RpdmUgKz0gMTtcbiAgICByZXR1cm4gbmFtZTtcbn1cbmZ1bmN0aW9uIGRlbGV0ZV9ydWxlKG5vZGUsIG5hbWUpIHtcbiAgICBjb25zdCBwcmV2aW91cyA9IChub2RlLnN0eWxlLmFuaW1hdGlvbiB8fCAnJykuc3BsaXQoJywgJyk7XG4gICAgY29uc3QgbmV4dCA9IHByZXZpb3VzLmZpbHRlcihuYW1lXG4gICAgICAgID8gYW5pbSA9PiBhbmltLmluZGV4T2YobmFtZSkgPCAwIC8vIHJlbW92ZSBzcGVjaWZpYyBhbmltYXRpb25cbiAgICAgICAgOiBhbmltID0+IGFuaW0uaW5kZXhPZignX19zdmVsdGUnKSA9PT0gLTEgLy8gcmVtb3ZlIGFsbCBTdmVsdGUgYW5pbWF0aW9uc1xuICAgICk7XG4gICAgY29uc3QgZGVsZXRlZCA9IHByZXZpb3VzLmxlbmd0aCAtIG5leHQubGVuZ3RoO1xuICAgIGlmIChkZWxldGVkKSB7XG4gICAgICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gbmV4dC5qb2luKCcsICcpO1xuICAgICAgICBhY3RpdmUgLT0gZGVsZXRlZDtcbiAgICAgICAgaWYgKCFhY3RpdmUpXG4gICAgICAgICAgICBjbGVhcl9ydWxlcygpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsZWFyX3J1bGVzKCkge1xuICAgIGV4cG9ydHMucmFmKCgpID0+IHtcbiAgICAgICAgaWYgKGFjdGl2ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgYWN0aXZlX2RvY3MuZm9yRWFjaChkb2MgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3R5bGVzaGVldCA9IGRvYy5fX3N2ZWx0ZV9zdHlsZXNoZWV0O1xuICAgICAgICAgICAgbGV0IGkgPSBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pXG4gICAgICAgICAgICAgICAgc3R5bGVzaGVldC5kZWxldGVSdWxlKGkpO1xuICAgICAgICAgICAgZG9jLl9fc3ZlbHRlX3J1bGVzID0ge307XG4gICAgICAgIH0pO1xuICAgICAgICBhY3RpdmVfZG9jcy5jbGVhcigpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVfYW5pbWF0aW9uKG5vZGUsIGZyb20sIGZuLCBwYXJhbXMpIHtcbiAgICBpZiAoIWZyb20pXG4gICAgICAgIHJldHVybiBub29wO1xuICAgIGNvbnN0IHRvID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoZnJvbS5sZWZ0ID09PSB0by5sZWZ0ICYmIGZyb20ucmlnaHQgPT09IHRvLnJpZ2h0ICYmIGZyb20udG9wID09PSB0by50b3AgJiYgZnJvbS5ib3R0b20gPT09IHRvLmJvdHRvbSlcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgXG4gICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBzaG91bGQgdGhpcyBiZSBzZXBhcmF0ZWQgZnJvbSBkZXN0cnVjdHVyaW5nPyBPciBzdGFydC9lbmQgYWRkZWQgdG8gcHVibGljIGFwaSBhbmQgZG9jdW1lbnRhdGlvbj9cbiAgICBzdGFydDogc3RhcnRfdGltZSA9IGV4cG9ydHMubm93KCkgKyBkZWxheSwgXG4gICAgLy8gQHRzLWlnbm9yZSB0b2RvOlxuICAgIGVuZCA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbiwgdGljayA9IG5vb3AsIGNzcyB9ID0gZm4obm9kZSwgeyBmcm9tLCB0byB9LCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gdHJ1ZTtcbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIGxldCBuYW1lO1xuICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICBuYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWxheSkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIG5hbWUpO1xuICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgaWYgKCFzdGFydGVkICYmIG5vdyA+PSBzdGFydF90aW1lKSB7XG4gICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRlZCAmJiBub3cgPj0gZW5kKSB7XG4gICAgICAgICAgICB0aWNrKDEsIDApO1xuICAgICAgICAgICAgc3RvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydGVkKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gbm93IC0gc3RhcnRfdGltZTtcbiAgICAgICAgICAgIGNvbnN0IHQgPSAwICsgMSAqIGVhc2luZyhwIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgc3RhcnQoKTtcbiAgICB0aWNrKDAsIDEpO1xuICAgIHJldHVybiBzdG9wO1xufVxuZnVuY3Rpb24gZml4X3Bvc2l0aW9uKG5vZGUpIHtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgaWYgKHN0eWxlLnBvc2l0aW9uICE9PSAnYWJzb2x1dGUnICYmIHN0eWxlLnBvc2l0aW9uICE9PSAnZml4ZWQnKSB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gc3R5bGU7XG4gICAgICAgIGNvbnN0IGEgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgbm9kZS5zdHlsZS53aWR0aCA9IHdpZHRoO1xuICAgICAgICBub2RlLnN0eWxlLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgYWRkX3RyYW5zZm9ybShub2RlLCBhKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhZGRfdHJhbnNmb3JtKG5vZGUsIGEpIHtcbiAgICBjb25zdCBiID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoYS5sZWZ0ICE9PSBiLmxlZnQgfHwgYS50b3AgIT09IGIudG9wKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcbiAgICAgICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSBgJHt0cmFuc2Zvcm19IHRyYW5zbGF0ZSgke2EubGVmdCAtIGIubGVmdH1weCwgJHthLnRvcCAtIGIudG9wfXB4KWA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgZXhwb3J0cy5jdXJyZW50X2NvbXBvbmVudCA9IGNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGdldF9jdXJyZW50X2NvbXBvbmVudCgpIHtcbiAgICBpZiAoIWV4cG9ydHMuY3VycmVudF9jb21wb25lbnQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRnVuY3Rpb24gY2FsbGVkIG91dHNpZGUgY29tcG9uZW50IGluaXRpYWxpemF0aW9uYCk7XG4gICAgcmV0dXJuIGV4cG9ydHMuY3VycmVudF9jb21wb25lbnQ7XG59XG5mdW5jdGlvbiBiZWZvcmVVcGRhdGUoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5iZWZvcmVfdXBkYXRlLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gb25Nb3VudChmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX21vdW50LnB1c2goZm4pO1xufVxuZnVuY3Rpb24gYWZ0ZXJVcGRhdGUoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5hZnRlcl91cGRhdGUucHVzaChmbik7XG59XG5mdW5jdGlvbiBvbkRlc3Ryb3koZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5vbl9kZXN0cm95LnB1c2goZm4pO1xufVxuZnVuY3Rpb24gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCkge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudCgpO1xuICAgIHJldHVybiAodHlwZSwgZGV0YWlsKSA9PiB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IGNvbXBvbmVudC4kJC5jYWxsYmFja3NbdHlwZV07XG4gICAgICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gYXJlIHRoZXJlIHNpdHVhdGlvbnMgd2hlcmUgZXZlbnRzIGNvdWxkIGJlIGRpc3BhdGNoZWRcbiAgICAgICAgICAgIC8vIGluIGEgc2VydmVyIChub24tRE9NKSBlbnZpcm9ubWVudD9cbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gY3VzdG9tX2V2ZW50KHR5cGUsIGRldGFpbCk7XG4gICAgICAgICAgICBjYWxsYmFja3Muc2xpY2UoKS5mb3JFYWNoKGZuID0+IHtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKGNvbXBvbmVudCwgZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gc2V0Q29udGV4dChrZXksIGNvbnRleHQpIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5jb250ZXh0LnNldChrZXksIGNvbnRleHQpO1xufVxuZnVuY3Rpb24gZ2V0Q29udGV4dChrZXkpIHtcbiAgICByZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5nZXQoa2V5KTtcbn1cbi8vIFRPRE8gZmlndXJlIG91dCBpZiB3ZSBzdGlsbCB3YW50IHRvIHN1cHBvcnRcbi8vIHNob3J0aGFuZCBldmVudHMsIG9yIGlmIHdlIHdhbnQgdG8gaW1wbGVtZW50XG4vLyBhIHJlYWwgYnViYmxpbmcgbWVjaGFuaXNtXG5mdW5jdGlvbiBidWJibGUoY29tcG9uZW50LCBldmVudCkge1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IGNvbXBvbmVudC4kJC5jYWxsYmFja3NbZXZlbnQudHlwZV07XG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICBjYWxsYmFja3Muc2xpY2UoKS5mb3JFYWNoKGZuID0+IGZuKGV2ZW50KSk7XG4gICAgfVxufVxuXG5jb25zdCBkaXJ0eV9jb21wb25lbnRzID0gW107XG5jb25zdCBpbnRyb3MgPSB7IGVuYWJsZWQ6IGZhbHNlIH07XG5jb25zdCBiaW5kaW5nX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgcmVuZGVyX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgZmx1c2hfY2FsbGJhY2tzID0gW107XG5jb25zdCByZXNvbHZlZF9wcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5sZXQgdXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gc2NoZWR1bGVfdXBkYXRlKCkge1xuICAgIGlmICghdXBkYXRlX3NjaGVkdWxlZCkge1xuICAgICAgICB1cGRhdGVfc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgcmVzb2x2ZWRfcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0aWNrKCkge1xuICAgIHNjaGVkdWxlX3VwZGF0ZSgpO1xuICAgIHJldHVybiByZXNvbHZlZF9wcm9taXNlO1xufVxuZnVuY3Rpb24gYWRkX3JlbmRlcl9jYWxsYmFjayhmbikge1xuICAgIHJlbmRlcl9jYWxsYmFja3MucHVzaChmbik7XG59XG5mdW5jdGlvbiBhZGRfZmx1c2hfY2FsbGJhY2soZm4pIHtcbiAgICBmbHVzaF9jYWxsYmFja3MucHVzaChmbik7XG59XG5sZXQgZmx1c2hpbmcgPSBmYWxzZTtcbmNvbnN0IHNlZW5fY2FsbGJhY2tzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgaWYgKGZsdXNoaW5nKVxuICAgICAgICByZXR1cm47XG4gICAgZmx1c2hpbmcgPSB0cnVlO1xuICAgIGRvIHtcbiAgICAgICAgLy8gZmlyc3QsIGNhbGwgYmVmb3JlVXBkYXRlIGZ1bmN0aW9uc1xuICAgICAgICAvLyBhbmQgdXBkYXRlIGNvbXBvbmVudHNcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJ0eV9jb21wb25lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBkaXJ0eV9jb21wb25lbnRzW2ldO1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoY29tcG9uZW50LiQkKTtcbiAgICAgICAgfVxuICAgICAgICBkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIHdoaWxlIChiaW5kaW5nX2NhbGxiYWNrcy5sZW5ndGgpXG4gICAgICAgICAgICBiaW5kaW5nX2NhbGxiYWNrcy5wb3AoKSgpO1xuICAgICAgICAvLyB0aGVuLCBvbmNlIGNvbXBvbmVudHMgYXJlIHVwZGF0ZWQsIGNhbGxcbiAgICAgICAgLy8gYWZ0ZXJVcGRhdGUgZnVuY3Rpb25zLiBUaGlzIG1heSBjYXVzZVxuICAgICAgICAvLyBzdWJzZXF1ZW50IHVwZGF0ZXMuLi5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW5kZXJfY2FsbGJhY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IHJlbmRlcl9jYWxsYmFja3NbaV07XG4gICAgICAgICAgICBpZiAoIXNlZW5fY2FsbGJhY2tzLmhhcyhjYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICAvLyAuLi5zbyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGxvb3BzXG4gICAgICAgICAgICAgICAgc2Vlbl9jYWxsYmFja3MuYWRkKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlbmRlcl9jYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICB9IHdoaWxlIChkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCk7XG4gICAgd2hpbGUgKGZsdXNoX2NhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgZmx1c2hfY2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgfVxuICAgIHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBmbHVzaGluZyA9IGZhbHNlO1xuICAgIHNlZW5fY2FsbGJhY2tzLmNsZWFyKCk7XG59XG5mdW5jdGlvbiB1cGRhdGUoJCQpIHtcbiAgICBpZiAoJCQuZnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgJCQudXBkYXRlKCk7XG4gICAgICAgIHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG4gICAgICAgIGNvbnN0IGRpcnR5ID0gJCQuZGlydHk7XG4gICAgICAgICQkLmRpcnR5ID0gWy0xXTtcbiAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQucCgkJC5jdHgsIGRpcnR5KTtcbiAgICAgICAgJCQuYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG4gICAgfVxufVxuXG5sZXQgcHJvbWlzZTtcbmZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgaWYgKCFwcm9taXNlKSB7XG4gICAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBkaXNwYXRjaChub2RlLCBkaXJlY3Rpb24sIGtpbmQpIHtcbiAgICBub2RlLmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KGAke2RpcmVjdGlvbiA/ICdpbnRybycgOiAnb3V0cm8nfSR7a2luZH1gKSk7XG59XG5jb25zdCBvdXRyb2luZyA9IG5ldyBTZXQoKTtcbmxldCBvdXRyb3M7XG5mdW5jdGlvbiBncm91cF9vdXRyb3MoKSB7XG4gICAgb3V0cm9zID0ge1xuICAgICAgICByOiAwLFxuICAgICAgICBjOiBbXSxcbiAgICAgICAgcDogb3V0cm9zIC8vIHBhcmVudCBncm91cFxuICAgIH07XG59XG5mdW5jdGlvbiBjaGVja19vdXRyb3MoKSB7XG4gICAgaWYgKCFvdXRyb3Mucikge1xuICAgICAgICBydW5fYWxsKG91dHJvcy5jKTtcbiAgICB9XG4gICAgb3V0cm9zID0gb3V0cm9zLnA7XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX2luKGJsb2NrLCBsb2NhbCkge1xuICAgIGlmIChibG9jayAmJiBibG9jay5pKSB7XG4gICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgIGJsb2NrLmkobG9jYWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb25fb3V0KGJsb2NrLCBsb2NhbCwgZGV0YWNoLCBjYWxsYmFjaykge1xuICAgIGlmIChibG9jayAmJiBibG9jay5vKSB7XG4gICAgICAgIGlmIChvdXRyb2luZy5oYXMoYmxvY2spKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBvdXRyb2luZy5hZGQoYmxvY2spO1xuICAgICAgICBvdXRyb3MuYy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoZGV0YWNoKVxuICAgICAgICAgICAgICAgICAgICBibG9jay5kKDEpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBibG9jay5vKGxvY2FsKTtcbiAgICB9XG59XG5jb25zdCBudWxsX3RyYW5zaXRpb24gPSB7IGR1cmF0aW9uOiAwIH07XG5mdW5jdGlvbiBjcmVhdGVfaW5fdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSBmYWxzZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgbGV0IHRhc2s7XG4gICAgbGV0IHVpZCA9IDA7XG4gICAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbygpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcywgdWlkKyspO1xuICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICBjb25zdCBzdGFydF90aW1lID0gZXhwb3J0cy5ub3coKSArIGRlbGF5O1xuICAgICAgICBjb25zdCBlbmRfdGltZSA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbjtcbiAgICAgICAgaWYgKHRhc2spXG4gICAgICAgICAgICB0YXNrLmFib3J0KCk7XG4gICAgICAgIHJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIHRydWUsICdzdGFydCcpKTtcbiAgICAgICAgdGFzayA9IGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBlbmRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDEsIDApO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCB0cnVlLCAnZW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBzdGFydF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlYXNpbmcoKG5vdyAtIHN0YXJ0X3RpbWUpIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnVubmluZztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBzdGFydGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQoKSB7XG4gICAgICAgICAgICBpZiAoc3RhcnRlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlKTtcbiAgICAgICAgICAgIGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICAgICAgd2FpdCgpLnRoZW4oZ28pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ28oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW52YWxpZGF0ZSgpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW5kKCkge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9vdXRfdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSB0cnVlO1xuICAgIGxldCBhbmltYXRpb25fbmFtZTtcbiAgICBjb25zdCBncm91cCA9IG91dHJvcztcbiAgICBncm91cC5yICs9IDE7XG4gICAgZnVuY3Rpb24gZ28oKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDEsIDAsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICBjb25zdCBzdGFydF90aW1lID0gZXhwb3J0cy5ub3coKSArIGRlbGF5O1xuICAgICAgICBjb25zdCBlbmRfdGltZSA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbjtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ3N0YXJ0JykpO1xuICAgICAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gZW5kX3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgZmFsc2UsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEtLWdyb3VwLnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCByZXN1bHQgaW4gYGVuZCgpYCBiZWluZyBjYWxsZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzbyB3ZSBkb24ndCBuZWVkIHRvIGNsZWFuIHVwIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bl9hbGwoZ3JvdXAuYyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGVhc2luZygobm93IC0gc3RhcnRfdGltZSkgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMSAtIHQsIHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydW5uaW5nO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgd2FpdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICBnbygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdvKCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGVuZChyZXNldCkge1xuICAgICAgICAgICAgaWYgKHJlc2V0ICYmIGNvbmZpZy50aWNrKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLnRpY2soMSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMsIGludHJvKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHQgPSBpbnRybyA/IDAgOiAxO1xuICAgIGxldCBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgIGxldCBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgIGxldCBhbmltYXRpb25fbmFtZSA9IG51bGw7XG4gICAgZnVuY3Rpb24gY2xlYXJfYW5pbWF0aW9uKCkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uX25hbWUpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGluaXQocHJvZ3JhbSwgZHVyYXRpb24pIHtcbiAgICAgICAgY29uc3QgZCA9IHByb2dyYW0uYiAtIHQ7XG4gICAgICAgIGR1cmF0aW9uICo9IE1hdGguYWJzKGQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYTogdCxcbiAgICAgICAgICAgIGI6IHByb2dyYW0uYixcbiAgICAgICAgICAgIGQsXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgIHN0YXJ0OiBwcm9ncmFtLnN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBwcm9ncmFtLnN0YXJ0ICsgZHVyYXRpb24sXG4gICAgICAgICAgICBncm91cDogcHJvZ3JhbS5ncm91cFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbyhiKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGNvbnN0IHByb2dyYW0gPSB7XG4gICAgICAgICAgICBzdGFydDogZXhwb3J0cy5ub3coKSArIGRlbGF5LFxuICAgICAgICAgICAgYlxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWIpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICBwcm9ncmFtLmdyb3VwID0gb3V0cm9zO1xuICAgICAgICAgICAgb3V0cm9zLnIgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocnVubmluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhbiBpbnRybywgYW5kIHRoZXJlJ3MgYSBkZWxheSwgd2UgbmVlZCB0byBkb1xuICAgICAgICAgICAgLy8gYW4gaW5pdGlhbCB0aWNrIGFuZC9vciBhcHBseSBDU1MgYW5pbWF0aW9uIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiKVxuICAgICAgICAgICAgICAgIHRpY2soMCwgMSk7XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0KHByb2dyYW0sIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgYiwgJ3N0YXJ0JykpO1xuICAgICAgICAgICAgbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nX3Byb2dyYW0gJiYgbm93ID4gcGVuZGluZ19wcm9ncmFtLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IGluaXQocGVuZGluZ19wcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCAnc3RhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIHQsIHJ1bm5pbmdfcHJvZ3JhbS5iLCBydW5uaW5nX3Byb2dyYW0uZHVyYXRpb24sIDAsIGVhc2luZywgY29uZmlnLmNzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm93ID49IHJ1bm5pbmdfcHJvZ3JhbS5lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCA9IHJ1bm5pbmdfcHJvZ3JhbS5iLCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwZW5kaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSdyZSBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbS5iKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludHJvIOKAlCB3ZSBjYW4gdGlkeSB1cCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG91dHJvIOKAlCBuZWVkcyB0byBiZSBjb29yZGluYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tcnVubmluZ19wcm9ncmFtLmdyb3VwLnIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5fYWxsKHJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5jKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBub3cgLSBydW5uaW5nX3Byb2dyYW0uc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gcnVubmluZ19wcm9ncmFtLmEgKyBydW5uaW5nX3Byb2dyYW0uZCAqIGVhc2luZyhwIC8gcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhIShydW5uaW5nX3Byb2dyYW0gfHwgcGVuZGluZ19wcm9ncmFtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJ1bihiKSB7XG4gICAgICAgICAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHdhaXQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgICAgICAgICAgZ28oYik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnbyhiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW5kKCkge1xuICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlX3Byb21pc2UocHJvbWlzZSwgaW5mbykge1xuICAgIGNvbnN0IHRva2VuID0gaW5mby50b2tlbiA9IHt9O1xuICAgIGZ1bmN0aW9uIHVwZGF0ZSh0eXBlLCBpbmRleCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaW5mby50b2tlbiAhPT0gdG9rZW4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGluZm8ucmVzb2x2ZWQgPSB2YWx1ZTtcbiAgICAgICAgbGV0IGNoaWxkX2N0eCA9IGluZm8uY3R4O1xuICAgICAgICBpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNoaWxkX2N0eCA9IGNoaWxkX2N0eC5zbGljZSgpO1xuICAgICAgICAgICAgY2hpbGRfY3R4W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBibG9jayA9IHR5cGUgJiYgKGluZm8uY3VycmVudCA9IHR5cGUpKGNoaWxkX2N0eCk7XG4gICAgICAgIGxldCBuZWVkc19mbHVzaCA9IGZhbHNlO1xuICAgICAgICBpZiAoaW5mby5ibG9jaykge1xuICAgICAgICAgICAgaWYgKGluZm8uYmxvY2tzKSB7XG4gICAgICAgICAgICAgICAgaW5mby5ibG9ja3MuZm9yRWFjaCgoYmxvY2ssIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IGluZGV4ICYmIGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25fb3V0KGJsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5ibG9ja3NbaV0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5mby5ibG9jay5kKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvY2suYygpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihibG9jaywgMSk7XG4gICAgICAgICAgICBibG9jay5tKGluZm8ubW91bnQoKSwgaW5mby5hbmNob3IpO1xuICAgICAgICAgICAgbmVlZHNfZmx1c2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGluZm8uYmxvY2sgPSBibG9jaztcbiAgICAgICAgaWYgKGluZm8uYmxvY2tzKVxuICAgICAgICAgICAgaW5mby5ibG9ja3NbaW5kZXhdID0gYmxvY2s7XG4gICAgICAgIGlmIChuZWVkc19mbHVzaCkge1xuICAgICAgICAgICAgZmx1c2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNfcHJvbWlzZShwcm9taXNlKSkge1xuICAgICAgICBjb25zdCBjdXJyZW50X2NvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudCgpO1xuICAgICAgICBwcm9taXNlLnRoZW4odmFsdWUgPT4ge1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnRoZW4sIDEsIGluZm8udmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLmNhdGNoLCAyLCBpbmZvLmVycm9yLCBlcnJvcik7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBpZiB3ZSBwcmV2aW91c2x5IGhhZCBhIHRoZW4vY2F0Y2ggYmxvY2ssIGRlc3Ryb3kgaXRcbiAgICAgICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby5wZW5kaW5nKSB7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby5wZW5kaW5nLCAwKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoaW5mby5jdXJyZW50ICE9PSBpbmZvLnRoZW4pIHtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnRoZW4sIDEsIGluZm8udmFsdWUsIHByb21pc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaW5mby5yZXNvbHZlZCA9IHByb21pc2U7XG4gICAgfVxufVxuXG5jb25zdCBnbG9iYWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGdsb2JhbFRoaXNcbiAgICAgICAgOiBnbG9iYWwpO1xuXG5mdW5jdGlvbiBkZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5kKDEpO1xuICAgIGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcbn1cbmZ1bmN0aW9uIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICB0cmFuc2l0aW9uX291dChibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICBsb29rdXAuZGVsZXRlKGJsb2NrLmtleSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBmaXhfYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmYoKTtcbiAgICBkZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApO1xufVxuZnVuY3Rpb24gZml4X2FuZF9vdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZigpO1xuICAgIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApO1xufVxuZnVuY3Rpb24gdXBkYXRlX2tleWVkX2VhY2gob2xkX2Jsb2NrcywgZGlydHksIGdldF9rZXksIGR5bmFtaWMsIGN0eCwgbGlzdCwgbG9va3VwLCBub2RlLCBkZXN0cm95LCBjcmVhdGVfZWFjaF9ibG9jaywgbmV4dCwgZ2V0X2NvbnRleHQpIHtcbiAgICBsZXQgbyA9IG9sZF9ibG9ja3MubGVuZ3RoO1xuICAgIGxldCBuID0gbGlzdC5sZW5ndGg7XG4gICAgbGV0IGkgPSBvO1xuICAgIGNvbnN0IG9sZF9pbmRleGVzID0ge307XG4gICAgd2hpbGUgKGktLSlcbiAgICAgICAgb2xkX2luZGV4ZXNbb2xkX2Jsb2Nrc1tpXS5rZXldID0gaTtcbiAgICBjb25zdCBuZXdfYmxvY2tzID0gW107XG4gICAgY29uc3QgbmV3X2xvb2t1cCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBkZWx0YXMgPSBuZXcgTWFwKCk7XG4gICAgaSA9IG47XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb25zdCBjaGlsZF9jdHggPSBnZXRfY29udGV4dChjdHgsIGxpc3QsIGkpO1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRfa2V5KGNoaWxkX2N0eCk7XG4gICAgICAgIGxldCBibG9jayA9IGxvb2t1cC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFibG9jaykge1xuICAgICAgICAgICAgYmxvY2sgPSBjcmVhdGVfZWFjaF9ibG9jayhrZXksIGNoaWxkX2N0eCk7XG4gICAgICAgICAgICBibG9jay5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZHluYW1pYykge1xuICAgICAgICAgICAgYmxvY2sucChjaGlsZF9jdHgsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgICBuZXdfbG9va3VwLnNldChrZXksIG5ld19ibG9ja3NbaV0gPSBibG9jayk7XG4gICAgICAgIGlmIChrZXkgaW4gb2xkX2luZGV4ZXMpXG4gICAgICAgICAgICBkZWx0YXMuc2V0KGtleSwgTWF0aC5hYnMoaSAtIG9sZF9pbmRleGVzW2tleV0pKTtcbiAgICB9XG4gICAgY29uc3Qgd2lsbF9tb3ZlID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IGRpZF9tb3ZlID0gbmV3IFNldCgpO1xuICAgIGZ1bmN0aW9uIGluc2VydChibG9jaykge1xuICAgICAgICB0cmFuc2l0aW9uX2luKGJsb2NrLCAxKTtcbiAgICAgICAgYmxvY2subShub2RlLCBuZXh0KTtcbiAgICAgICAgbG9va3VwLnNldChibG9jay5rZXksIGJsb2NrKTtcbiAgICAgICAgbmV4dCA9IGJsb2NrLmZpcnN0O1xuICAgICAgICBuLS07XG4gICAgfVxuICAgIHdoaWxlIChvICYmIG4pIHtcbiAgICAgICAgY29uc3QgbmV3X2Jsb2NrID0gbmV3X2Jsb2Nrc1tuIC0gMV07XG4gICAgICAgIGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3NbbyAtIDFdO1xuICAgICAgICBjb25zdCBuZXdfa2V5ID0gbmV3X2Jsb2NrLmtleTtcbiAgICAgICAgY29uc3Qgb2xkX2tleSA9IG9sZF9ibG9jay5rZXk7XG4gICAgICAgIGlmIChuZXdfYmxvY2sgPT09IG9sZF9ibG9jaykge1xuICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgICAgICAgbmV4dCA9IG5ld19ibG9jay5maXJzdDtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgICAgIG4tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2tleSkpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBvbGQgYmxvY2tcbiAgICAgICAgICAgIGRlc3Ryb3kob2xkX2Jsb2NrLCBsb29rdXApO1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFsb29rdXAuaGFzKG5ld19rZXkpIHx8IHdpbGxfbW92ZS5oYXMobmV3X2tleSkpIHtcbiAgICAgICAgICAgIGluc2VydChuZXdfYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRpZF9tb3ZlLmhhcyhvbGRfa2V5KSkge1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlbHRhcy5nZXQobmV3X2tleSkgPiBkZWx0YXMuZ2V0KG9sZF9rZXkpKSB7XG4gICAgICAgICAgICBkaWRfbW92ZS5hZGQobmV3X2tleSk7XG4gICAgICAgICAgICBpbnNlcnQobmV3X2Jsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdpbGxfbW92ZS5hZGQob2xkX2tleSk7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKG8tLSkge1xuICAgICAgICBjb25zdCBvbGRfYmxvY2sgPSBvbGRfYmxvY2tzW29dO1xuICAgICAgICBpZiAoIW5ld19sb29rdXAuaGFzKG9sZF9ibG9jay5rZXkpKVxuICAgICAgICAgICAgZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG4gICAgfVxuICAgIHdoaWxlIChuKVxuICAgICAgICBpbnNlcnQobmV3X2Jsb2Nrc1tuIC0gMV0pO1xuICAgIHJldHVybiBuZXdfYmxvY2tzO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfZWFjaF9rZXlzKGN0eCwgbGlzdCwgZ2V0X2NvbnRleHQsIGdldF9rZXkpIHtcbiAgICBjb25zdCBrZXlzID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRfa2V5KGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSkpO1xuICAgICAgICBpZiAoa2V5cy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgaGF2ZSBkdXBsaWNhdGUga2V5cyBpbiBhIGtleWVkIGVhY2hgKTtcbiAgICAgICAgfVxuICAgICAgICBrZXlzLmFkZChrZXkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0X3NwcmVhZF91cGRhdGUobGV2ZWxzLCB1cGRhdGVzKSB7XG4gICAgY29uc3QgdXBkYXRlID0ge307XG4gICAgY29uc3QgdG9fbnVsbF9vdXQgPSB7fTtcbiAgICBjb25zdCBhY2NvdW50ZWRfZm9yID0geyAkJHNjb3BlOiAxIH07XG4gICAgbGV0IGkgPSBsZXZlbHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29uc3QgbyA9IGxldmVsc1tpXTtcbiAgICAgICAgY29uc3QgbiA9IHVwZGF0ZXNbaV07XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIG4pKVxuICAgICAgICAgICAgICAgICAgICB0b19udWxsX291dFtrZXldID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFjY291bnRlZF9mb3Jba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVba2V5XSA9IG5ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudGVkX2ZvcltrZXldID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXZlbHNbaV0gPSBuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbykge1xuICAgICAgICAgICAgICAgIGFjY291bnRlZF9mb3Jba2V5XSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdG9fbnVsbF9vdXQpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIHVwZGF0ZSkpXG4gICAgICAgICAgICB1cGRhdGVba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZTtcbn1cbmZ1bmN0aW9uIGdldF9zcHJlYWRfb2JqZWN0KHNwcmVhZF9wcm9wcykge1xuICAgIHJldHVybiB0eXBlb2Ygc3ByZWFkX3Byb3BzID09PSAnb2JqZWN0JyAmJiBzcHJlYWRfcHJvcHMgIT09IG51bGwgPyBzcHJlYWRfcHJvcHMgOiB7fTtcbn1cblxuLy8gc291cmNlOiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWxcbmNvbnN0IGJvb2xlYW5fYXR0cmlidXRlcyA9IG5ldyBTZXQoW1xuICAgICdhbGxvd2Z1bGxzY3JlZW4nLFxuICAgICdhbGxvd3BheW1lbnRyZXF1ZXN0JyxcbiAgICAnYXN5bmMnLFxuICAgICdhdXRvZm9jdXMnLFxuICAgICdhdXRvcGxheScsXG4gICAgJ2NoZWNrZWQnLFxuICAgICdjb250cm9scycsXG4gICAgJ2RlZmF1bHQnLFxuICAgICdkZWZlcicsXG4gICAgJ2Rpc2FibGVkJyxcbiAgICAnZm9ybW5vdmFsaWRhdGUnLFxuICAgICdoaWRkZW4nLFxuICAgICdpc21hcCcsXG4gICAgJ2xvb3AnLFxuICAgICdtdWx0aXBsZScsXG4gICAgJ211dGVkJyxcbiAgICAnbm9tb2R1bGUnLFxuICAgICdub3ZhbGlkYXRlJyxcbiAgICAnb3BlbicsXG4gICAgJ3BsYXlzaW5saW5lJyxcbiAgICAncmVhZG9ubHknLFxuICAgICdyZXF1aXJlZCcsXG4gICAgJ3JldmVyc2VkJyxcbiAgICAnc2VsZWN0ZWQnXG5dKTtcblxuY29uc3QgaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIgPSAvW1xccydcIj4vPVxcdXtGREQwfS1cXHV7RkRFRn1cXHV7RkZGRX1cXHV7RkZGRn1cXHV7MUZGRkV9XFx1ezFGRkZGfVxcdXsyRkZGRX1cXHV7MkZGRkZ9XFx1ezNGRkZFfVxcdXszRkZGRn1cXHV7NEZGRkV9XFx1ezRGRkZGfVxcdXs1RkZGRX1cXHV7NUZGRkZ9XFx1ezZGRkZFfVxcdXs2RkZGRn1cXHV7N0ZGRkV9XFx1ezdGRkZGfVxcdXs4RkZGRX1cXHV7OEZGRkZ9XFx1ezlGRkZFfVxcdXs5RkZGRn1cXHV7QUZGRkV9XFx1e0FGRkZGfVxcdXtCRkZGRX1cXHV7QkZGRkZ9XFx1e0NGRkZFfVxcdXtDRkZGRn1cXHV7REZGRkV9XFx1e0RGRkZGfVxcdXtFRkZGRX1cXHV7RUZGRkZ9XFx1e0ZGRkZFfVxcdXtGRkZGRn1cXHV7MTBGRkZFfVxcdXsxMEZGRkZ9XS91O1xuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG4vLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jbm9uY2hhcmFjdGVyXG5mdW5jdGlvbiBzcHJlYWQoYXJncywgY2xhc3Nlc190b19hZGQpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbih7fSwgLi4uYXJncyk7XG4gICAgaWYgKGNsYXNzZXNfdG9fYWRkKSB7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzLmNsYXNzID09IG51bGwpIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMuY2xhc3MgPSBjbGFzc2VzX3RvX2FkZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMuY2xhc3MgKz0gJyAnICsgY2xhc3Nlc190b19hZGQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgIGlmIChpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3Rlci50ZXN0KG5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIHN0ciArPSBcIiBcIiArIG5hbWU7XG4gICAgICAgIGVsc2UgaWYgKGJvb2xlYW5fYXR0cmlidXRlcy5oYXMobmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKVxuICAgICAgICAgICAgICAgIHN0ciArPSBcIiBcIiArIG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc3RyICs9IGAgJHtuYW1lfT1cIiR7U3RyaW5nKHZhbHVlKS5yZXBsYWNlKC9cIi9nLCAnJiMzNDsnKS5yZXBsYWNlKC8nL2csICcmIzM5OycpfVwiYDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzdHI7XG59XG5jb25zdCBlc2NhcGVkID0ge1xuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnLFxuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7J1xufTtcbmZ1bmN0aW9uIGVzY2FwZShodG1sKSB7XG4gICAgcmV0dXJuIFN0cmluZyhodG1sKS5yZXBsYWNlKC9bXCInJjw+XS9nLCBtYXRjaCA9PiBlc2NhcGVkW21hdGNoXSk7XG59XG5mdW5jdGlvbiBlYWNoKGl0ZW1zLCBmbikge1xuICAgIGxldCBzdHIgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0ciArPSBmbihpdGVtc1tpXSwgaSk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5jb25zdCBtaXNzaW5nX2NvbXBvbmVudCA9IHtcbiAgICAkJHJlbmRlcjogKCkgPT4gJydcbn07XG5mdW5jdGlvbiB2YWxpZGF0ZV9jb21wb25lbnQoY29tcG9uZW50LCBuYW1lKSB7XG4gICAgaWYgKCFjb21wb25lbnQgfHwgIWNvbXBvbmVudC4kJHJlbmRlcikge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ3N2ZWx0ZTpjb21wb25lbnQnKVxuICAgICAgICAgICAgbmFtZSArPSAnIHRoaXM9ey4uLn0nO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYDwke25hbWV9PiBpcyBub3QgYSB2YWxpZCBTU1IgY29tcG9uZW50LiBZb3UgbWF5IG5lZWQgdG8gcmV2aWV3IHlvdXIgYnVpbGQgY29uZmlnIHRvIGVuc3VyZSB0aGF0IGRlcGVuZGVuY2llcyBhcmUgY29tcGlsZWQsIHJhdGhlciB0aGFuIGltcG9ydGVkIGFzIHByZS1jb21waWxlZCBtb2R1bGVzYCk7XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiBkZWJ1ZyhmaWxlLCBsaW5lLCBjb2x1bW4sIHZhbHVlcykge1xuICAgIGNvbnNvbGUubG9nKGB7QGRlYnVnfSAke2ZpbGUgPyBmaWxlICsgJyAnIDogJyd9KCR7bGluZX06JHtjb2x1bW59KWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyh2YWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICByZXR1cm4gJyc7XG59XG5sZXQgb25fZGVzdHJveTtcbmZ1bmN0aW9uIGNyZWF0ZV9zc3JfY29tcG9uZW50KGZuKSB7XG4gICAgZnVuY3Rpb24gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBleHBvcnRzLmN1cnJlbnRfY29tcG9uZW50O1xuICAgICAgICBjb25zdCAkJCA9IHtcbiAgICAgICAgICAgIG9uX2Rlc3Ryb3ksXG4gICAgICAgICAgICBjb250ZXh0OiBuZXcgTWFwKHBhcmVudF9jb21wb25lbnQgPyBwYXJlbnRfY29tcG9uZW50LiQkLmNvbnRleHQgOiBbXSksXG4gICAgICAgICAgICAvLyB0aGVzZSB3aWxsIGJlIGltbWVkaWF0ZWx5IGRpc2NhcmRlZFxuICAgICAgICAgICAgb25fbW91bnQ6IFtdLFxuICAgICAgICAgICAgYmVmb3JlX3VwZGF0ZTogW10sXG4gICAgICAgICAgICBhZnRlcl91cGRhdGU6IFtdLFxuICAgICAgICAgICAgY2FsbGJhY2tzOiBibGFua19vYmplY3QoKVxuICAgICAgICB9O1xuICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoeyAkJCB9KTtcbiAgICAgICAgY29uc3QgaHRtbCA9IGZuKHJlc3VsdCwgcHJvcHMsIGJpbmRpbmdzLCBzbG90cyk7XG4gICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChwYXJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJlbmRlcjogKHByb3BzID0ge30sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICAgICAgb25fZGVzdHJveSA9IFtdO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geyB0aXRsZTogJycsIGhlYWQ6ICcnLCBjc3M6IG5ldyBTZXQoKSB9O1xuICAgICAgICAgICAgY29uc3QgaHRtbCA9ICQkcmVuZGVyKHJlc3VsdCwgcHJvcHMsIHt9LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJ1bl9hbGwob25fZGVzdHJveSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGh0bWwsXG4gICAgICAgICAgICAgICAgY3NzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IEFycmF5LmZyb20ocmVzdWx0LmNzcykubWFwKGNzcyA9PiBjc3MuY29kZSkuam9pbignXFxuJyksXG4gICAgICAgICAgICAgICAgICAgIG1hcDogbnVsbCAvLyBUT0RPXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoZWFkOiByZXN1bHQudGl0bGUgKyByZXN1bHQuaGVhZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgJCRyZW5kZXJcbiAgICB9O1xufVxuZnVuY3Rpb24gYWRkX2F0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgYm9vbGVhbikge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IChib29sZWFuICYmICF2YWx1ZSkpXG4gICAgICAgIHJldHVybiAnJztcbiAgICByZXR1cm4gYCAke25hbWV9JHt2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogYD0ke3R5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBKU09OLnN0cmluZ2lmeShlc2NhcGUodmFsdWUpKSA6IGBcIiR7dmFsdWV9XCJgfWB9YDtcbn1cbmZ1bmN0aW9uIGFkZF9jbGFzc2VzKGNsYXNzZXMpIHtcbiAgICByZXR1cm4gY2xhc3NlcyA/IGAgY2xhc3M9XCIke2NsYXNzZXN9XCJgIDogYGA7XG59XG5cbmZ1bmN0aW9uIGJpbmQoY29tcG9uZW50LCBuYW1lLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGluZGV4ID0gY29tcG9uZW50LiQkLnByb3BzW25hbWVdO1xuICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbXBvbmVudC4kJC5ib3VuZFtpbmRleF0gPSBjYWxsYmFjaztcbiAgICAgICAgY2FsbGJhY2soY29tcG9uZW50LiQkLmN0eFtpbmRleF0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZV9jb21wb25lbnQoYmxvY2spIHtcbiAgICBibG9jayAmJiBibG9jay5jKCk7XG59XG5mdW5jdGlvbiBjbGFpbV9jb21wb25lbnQoYmxvY2ssIHBhcmVudF9ub2Rlcykge1xuICAgIGJsb2NrICYmIGJsb2NrLmwocGFyZW50X25vZGVzKTtcbn1cbmZ1bmN0aW9uIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIHRhcmdldCwgYW5jaG9yKSB7XG4gICAgY29uc3QgeyBmcmFnbWVudCwgb25fbW91bnQsIG9uX2Rlc3Ryb3ksIGFmdGVyX3VwZGF0ZSB9ID0gY29tcG9uZW50LiQkO1xuICAgIGZyYWdtZW50ICYmIGZyYWdtZW50Lm0odGFyZ2V0LCBhbmNob3IpO1xuICAgIC8vIG9uTW91bnQgaGFwcGVucyBiZWZvcmUgdGhlIGluaXRpYWwgYWZ0ZXJVcGRhdGVcbiAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgY29uc3QgbmV3X29uX2Rlc3Ryb3kgPSBvbl9tb3VudC5tYXAocnVuKS5maWx0ZXIoaXNfZnVuY3Rpb24pO1xuICAgICAgICBpZiAob25fZGVzdHJveSkge1xuICAgICAgICAgICAgb25fZGVzdHJveS5wdXNoKC4uLm5ld19vbl9kZXN0cm95KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEVkZ2UgY2FzZSAtIGNvbXBvbmVudCB3YXMgZGVzdHJveWVkIGltbWVkaWF0ZWx5LFxuICAgICAgICAgICAgLy8gbW9zdCBsaWtlbHkgYXMgYSByZXN1bHQgb2YgYSBiaW5kaW5nIGluaXRpYWxpc2luZ1xuICAgICAgICAgICAgcnVuX2FsbChuZXdfb25fZGVzdHJveSk7XG4gICAgICAgIH1cbiAgICAgICAgY29tcG9uZW50LiQkLm9uX21vdW50ID0gW107XG4gICAgfSk7XG4gICAgYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG59XG5mdW5jdGlvbiBkZXN0cm95X2NvbXBvbmVudChjb21wb25lbnQsIGRldGFjaGluZykge1xuICAgIGNvbnN0ICQkID0gY29tcG9uZW50LiQkO1xuICAgIGlmICgkJC5mcmFnbWVudCAhPT0gbnVsbCkge1xuICAgICAgICBydW5fYWxsKCQkLm9uX2Rlc3Ryb3kpO1xuICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5kKGRldGFjaGluZyk7XG4gICAgICAgIC8vIFRPRE8gbnVsbCBvdXQgb3RoZXIgcmVmcywgaW5jbHVkaW5nIGNvbXBvbmVudC4kJCAoYnV0IG5lZWQgdG9cbiAgICAgICAgLy8gcHJlc2VydmUgZmluYWwgc3RhdGU/KVxuICAgICAgICAkJC5vbl9kZXN0cm95ID0gJCQuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgICAkJC5jdHggPSBbXTtcbiAgICB9XG59XG5mdW5jdGlvbiBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSkge1xuICAgIGlmIChjb21wb25lbnQuJCQuZGlydHlbMF0gPT09IC0xKSB7XG4gICAgICAgIGRpcnR5X2NvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgICAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICAgICAgY29tcG9uZW50LiQkLmRpcnR5LmZpbGwoMCk7XG4gICAgfVxuICAgIGNvbXBvbmVudC4kJC5kaXJ0eVsoaSAvIDMxKSB8IDBdIHw9ICgxIDw8IChpICUgMzEpKTtcbn1cbmZ1bmN0aW9uIGluaXQoY29tcG9uZW50LCBvcHRpb25zLCBpbnN0YW5jZSwgY3JlYXRlX2ZyYWdtZW50LCBub3RfZXF1YWwsIHByb3BzLCBkaXJ0eSA9IFstMV0pIHtcbiAgICBjb25zdCBwYXJlbnRfY29tcG9uZW50ID0gZXhwb3J0cy5jdXJyZW50X2NvbXBvbmVudDtcbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KTtcbiAgICBjb25zdCBwcm9wX3ZhbHVlcyA9IG9wdGlvbnMucHJvcHMgfHwge307XG4gICAgY29uc3QgJCQgPSBjb21wb25lbnQuJCQgPSB7XG4gICAgICAgIGZyYWdtZW50OiBudWxsLFxuICAgICAgICBjdHg6IG51bGwsXG4gICAgICAgIC8vIHN0YXRlXG4gICAgICAgIHByb3BzLFxuICAgICAgICB1cGRhdGU6IG5vb3AsXG4gICAgICAgIG5vdF9lcXVhbCxcbiAgICAgICAgYm91bmQ6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICAvLyBsaWZlY3ljbGVcbiAgICAgICAgb25fbW91bnQ6IFtdLFxuICAgICAgICBvbl9kZXN0cm95OiBbXSxcbiAgICAgICAgYmVmb3JlX3VwZGF0ZTogW10sXG4gICAgICAgIGFmdGVyX3VwZGF0ZTogW10sXG4gICAgICAgIGNvbnRleHQ6IG5ldyBNYXAocGFyZW50X2NvbXBvbmVudCA/IHBhcmVudF9jb21wb25lbnQuJCQuY29udGV4dCA6IFtdKSxcbiAgICAgICAgLy8gZXZlcnl0aGluZyBlbHNlXG4gICAgICAgIGNhbGxiYWNrczogYmxhbmtfb2JqZWN0KCksXG4gICAgICAgIGRpcnR5LFxuICAgICAgICBza2lwX2JvdW5kOiBmYWxzZVxuICAgIH07XG4gICAgbGV0IHJlYWR5ID0gZmFsc2U7XG4gICAgJCQuY3R4ID0gaW5zdGFuY2VcbiAgICAgICAgPyBpbnN0YW5jZShjb21wb25lbnQsIHByb3BfdmFsdWVzLCAoaSwgcmV0LCAuLi5yZXN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJlc3QubGVuZ3RoID8gcmVzdFswXSA6IHJldDtcbiAgICAgICAgICAgIGlmICgkJC5jdHggJiYgbm90X2VxdWFsKCQkLmN0eFtpXSwgJCQuY3R4W2ldID0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEkJC5za2lwX2JvdW5kICYmICQkLmJvdW5kW2ldKVxuICAgICAgICAgICAgICAgICAgICAkJC5ib3VuZFtpXSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlYWR5KVxuICAgICAgICAgICAgICAgICAgICBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9KVxuICAgICAgICA6IFtdO1xuICAgICQkLnVwZGF0ZSgpO1xuICAgIHJlYWR5ID0gdHJ1ZTtcbiAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgIC8vIGBmYWxzZWAgYXMgYSBzcGVjaWFsIGNhc2Ugb2Ygbm8gRE9NIGNvbXBvbmVudFxuICAgICQkLmZyYWdtZW50ID0gY3JlYXRlX2ZyYWdtZW50ID8gY3JlYXRlX2ZyYWdtZW50KCQkLmN0eCkgOiBmYWxzZTtcbiAgICBpZiAob3B0aW9ucy50YXJnZXQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaHlkcmF0ZSkge1xuICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSBjaGlsZHJlbihvcHRpb25zLnRhcmdldCk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQubChub2Rlcyk7XG4gICAgICAgICAgICBub2Rlcy5mb3JFYWNoKGRldGFjaCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQuYygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmludHJvKVxuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihjb21wb25lbnQuJCQuZnJhZ21lbnQpO1xuICAgICAgICBtb3VudF9jb21wb25lbnQoY29tcG9uZW50LCBvcHRpb25zLnRhcmdldCwgb3B0aW9ucy5hbmNob3IpO1xuICAgICAgICBmbHVzaCgpO1xuICAgIH1cbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG59XG5pZiAodHlwZW9mIEhUTUxFbGVtZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXhwb3J0cy5TdmVsdGVFbGVtZW50ID0gY2xhc3MgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuJCQuc2xvdHRlZCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLiQkLnNsb3R0ZWRba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHIsIF9vbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXNbYXR0cl0gPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICAgICAgdGhpcy4kZGVzdHJveSA9IG5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBUT0RPIHNob3VsZCB0aGlzIGRlbGVnYXRlIHRvIGFkZEV2ZW50TGlzdGVuZXI/XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja3MgPSAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gfHwgKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdID0gW10pKTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgICRzZXQoJCRwcm9wcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuJCRzZXQgJiYgIWlzX2VtcHR5KCQkcHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkc2V0KCQkcHJvcHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICB9XG4gICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgICRzZXQoJCRwcm9wcykge1xuICAgICAgICBpZiAodGhpcy4kJHNldCAmJiAhaXNfZW1wdHkoJCRwcm9wcykpIHtcbiAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiQkc2V0KCQkcHJvcHMpO1xuICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoX2Rldih0eXBlLCBkZXRhaWwpIHtcbiAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudCh0eXBlLCBPYmplY3QuYXNzaWduKHsgdmVyc2lvbjogJzMuMjQuMScgfSwgZGV0YWlsKSkpO1xufVxuZnVuY3Rpb24gYXBwZW5kX2Rldih0YXJnZXQsIG5vZGUpIHtcbiAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01JbnNlcnRcIiwgeyB0YXJnZXQsIG5vZGUgfSk7XG4gICAgYXBwZW5kKHRhcmdldCwgbm9kZSk7XG59XG5mdW5jdGlvbiBpbnNlcnRfZGV2KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NSW5zZXJ0XCIsIHsgdGFyZ2V0LCBub2RlLCBhbmNob3IgfSk7XG4gICAgaW5zZXJ0KHRhcmdldCwgbm9kZSwgYW5jaG9yKTtcbn1cbmZ1bmN0aW9uIGRldGFjaF9kZXYobm9kZSkge1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVJlbW92ZVwiLCB7IG5vZGUgfSk7XG4gICAgZGV0YWNoKG5vZGUpO1xufVxuZnVuY3Rpb24gZGV0YWNoX2JldHdlZW5fZGV2KGJlZm9yZSwgYWZ0ZXIpIHtcbiAgICB3aGlsZSAoYmVmb3JlLm5leHRTaWJsaW5nICYmIGJlZm9yZS5uZXh0U2libGluZyAhPT0gYWZ0ZXIpIHtcbiAgICAgICAgZGV0YWNoX2RldihiZWZvcmUubmV4dFNpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGFjaF9iZWZvcmVfZGV2KGFmdGVyKSB7XG4gICAgd2hpbGUgKGFmdGVyLnByZXZpb3VzU2libGluZykge1xuICAgICAgICBkZXRhY2hfZGV2KGFmdGVyLnByZXZpb3VzU2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoX2FmdGVyX2RldihiZWZvcmUpIHtcbiAgICB3aGlsZSAoYmVmb3JlLm5leHRTaWJsaW5nKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYmVmb3JlLm5leHRTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBsaXN0ZW5fZGV2KG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zLCBoYXNfcHJldmVudF9kZWZhdWx0LCBoYXNfc3RvcF9wcm9wYWdhdGlvbikge1xuICAgIGNvbnN0IG1vZGlmaWVycyA9IG9wdGlvbnMgPT09IHRydWUgPyBbXCJjYXB0dXJlXCJdIDogb3B0aW9ucyA/IEFycmF5LmZyb20oT2JqZWN0LmtleXMob3B0aW9ucykpIDogW107XG4gICAgaWYgKGhhc19wcmV2ZW50X2RlZmF1bHQpXG4gICAgICAgIG1vZGlmaWVycy5wdXNoKCdwcmV2ZW50RGVmYXVsdCcpO1xuICAgIGlmIChoYXNfc3RvcF9wcm9wYWdhdGlvbilcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3N0b3BQcm9wYWdhdGlvbicpO1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTUFkZEV2ZW50TGlzdGVuZXJcIiwgeyBub2RlLCBldmVudCwgaGFuZGxlciwgbW9kaWZpZXJzIH0pO1xuICAgIGNvbnN0IGRpc3Bvc2UgPSBsaXN0ZW4obm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVJlbW92ZUV2ZW50TGlzdGVuZXJcIiwgeyBub2RlLCBldmVudCwgaGFuZGxlciwgbW9kaWZpZXJzIH0pO1xuICAgICAgICBkaXNwb3NlKCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGF0dHJfZGV2KG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBhdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKVxuICAgICAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01SZW1vdmVBdHRyaWJ1dGVcIiwgeyBub2RlLCBhdHRyaWJ1dGUgfSk7XG4gICAgZWxzZVxuICAgICAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01TZXRBdHRyaWJ1dGVcIiwgeyBub2RlLCBhdHRyaWJ1dGUsIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gcHJvcF9kZXYobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgbm9kZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01TZXRQcm9wZXJ0eVwiLCB7IG5vZGUsIHByb3BlcnR5LCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIGRhdGFzZXRfZGV2KG5vZGUsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIG5vZGUuZGF0YXNldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01TZXREYXRhc2V0XCIsIHsgbm9kZSwgcHJvcGVydHksIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gc2V0X2RhdGFfZGV2KHRleHQsIGRhdGEpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICAgIGlmICh0ZXh0Lndob2xlVGV4dCA9PT0gZGF0YSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVNldERhdGFcIiwgeyBub2RlOiB0ZXh0LCBkYXRhIH0pO1xuICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9lYWNoX2FyZ3VtZW50KGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnc3RyaW5nJyAmJiAhKGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBhcmcpKSB7XG4gICAgICAgIGxldCBtc2cgPSAneyNlYWNofSBvbmx5IGl0ZXJhdGVzIG92ZXIgYXJyYXktbGlrZSBvYmplY3RzLic7XG4gICAgICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIGFyZyAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gYXJnKSB7XG4gICAgICAgICAgICBtc2cgKz0gJyBZb3UgY2FuIHVzZSBhIHNwcmVhZCB0byBjb252ZXJ0IHRoaXMgaXRlcmFibGUgaW50byBhbiBhcnJheS4nO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3Nsb3RzKG5hbWUsIHNsb3QsIGtleXMpIHtcbiAgICBmb3IgKGNvbnN0IHNsb3Rfa2V5IG9mIE9iamVjdC5rZXlzKHNsb3QpKSB7XG4gICAgICAgIGlmICghfmtleXMuaW5kZXhPZihzbG90X2tleSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgPCR7bmFtZX0+IHJlY2VpdmVkIGFuIHVuZXhwZWN0ZWQgc2xvdCBcIiR7c2xvdF9rZXl9XCIuYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5jbGFzcyBTdmVsdGVDb21wb25lbnREZXYgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICghb3B0aW9ucy50YXJnZXQgJiYgIW9wdGlvbnMuJCRpbmxpbmUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCd0YXJnZXQnIGlzIGEgcmVxdWlyZWQgb3B0aW9uYCk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLiRkZXN0cm95KCk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYENvbXBvbmVudCB3YXMgYWxyZWFkeSBkZXN0cm95ZWRgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIH07XG4gICAgfVxuICAgICRjYXB0dXJlX3N0YXRlKCkgeyB9XG4gICAgJGluamVjdF9zdGF0ZSgpIHsgfVxufVxuZnVuY3Rpb24gbG9vcF9ndWFyZCh0aW1lb3V0KSB7XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gc3RhcnQgPiB0aW1lb3V0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluZmluaXRlIGxvb3AgZGV0ZWN0ZWRgKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydHMuSHRtbFRhZyA9IEh0bWxUYWc7XG5leHBvcnRzLlN2ZWx0ZUNvbXBvbmVudCA9IFN2ZWx0ZUNvbXBvbmVudDtcbmV4cG9ydHMuU3ZlbHRlQ29tcG9uZW50RGV2ID0gU3ZlbHRlQ29tcG9uZW50RGV2O1xuZXhwb3J0cy5hY3Rpb25fZGVzdHJveWVyID0gYWN0aW9uX2Rlc3Ryb3llcjtcbmV4cG9ydHMuYWRkX2F0dHJpYnV0ZSA9IGFkZF9hdHRyaWJ1dGU7XG5leHBvcnRzLmFkZF9jbGFzc2VzID0gYWRkX2NsYXNzZXM7XG5leHBvcnRzLmFkZF9mbHVzaF9jYWxsYmFjayA9IGFkZF9mbHVzaF9jYWxsYmFjaztcbmV4cG9ydHMuYWRkX2xvY2F0aW9uID0gYWRkX2xvY2F0aW9uO1xuZXhwb3J0cy5hZGRfcmVuZGVyX2NhbGxiYWNrID0gYWRkX3JlbmRlcl9jYWxsYmFjaztcbmV4cG9ydHMuYWRkX3Jlc2l6ZV9saXN0ZW5lciA9IGFkZF9yZXNpemVfbGlzdGVuZXI7XG5leHBvcnRzLmFkZF90cmFuc2Zvcm0gPSBhZGRfdHJhbnNmb3JtO1xuZXhwb3J0cy5hZnRlclVwZGF0ZSA9IGFmdGVyVXBkYXRlO1xuZXhwb3J0cy5hcHBlbmQgPSBhcHBlbmQ7XG5leHBvcnRzLmFwcGVuZF9kZXYgPSBhcHBlbmRfZGV2O1xuZXhwb3J0cy5hc3NpZ24gPSBhc3NpZ247XG5leHBvcnRzLmF0dHIgPSBhdHRyO1xuZXhwb3J0cy5hdHRyX2RldiA9IGF0dHJfZGV2O1xuZXhwb3J0cy5iZWZvcmVVcGRhdGUgPSBiZWZvcmVVcGRhdGU7XG5leHBvcnRzLmJpbmQgPSBiaW5kO1xuZXhwb3J0cy5iaW5kaW5nX2NhbGxiYWNrcyA9IGJpbmRpbmdfY2FsbGJhY2tzO1xuZXhwb3J0cy5ibGFua19vYmplY3QgPSBibGFua19vYmplY3Q7XG5leHBvcnRzLmJ1YmJsZSA9IGJ1YmJsZTtcbmV4cG9ydHMuY2hlY2tfb3V0cm9zID0gY2hlY2tfb3V0cm9zO1xuZXhwb3J0cy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuZXhwb3J0cy5jbGFpbV9jb21wb25lbnQgPSBjbGFpbV9jb21wb25lbnQ7XG5leHBvcnRzLmNsYWltX2VsZW1lbnQgPSBjbGFpbV9lbGVtZW50O1xuZXhwb3J0cy5jbGFpbV9zcGFjZSA9IGNsYWltX3NwYWNlO1xuZXhwb3J0cy5jbGFpbV90ZXh0ID0gY2xhaW1fdGV4dDtcbmV4cG9ydHMuY2xlYXJfbG9vcHMgPSBjbGVhcl9sb29wcztcbmV4cG9ydHMuY29tcG9uZW50X3N1YnNjcmliZSA9IGNvbXBvbmVudF9zdWJzY3JpYmU7XG5leHBvcnRzLmNvbXB1dGVfcmVzdF9wcm9wcyA9IGNvbXB1dGVfcmVzdF9wcm9wcztcbmV4cG9ydHMuY3JlYXRlRXZlbnREaXNwYXRjaGVyID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyO1xuZXhwb3J0cy5jcmVhdGVfYW5pbWF0aW9uID0gY3JlYXRlX2FuaW1hdGlvbjtcbmV4cG9ydHMuY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbiA9IGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb247XG5leHBvcnRzLmNyZWF0ZV9jb21wb25lbnQgPSBjcmVhdGVfY29tcG9uZW50O1xuZXhwb3J0cy5jcmVhdGVfaW5fdHJhbnNpdGlvbiA9IGNyZWF0ZV9pbl90cmFuc2l0aW9uO1xuZXhwb3J0cy5jcmVhdGVfb3V0X3RyYW5zaXRpb24gPSBjcmVhdGVfb3V0X3RyYW5zaXRpb247XG5leHBvcnRzLmNyZWF0ZV9zbG90ID0gY3JlYXRlX3Nsb3Q7XG5leHBvcnRzLmNyZWF0ZV9zc3JfY29tcG9uZW50ID0gY3JlYXRlX3Nzcl9jb21wb25lbnQ7XG5leHBvcnRzLmN1c3RvbV9ldmVudCA9IGN1c3RvbV9ldmVudDtcbmV4cG9ydHMuZGF0YXNldF9kZXYgPSBkYXRhc2V0X2RldjtcbmV4cG9ydHMuZGVidWcgPSBkZWJ1ZztcbmV4cG9ydHMuZGVzdHJveV9ibG9jayA9IGRlc3Ryb3lfYmxvY2s7XG5leHBvcnRzLmRlc3Ryb3lfY29tcG9uZW50ID0gZGVzdHJveV9jb21wb25lbnQ7XG5leHBvcnRzLmRlc3Ryb3lfZWFjaCA9IGRlc3Ryb3lfZWFjaDtcbmV4cG9ydHMuZGV0YWNoID0gZGV0YWNoO1xuZXhwb3J0cy5kZXRhY2hfYWZ0ZXJfZGV2ID0gZGV0YWNoX2FmdGVyX2RldjtcbmV4cG9ydHMuZGV0YWNoX2JlZm9yZV9kZXYgPSBkZXRhY2hfYmVmb3JlX2RldjtcbmV4cG9ydHMuZGV0YWNoX2JldHdlZW5fZGV2ID0gZGV0YWNoX2JldHdlZW5fZGV2O1xuZXhwb3J0cy5kZXRhY2hfZGV2ID0gZGV0YWNoX2RldjtcbmV4cG9ydHMuZGlydHlfY29tcG9uZW50cyA9IGRpcnR5X2NvbXBvbmVudHM7XG5leHBvcnRzLmRpc3BhdGNoX2RldiA9IGRpc3BhdGNoX2RldjtcbmV4cG9ydHMuZWFjaCA9IGVhY2g7XG5leHBvcnRzLmVsZW1lbnQgPSBlbGVtZW50O1xuZXhwb3J0cy5lbGVtZW50X2lzID0gZWxlbWVudF9pcztcbmV4cG9ydHMuZW1wdHkgPSBlbXB0eTtcbmV4cG9ydHMuZXNjYXBlID0gZXNjYXBlO1xuZXhwb3J0cy5lc2NhcGVkID0gZXNjYXBlZDtcbmV4cG9ydHMuZXhjbHVkZV9pbnRlcm5hbF9wcm9wcyA9IGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHM7XG5leHBvcnRzLmZpeF9hbmRfZGVzdHJveV9ibG9jayA9IGZpeF9hbmRfZGVzdHJveV9ibG9jaztcbmV4cG9ydHMuZml4X2FuZF9vdXRyb19hbmRfZGVzdHJveV9ibG9jayA9IGZpeF9hbmRfb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2s7XG5leHBvcnRzLmZpeF9wb3NpdGlvbiA9IGZpeF9wb3NpdGlvbjtcbmV4cG9ydHMuZmx1c2ggPSBmbHVzaDtcbmV4cG9ydHMuZ2V0Q29udGV4dCA9IGdldENvbnRleHQ7XG5leHBvcnRzLmdldF9iaW5kaW5nX2dyb3VwX3ZhbHVlID0gZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWU7XG5leHBvcnRzLmdldF9jdXJyZW50X2NvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudDtcbmV4cG9ydHMuZ2V0X3Nsb3RfY2hhbmdlcyA9IGdldF9zbG90X2NoYW5nZXM7XG5leHBvcnRzLmdldF9zbG90X2NvbnRleHQgPSBnZXRfc2xvdF9jb250ZXh0O1xuZXhwb3J0cy5nZXRfc3ByZWFkX29iamVjdCA9IGdldF9zcHJlYWRfb2JqZWN0O1xuZXhwb3J0cy5nZXRfc3ByZWFkX3VwZGF0ZSA9IGdldF9zcHJlYWRfdXBkYXRlO1xuZXhwb3J0cy5nZXRfc3RvcmVfdmFsdWUgPSBnZXRfc3RvcmVfdmFsdWU7XG5leHBvcnRzLmdsb2JhbHMgPSBnbG9iYWxzO1xuZXhwb3J0cy5ncm91cF9vdXRyb3MgPSBncm91cF9vdXRyb3M7XG5leHBvcnRzLmhhbmRsZV9wcm9taXNlID0gaGFuZGxlX3Byb21pc2U7XG5leHBvcnRzLmhhc19wcm9wID0gaGFzX3Byb3A7XG5leHBvcnRzLmlkZW50aXR5ID0gaWRlbnRpdHk7XG5leHBvcnRzLmluaXQgPSBpbml0O1xuZXhwb3J0cy5pbnNlcnQgPSBpbnNlcnQ7XG5leHBvcnRzLmluc2VydF9kZXYgPSBpbnNlcnRfZGV2O1xuZXhwb3J0cy5pbnRyb3MgPSBpbnRyb3M7XG5leHBvcnRzLmludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyID0gaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXI7XG5leHBvcnRzLmlzX2NsaWVudCA9IGlzX2NsaWVudDtcbmV4cG9ydHMuaXNfY3Jvc3NvcmlnaW4gPSBpc19jcm9zc29yaWdpbjtcbmV4cG9ydHMuaXNfZW1wdHkgPSBpc19lbXB0eTtcbmV4cG9ydHMuaXNfZnVuY3Rpb24gPSBpc19mdW5jdGlvbjtcbmV4cG9ydHMuaXNfcHJvbWlzZSA9IGlzX3Byb21pc2U7XG5leHBvcnRzLmxpc3RlbiA9IGxpc3RlbjtcbmV4cG9ydHMubGlzdGVuX2RldiA9IGxpc3Rlbl9kZXY7XG5leHBvcnRzLmxvb3AgPSBsb29wO1xuZXhwb3J0cy5sb29wX2d1YXJkID0gbG9vcF9ndWFyZDtcbmV4cG9ydHMubWlzc2luZ19jb21wb25lbnQgPSBtaXNzaW5nX2NvbXBvbmVudDtcbmV4cG9ydHMubW91bnRfY29tcG9uZW50ID0gbW91bnRfY29tcG9uZW50O1xuZXhwb3J0cy5ub29wID0gbm9vcDtcbmV4cG9ydHMubm90X2VxdWFsID0gbm90X2VxdWFsO1xuZXhwb3J0cy5udWxsX3RvX2VtcHR5ID0gbnVsbF90b19lbXB0eTtcbmV4cG9ydHMub2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcyA9IG9iamVjdF93aXRob3V0X3Byb3BlcnRpZXM7XG5leHBvcnRzLm9uRGVzdHJveSA9IG9uRGVzdHJveTtcbmV4cG9ydHMub25Nb3VudCA9IG9uTW91bnQ7XG5leHBvcnRzLm9uY2UgPSBvbmNlO1xuZXhwb3J0cy5vdXRyb19hbmRfZGVzdHJveV9ibG9jayA9IG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrO1xuZXhwb3J0cy5wcmV2ZW50X2RlZmF1bHQgPSBwcmV2ZW50X2RlZmF1bHQ7XG5leHBvcnRzLnByb3BfZGV2ID0gcHJvcF9kZXY7XG5leHBvcnRzLnF1ZXJ5X3NlbGVjdG9yX2FsbCA9IHF1ZXJ5X3NlbGVjdG9yX2FsbDtcbmV4cG9ydHMucnVuID0gcnVuO1xuZXhwb3J0cy5ydW5fYWxsID0gcnVuX2FsbDtcbmV4cG9ydHMuc2FmZV9ub3RfZXF1YWwgPSBzYWZlX25vdF9lcXVhbDtcbmV4cG9ydHMuc2NoZWR1bGVfdXBkYXRlID0gc2NoZWR1bGVfdXBkYXRlO1xuZXhwb3J0cy5zZWxlY3RfbXVsdGlwbGVfdmFsdWUgPSBzZWxlY3RfbXVsdGlwbGVfdmFsdWU7XG5leHBvcnRzLnNlbGVjdF9vcHRpb24gPSBzZWxlY3Rfb3B0aW9uO1xuZXhwb3J0cy5zZWxlY3Rfb3B0aW9ucyA9IHNlbGVjdF9vcHRpb25zO1xuZXhwb3J0cy5zZWxlY3RfdmFsdWUgPSBzZWxlY3RfdmFsdWU7XG5leHBvcnRzLnNlbGYgPSBzZWxmO1xuZXhwb3J0cy5zZXRDb250ZXh0ID0gc2V0Q29udGV4dDtcbmV4cG9ydHMuc2V0X2F0dHJpYnV0ZXMgPSBzZXRfYXR0cmlidXRlcztcbmV4cG9ydHMuc2V0X2N1cnJlbnRfY29tcG9uZW50ID0gc2V0X2N1cnJlbnRfY29tcG9uZW50O1xuZXhwb3J0cy5zZXRfY3VzdG9tX2VsZW1lbnRfZGF0YSA9IHNldF9jdXN0b21fZWxlbWVudF9kYXRhO1xuZXhwb3J0cy5zZXRfZGF0YSA9IHNldF9kYXRhO1xuZXhwb3J0cy5zZXRfZGF0YV9kZXYgPSBzZXRfZGF0YV9kZXY7XG5leHBvcnRzLnNldF9pbnB1dF90eXBlID0gc2V0X2lucHV0X3R5cGU7XG5leHBvcnRzLnNldF9pbnB1dF92YWx1ZSA9IHNldF9pbnB1dF92YWx1ZTtcbmV4cG9ydHMuc2V0X25vdyA9IHNldF9ub3c7XG5leHBvcnRzLnNldF9yYWYgPSBzZXRfcmFmO1xuZXhwb3J0cy5zZXRfc3RvcmVfdmFsdWUgPSBzZXRfc3RvcmVfdmFsdWU7XG5leHBvcnRzLnNldF9zdHlsZSA9IHNldF9zdHlsZTtcbmV4cG9ydHMuc2V0X3N2Z19hdHRyaWJ1dGVzID0gc2V0X3N2Z19hdHRyaWJ1dGVzO1xuZXhwb3J0cy5zcGFjZSA9IHNwYWNlO1xuZXhwb3J0cy5zcHJlYWQgPSBzcHJlYWQ7XG5leHBvcnRzLnN0b3BfcHJvcGFnYXRpb24gPSBzdG9wX3Byb3BhZ2F0aW9uO1xuZXhwb3J0cy5zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG5leHBvcnRzLnN2Z19lbGVtZW50ID0gc3ZnX2VsZW1lbnQ7XG5leHBvcnRzLnRleHQgPSB0ZXh0O1xuZXhwb3J0cy50aWNrID0gdGljaztcbmV4cG9ydHMudGltZV9yYW5nZXNfdG9fYXJyYXkgPSB0aW1lX3Jhbmdlc190b19hcnJheTtcbmV4cG9ydHMudG9fbnVtYmVyID0gdG9fbnVtYmVyO1xuZXhwb3J0cy50b2dnbGVfY2xhc3MgPSB0b2dnbGVfY2xhc3M7XG5leHBvcnRzLnRyYW5zaXRpb25faW4gPSB0cmFuc2l0aW9uX2luO1xuZXhwb3J0cy50cmFuc2l0aW9uX291dCA9IHRyYW5zaXRpb25fb3V0O1xuZXhwb3J0cy51cGRhdGVfa2V5ZWRfZWFjaCA9IHVwZGF0ZV9rZXllZF9lYWNoO1xuZXhwb3J0cy51cGRhdGVfc2xvdCA9IHVwZGF0ZV9zbG90O1xuZXhwb3J0cy52YWxpZGF0ZV9jb21wb25lbnQgPSB2YWxpZGF0ZV9jb21wb25lbnQ7XG5leHBvcnRzLnZhbGlkYXRlX2VhY2hfYXJndW1lbnQgPSB2YWxpZGF0ZV9lYWNoX2FyZ3VtZW50O1xuZXhwb3J0cy52YWxpZGF0ZV9lYWNoX2tleXMgPSB2YWxpZGF0ZV9lYWNoX2tleXM7XG5leHBvcnRzLnZhbGlkYXRlX3Nsb3RzID0gdmFsaWRhdGVfc2xvdHM7XG5leHBvcnRzLnZhbGlkYXRlX3N0b3JlID0gdmFsaWRhdGVfc3RvcmU7XG5leHBvcnRzLnhsaW5rX2F0dHIgPSB4bGlua19hdHRyO1xuIiwidmFyIF8kc3ZlbHRlXzIgPSB7fTtcblwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShfJHN2ZWx0ZV8yLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pOy8qIHJlbW92ZWQ6IHZhciBfJGludGVybmFsXzM9cmVxdWlyZShcIi4vaW50ZXJuYWxcIik7ICovO09iamVjdC5kZWZpbmVQcm9wZXJ0eShfJHN2ZWx0ZV8yLFwiU3ZlbHRlQ29tcG9uZW50XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIF8kaW50ZXJuYWxfMy5TdmVsdGVDb21wb25lbnREZXZ9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KF8kc3ZlbHRlXzIsXCJhZnRlclVwZGF0ZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfJGludGVybmFsXzMuYWZ0ZXJVcGRhdGV9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KF8kc3ZlbHRlXzIsXCJiZWZvcmVVcGRhdGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gXyRpbnRlcm5hbF8zLmJlZm9yZVVwZGF0ZX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoXyRzdmVsdGVfMixcImNyZWF0ZUV2ZW50RGlzcGF0Y2hlclwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfJGludGVybmFsXzMuY3JlYXRlRXZlbnREaXNwYXRjaGVyfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfJHN2ZWx0ZV8yLFwiZ2V0Q29udGV4dFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfJGludGVybmFsXzMuZ2V0Q29udGV4dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoXyRzdmVsdGVfMixcIm9uRGVzdHJveVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfJGludGVybmFsXzMub25EZXN0cm95fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfJHN2ZWx0ZV8yLFwib25Nb3VudFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfJGludGVybmFsXzMub25Nb3VudH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoXyRzdmVsdGVfMixcInNldENvbnRleHRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gXyRpbnRlcm5hbF8zLnNldENvbnRleHR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KF8kc3ZlbHRlXzIsXCJ0aWNrXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIF8kaW50ZXJuYWxfMy50aWNrfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiSWs5aWFtVmpkQ0lzSW1SbFptbHVaVkJ5YjNCbGNuUjVJaXdpWlhod2IzSjBjeUlzSW5aaGJIVmxJaXdpWlc1MWJXVnlZV0pzWlNJc0ltZGxkQ0lzSW1sdWRHVnlibUZzSWl3aVUzWmxiSFJsUTI5dGNHOXVaVzUwUkdWMklpd2lZV1owWlhKVmNHUmhkR1VpTENKaVpXWnZjbVZWY0dSaGRHVWlMQ0pqY21WaGRHVkZkbVZ1ZEVScGMzQmhkR05vWlhJaUxDSm5aWFJEYjI1MFpYaDBJaXdpYjI1RVpYTjBjbTk1SWl3aWIyNU5iM1Z1ZENJc0luTmxkRU52Ym5SbGVIUWlMQ0owYVdOcklsMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRXNXVUZCUVN4RFFVVkJRU3hOUVVGQlFTeERRVUZQUXl4alFVRkJRU3hEUVVGbFF5eFZRVUZCUVN4RFFVRlRMRmxCUVVFc1EwRkJZeXhEUVVGRlF5eExRVUZCUVN4RFFVRkJRU3hEUVVGUExFTkJRVUVzUTBGQlFTeERRVUZCTEVOQlJYUkVMSFZFUVVsQlNDeE5RVUZCUVN4RFFVRlBReXhqUVVGQlFTeERRVUZsUXl4VlFVRkJRU3hEUVVGVExHbENRVUZCTEVOQlFXMUNMRU5CUTJwRVJTeFZRVUZCUVN4RFFVRkJRU3hEUVVGWkxFTkJRVUVzUTBGRFdrTXNSMEZCUVVFc1EwRkJTeXhWUVVGQkxFTkJRMG9zVDBGQlQwTXNXVUZCUVVFc1EwRkJVME1zYTBKQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUjJ4Q1VDeE5RVUZCUVN4RFFVRlBReXhqUVVGQlFTeERRVUZsUXl4VlFVRkJRU3hEUVVGVExHRkJRVUVzUTBGQlpTeERRVU0zUTBVc1ZVRkJRVUVzUTBGQlFVRXNRMEZCV1N4RFFVRkJMRU5CUTFwRExFZEJRVUZCTEVOQlFVc3NWVUZCUVN4RFFVTktMRTlCUVU5RExGbEJRVUZCTEVOQlFWTkZMRmRCUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJSMnhDVWl4TlFVRkJRU3hEUVVGUFF5eGpRVUZCUVN4RFFVRmxReXhWUVVGQlFTeERRVUZUTEdOQlFVRXNRMEZCWjBJc1EwRkRPVU5GTEZWQlFVRkJMRU5CUVVGQkxFTkJRVmtzUTBGQlFTeERRVU5hUXl4SFFVRkJRU3hEUVVGTExGVkJRVUVzUTBGRFNpeFBRVUZQUXl4WlFVRkJRU3hEUVVGVFJ5eFpRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVZHNRbFFzVFVGQlFVRXNRMEZCVDBNc1kwRkJRVUVzUTBGQlpVTXNWVUZCUVVFc1EwRkJVeXgxUWtGQlFTeERRVUY1UWl4RFFVTjJSRVVzVlVGQlFVRXNRMEZCUVVFc1EwRkJXU3hEUVVGQkxFTkJRMXBETEVkQlFVRkJMRU5CUVVzc1ZVRkJRU3hEUVVOS0xFOUJRVTlETEZsQlFVRkJMRU5CUVZOSkxIRkNRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVZHNRbFlzVFVGQlFVRXNRMEZCVDBNc1kwRkJRVUVzUTBGQlpVTXNWVUZCUVVFc1EwRkJVeXhaUVVGQkxFTkJRV01zUTBGRE5VTkZMRlZCUVVGQkxFTkJRVUZCTEVOQlFWa3NRMEZCUVN4RFFVTmFReXhIUVVGQlFTeERRVUZMTEZWQlFVRXNRMEZEU2l4UFFVRlBReXhaUVVGQlFTeERRVUZUU3l4VlFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVkc1FsZ3NUVUZCUVVFc1EwRkJUME1zWTBGQlFVRXNRMEZCWlVNc1ZVRkJRVUVzUTBGQlV5eFhRVUZCTEVOQlFXRXNRMEZETTBORkxGVkJRVUZCTEVOQlFVRkJMRU5CUVZrc1EwRkJRU3hEUVVOYVF5eEhRVUZCUVN4RFFVRkxMRlZCUVVFc1EwRkRTaXhQUVVGUFF5eFpRVUZCUVN4RFFVRlRUU3hUUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVWRzUWxvc1RVRkJRVUVzUTBGQlQwTXNZMEZCUVVFc1EwRkJaVU1zVlVGQlFVRXNRMEZCVXl4VFFVRkJMRU5CUVZjc1EwRkRla05GTEZWQlFVRkJMRU5CUVVGQkxFTkJRVmtzUTBGQlFTeERRVU5hUXl4SFFVRkJRU3hEUVVGTExGVkJRVUVzUTBGRFNpeFBRVUZQUXl4WlFVRkJRU3hEUVVGVFR5eFBRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVZHNRbUlzVFVGQlFVRXNRMEZCVDBNc1kwRkJRVUVzUTBGQlpVTXNWVUZCUVVFc1EwRkJVeXhaUVVGQkxFTkJRV01zUTBGRE5VTkZMRlZCUVVGQkxFTkJRVUZCTEVOQlFWa3NRMEZCUVN4RFFVTmFReXhIUVVGQlFTeERRVUZMTEZWQlFVRXNRMEZEU2l4UFFVRlBReXhaUVVGQlFTeERRVUZUVVN4VlFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVkc1FtUXNUVUZCUVVFc1EwRkJUME1zWTBGQlFVRXNRMEZCWlVNc1ZVRkJRVUVzUTBGQlV5eE5RVUZCTEVOQlFWRXNRMEZEZEVORkxGVkJRVUZCTEVOQlFVRkJMRU5CUVZrc1EwRkJRU3hEUVVOYVF5eEhRVUZCUVN4RFFVRkxMRlZCUVVFc1EwRkRTaXhQUVVGUFF5eFpRVUZCUVN4RFFVRlRVeXhKUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYmJuVnNiRjE5IiwiXCJ1c2Ugc3RyaWN0XCI7Y29uc3R7U3ZlbHRlQ29tcG9uZW50OlN2ZWx0ZUNvbXBvbmVudCxhcHBlbmQ6YXBwZW5kLGF0dHI6YXR0cixkZXRhY2g6ZGV0YWNoLGVsZW1lbnQ6ZWxlbWVudCxpbml0OmluaXQsaW5zZXJ0Omluc2VydCxub29wOm5vb3Asc2FmZV9ub3RfZXF1YWw6c2FmZV9ub3RfZXF1YWx9PV8kaW50ZXJuYWxfMyx7b25Nb3VudDpvbk1vdW50fT1fJHN2ZWx0ZV8yO2Z1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudChjdHgpe2xldCBkaXYsc2NyaXB0LGRpdl9pZF92YWx1ZTtyZXR1cm57Yygpe2Rpdj1lbGVtZW50KFwiZGl2XCIpLHNjcmlwdD1lbGVtZW50KFwic2NyaXB0XCIpLGF0dHIoZGl2LFwiaWRcIixkaXZfaWRfdmFsdWU9Y3R4WzBdLmFyZ3MubmFtZSksYXR0cihkaXYsXCJjbGFzc1wiLFwibG9hZGluZ1wiKX0sbSh0YXJnZXQsYW5jaG9yKXtpbnNlcnQodGFyZ2V0LGRpdixhbmNob3IpLGFwcGVuZChkaXYsc2NyaXB0KX0scChjdHgsW2RpcnR5XSl7MSZkaXJ0eSYmZGl2X2lkX3ZhbHVlIT09KGRpdl9pZF92YWx1ZT1jdHhbMF0uYXJncy5uYW1lKSYmYXR0cihkaXYsXCJpZFwiLGRpdl9pZF92YWx1ZSl9LGk6bm9vcCxvOm5vb3AsZChkZXRhY2hpbmcpe2RldGFjaGluZyYmZGV0YWNoKGRpdil9fX1mdW5jdGlvbiBpbnN0YW5jZSgkJHNlbGYsJCRwcm9wcywkJGludmFsaWRhdGUpe2xldHtkYXRhOmRhdGE9e319PSQkcHJvcHM7cmV0dXJuIG9uTW91bnQoKCk9Pnt3aW5kb3cucmVxdWlyZShbXCJzdmVsdGVcIl0sZnVuY3Rpb24oc3ZlbHRlKXtzdmVsdGUucmVuZGVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRhdGEuYXJncy5uYW1lKSxkYXRhLmpzX3VybCxkYXRhKX0pfSksJCRzZWxmLiQkc2V0PSgkJHByb3BzPT57XCJkYXRhXCJpbiAkJHByb3BzJiYkJGludmFsaWRhdGUoMCxkYXRhPSQkcHJvcHMuZGF0YSl9KSxbZGF0YV19dmFyIF8kQXBweXRlckZpZWxkXzE9Y2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnR7Y29uc3RydWN0b3Iob3B0aW9ucyl7c3VwZXIoKSxpbml0KHRoaXMsb3B0aW9ucyxpbnN0YW5jZSxjcmVhdGVfZnJhZ21lbnQsc2FmZV9ub3RfZXF1YWwse2RhdGE6MH0pfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrRndjSGwwWlhKR2FXVnNaQzV6ZG1Wc2RHVWlYU3dpYm1GdFpYTWlPbHNpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNkltYzFRa0V3UkVGQkxHOUNRVUZCUXl4RFFVRkJRU3hqUVVGQlFTeGxRVUZCUVN4RFFVRkJRU3hYUVVGQlFTeERRVUZCUVN4UFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4TFFVRkJRU3hGUVVGQlFTeERRVUZCUVN4SlFVRkJRU3hEUVVGQlFTeEpRVUZCUVN4RFFVRkJRU3hQUVVGQlFTeERRVUZCUVN4UlFVRkJRU3hEUVVGQlFTeGxRVUZCUVN4RFFVRkJRU3hqUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hKUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYmJuVnNiRjE5IiwiXCJ1c2Ugc3RyaWN0XCI7Y29uc3R7U3ZlbHRlQ29tcG9uZW50Ol9fU3ZlbHRlQ29tcG9uZW50XzQsYXBwZW5kOl9fYXBwZW5kXzQsYXR0cjpfX2F0dHJfNCxjaGVja19vdXRyb3M6Y2hlY2tfb3V0cm9zLGNyZWF0ZV9jb21wb25lbnQ6Y3JlYXRlX2NvbXBvbmVudCxkZXN0cm95X2NvbXBvbmVudDpkZXN0cm95X2NvbXBvbmVudCxkZXRhY2g6X19kZXRhY2hfNCxlbGVtZW50Ol9fZWxlbWVudF80LGdyb3VwX291dHJvczpncm91cF9vdXRyb3MsaW5pdDpfX2luaXRfNCxpbnNlcnQ6X19pbnNlcnRfNCxsaXN0ZW46bGlzdGVuLG1vdW50X2NvbXBvbmVudDptb3VudF9jb21wb25lbnQsb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2s6b3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2ssc2FmZV9ub3RfZXF1YWw6X19zYWZlX25vdF9lcXVhbF80LHNldF9kYXRhOnNldF9kYXRhLHNldF9zdHlsZTpzZXRfc3R5bGUsc3BhY2U6c3BhY2UsdGV4dDp0ZXh0LHRvZ2dsZV9jbGFzczp0b2dnbGVfY2xhc3MsdHJhbnNpdGlvbl9pbjp0cmFuc2l0aW9uX2luLHRyYW5zaXRpb25fb3V0OnRyYW5zaXRpb25fb3V0LHVwZGF0ZV9rZXllZF9lYWNoOnVwZGF0ZV9rZXllZF9lYWNofT1fJGludGVybmFsXzM7ZnVuY3Rpb24gZ2V0X2VhY2hfY29udGV4dChjdHgsbGlzdCxpKXtjb25zdCBjaGlsZF9jdHg9Y3R4LnNsaWNlKCk7cmV0dXJuIGNoaWxkX2N0eFs1XT1saXN0W2ldLGNoaWxkX2N0eH1mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2soY3R4KXtsZXQgc3VwLGksc3VwX3RpdGxlX3ZhbHVlLHQ7cmV0dXJue2MoKXtzdXA9X19lbGVtZW50XzQoXCJzdXBcIiksaT1fX2VsZW1lbnRfNChcImlcIiksdD1zcGFjZSgpLF9fYXR0cl80KGksXCJjbGFzc1wiLFwiZmFyIGZhLXF1ZXN0aW9uLWNpcmNsZVwiKSxfX2F0dHJfNChzdXAsXCJkYXRhLXRvZ2dsZVwiLFwidG9vbHRpcFwiKSxfX2F0dHJfNChzdXAsXCJ0aXRsZVwiLHN1cF90aXRsZV92YWx1ZT1jdHhbMF0uZGVzY3JpcHRpb24pfSxtKHRhcmdldCxhbmNob3Ipe19faW5zZXJ0XzQodGFyZ2V0LHN1cCxhbmNob3IpLF9fYXBwZW5kXzQoc3VwLGkpLF9faW5zZXJ0XzQodGFyZ2V0LHQsYW5jaG9yKX0scChjdHgsZGlydHkpezEmZGlydHkmJnN1cF90aXRsZV92YWx1ZSE9PShzdXBfdGl0bGVfdmFsdWU9Y3R4WzBdLmRlc2NyaXB0aW9uKSYmX19hdHRyXzQoc3VwLFwidGl0bGVcIixzdXBfdGl0bGVfdmFsdWUpfSxkKGRldGFjaGluZyl7ZGV0YWNoaW5nJiZfX2RldGFjaF80KHN1cCksZGV0YWNoaW5nJiZfX2RldGFjaF80KHQpfX19ZnVuY3Rpb24gY3JlYXRlX2VhY2hfYmxvY2soa2V5XzEsY3R4KXtsZXQgYSxpLGFfZGF0YV90YXJnZXRfdmFsdWUsdCxhcHB5dGVyZmllbGQsY3VycmVudCxtb3VudGVkLGRpc3Bvc2U7ZnVuY3Rpb24gY2xpY2tfaGFuZGxlciguLi5hcmdzKXtyZXR1cm4gY3R4WzNdKGN0eFs1XSwuLi5hcmdzKX1yZXR1cm4gYXBweXRlcmZpZWxkPW5ldyBfJEFwcHl0ZXJGaWVsZF8xKHtwcm9wczp7ZGF0YTpjdHhbMV1bY3R4WzVdXX19KSx7a2V5OmtleV8xLGZpcnN0Om51bGwsYygpe2E9X19lbGVtZW50XzQoXCJhXCIpLGk9X19lbGVtZW50XzQoXCJpXCIpLHQ9c3BhY2UoKSxjcmVhdGVfY29tcG9uZW50KGFwcHl0ZXJmaWVsZC4kJC5mcmFnbWVudCksX19hdHRyXzQoaSxcImNsYXNzXCIsXCJmYXMgZmEtdHJhc2ggdGV4dC13aGl0ZVwiKSxfX2F0dHJfNChhLFwiaHJlZlwiLFwiamF2YXNjcmlwdDpcIiksX19hdHRyXzQoYSxcImNsYXNzXCIsXCJidG4gYnRuLXNtIGJ0bi1kYW5nZXJcIiksc2V0X3N0eWxlKGEsXCJmbG9hdFwiLFwicmlnaHRcIiksX19hdHRyXzQoYSxcImRhdGEtdGFyZ2V0XCIsYV9kYXRhX3RhcmdldF92YWx1ZT1jdHhbNV0pLHRoaXMuZmlyc3Q9YX0sbSh0YXJnZXQsYW5jaG9yKXtfX2luc2VydF80KHRhcmdldCxhLGFuY2hvciksX19hcHBlbmRfNChhLGkpLF9faW5zZXJ0XzQodGFyZ2V0LHQsYW5jaG9yKSxtb3VudF9jb21wb25lbnQoYXBweXRlcmZpZWxkLHRhcmdldCxhbmNob3IpLGN1cnJlbnQ9ITAsbW91bnRlZHx8KGRpc3Bvc2U9bGlzdGVuKGEsXCJjbGlja1wiLGNsaWNrX2hhbmRsZXIpLG1vdW50ZWQ9ITApfSxwKG5ld19jdHgsZGlydHkpe2N0eD1uZXdfY3R4LCghY3VycmVudHx8MiZkaXJ0eSYmYV9kYXRhX3RhcmdldF92YWx1ZSE9PShhX2RhdGFfdGFyZ2V0X3ZhbHVlPWN0eFs1XSkpJiZfX2F0dHJfNChhLFwiZGF0YS10YXJnZXRcIixhX2RhdGFfdGFyZ2V0X3ZhbHVlKTtjb25zdCBhcHB5dGVyZmllbGRfY2hhbmdlcz17fTsyJmRpcnR5JiYoYXBweXRlcmZpZWxkX2NoYW5nZXMuZGF0YT1jdHhbMV1bY3R4WzVdXSksYXBweXRlcmZpZWxkLiRzZXQoYXBweXRlcmZpZWxkX2NoYW5nZXMpfSxpKGxvY2FsKXtjdXJyZW50fHwodHJhbnNpdGlvbl9pbihhcHB5dGVyZmllbGQuJCQuZnJhZ21lbnQsbG9jYWwpLGN1cnJlbnQ9ITApfSxvKGxvY2FsKXt0cmFuc2l0aW9uX291dChhcHB5dGVyZmllbGQuJCQuZnJhZ21lbnQsbG9jYWwpLGN1cnJlbnQ9ITF9LGQoZGV0YWNoaW5nKXtkZXRhY2hpbmcmJl9fZGV0YWNoXzQoYSksZGV0YWNoaW5nJiZfX2RldGFjaF80KHQpLGRlc3Ryb3lfY29tcG9uZW50KGFwcHl0ZXJmaWVsZCxkZXRhY2hpbmcpLG1vdW50ZWQ9ITEsZGlzcG9zZSgpfX19ZnVuY3Rpb24gX19jcmVhdGVfZnJhZ21lbnRfNChjdHgpe2xldCBkaXYyLGRpdjAsdDAsdDEsdDIsdDMsZGl2MSx0NCxhLGksYV9kaXNhYmxlZF92YWx1ZSx0NSxkaXYzLGlucHV0LGlucHV0X25hbWVfdmFsdWUsaW5wdXRfdmFsdWVfdmFsdWUsdDYsYXBweXRlcmZpZWxkLGN1cnJlbnQsbW91bnRlZCxkaXNwb3NlLHQwX3ZhbHVlPWN0eFswXS5sYWJlbCtcIlwiLGVhY2hfYmxvY2tzPVtdLGVhY2hfMV9sb29rdXA9bmV3IE1hcCxpZl9ibG9jaz1jdHhbMF0uZGVzY3JpcHRpb24mJmNyZWF0ZV9pZl9ibG9jayhjdHgpLGVhY2hfdmFsdWU9T2JqZWN0LmtleXMoY3R4WzFdKTtjb25zdCBnZXRfa2V5PWN0eD0+Y3R4WzVdO2ZvcihsZXQgaT0wO2k8ZWFjaF92YWx1ZS5sZW5ndGg7aSs9MSl7bGV0IGNoaWxkX2N0eD1nZXRfZWFjaF9jb250ZXh0KGN0eCxlYWNoX3ZhbHVlLGkpLGtleT1nZXRfa2V5KGNoaWxkX2N0eCk7ZWFjaF8xX2xvb2t1cC5zZXQoa2V5LGVhY2hfYmxvY2tzW2ldPWNyZWF0ZV9lYWNoX2Jsb2NrKGtleSxjaGlsZF9jdHgpKX1yZXR1cm4gYXBweXRlcmZpZWxkPW5ldyBfJEFwcHl0ZXJGaWVsZF8xKHtwcm9wczp7ZGF0YTp7Li4uY3R4WzBdLmZpZWxkLGFyZ3M6ey4uLmN0eFswXS5maWVsZC5hcmdzLHZhbHVlOlwiXCJ9fX19KSx7Yygpe2RpdjI9X19lbGVtZW50XzQoXCJkaXZcIiksZGl2MD1fX2VsZW1lbnRfNChcImRpdlwiKSx0MD10ZXh0KHQwX3ZhbHVlKSx0MT1zcGFjZSgpLGlmX2Jsb2NrJiZpZl9ibG9jay5jKCksdDI9dGV4dChcIjpcIiksdDM9c3BhY2UoKSxkaXYxPV9fZWxlbWVudF80KFwiZGl2XCIpO2ZvcihsZXQgaT0wO2k8ZWFjaF9ibG9ja3MubGVuZ3RoO2krPTEpZWFjaF9ibG9ja3NbaV0uYygpO3Q0PXNwYWNlKCksYT1fX2VsZW1lbnRfNChcImFcIiksaT1fX2VsZW1lbnRfNChcImlcIiksdDU9c3BhY2UoKSxkaXYzPV9fZWxlbWVudF80KFwiZGl2XCIpLGlucHV0PV9fZWxlbWVudF80KFwiaW5wdXRcIiksdDY9c3BhY2UoKSxjcmVhdGVfY29tcG9uZW50KGFwcHl0ZXJmaWVsZC4kJC5mcmFnbWVudCksX19hdHRyXzQoZGl2MCxcImNsYXNzXCIsXCJjb2wtbGctMyBib2xkIHRleHQtbGctcmlnaHQgbXktYXV0b1wiKSxfX2F0dHJfNChpLFwiY2xhc3NcIixcImZhcyBmYS1wbHVzIHRleHQtd2hpdGVcIiksX19hdHRyXzQoYSxcImhyZWZcIixcImphdmFzY3JpcHQ6XCIpLF9fYXR0cl80KGEsXCJjbGFzc1wiLFwiYnRuIGJ0bi1zbSBidG4tc3VjY2Vzc1wiKSxzZXRfc3R5bGUoYSxcImZsb2F0XCIsXCJyaWdodFwiKSxfX2F0dHJfNChhLFwiZGlzYWJsZWRcIixhX2Rpc2FibGVkX3ZhbHVlPWN0eFswXS5tYXgmJmN0eFsxXS5sZW5ndGg+Y3R4WzBdLm1heCksdG9nZ2xlX2NsYXNzKGEsXCJkaXNhYmxlZFwiLGN0eFswXS5tYXgmJmN0eFsxXS5sZW5ndGg+Y3R4WzBdLm1heCksX19hdHRyXzQoZGl2MSxcImNsYXNzXCIsXCJjb2wtbGctNiBwdC0yIHB0LWxnLTBcIiksX19hdHRyXzQoZGl2MixcImNsYXNzXCIsXCJyb3cgcHgtMyBwYi0zXCIpLF9fYXR0cl80KGlucHV0LFwidHlwZVwiLFwidGV4dFwiKSxfX2F0dHJfNChpbnB1dCxcImNsYXNzXCIsXCJoaWRkZW5cIiksX19hdHRyXzQoaW5wdXQsXCJuYW1lXCIsaW5wdXRfbmFtZV92YWx1ZT1jdHhbMF0ubmFtZSksaW5wdXQudmFsdWU9aW5wdXRfdmFsdWVfdmFsdWU9SlNPTi5zdHJpbmdpZnkoT2JqZWN0LmtleXMoY3R4WzFdKS5tYXAoZnVuYykpLHNldF9zdHlsZShkaXYzLFwiZGlzcGxheVwiLFwibm9uZVwiKX0sbSh0YXJnZXQsYW5jaG9yKXtfX2luc2VydF80KHRhcmdldCxkaXYyLGFuY2hvciksX19hcHBlbmRfNChkaXYyLGRpdjApLF9fYXBwZW5kXzQoZGl2MCx0MCksX19hcHBlbmRfNChkaXYwLHQxKSxpZl9ibG9jayYmaWZfYmxvY2subShkaXYwLG51bGwpLF9fYXBwZW5kXzQoZGl2MCx0MiksX19hcHBlbmRfNChkaXYyLHQzKSxfX2FwcGVuZF80KGRpdjIsZGl2MSk7Zm9yKGxldCBpPTA7aTxlYWNoX2Jsb2Nrcy5sZW5ndGg7aSs9MSllYWNoX2Jsb2Nrc1tpXS5tKGRpdjEsbnVsbCk7X19hcHBlbmRfNChkaXYxLHQ0KSxfX2FwcGVuZF80KGRpdjEsYSksX19hcHBlbmRfNChhLGkpLF9faW5zZXJ0XzQodGFyZ2V0LHQ1LGFuY2hvciksX19pbnNlcnRfNCh0YXJnZXQsZGl2MyxhbmNob3IpLF9fYXBwZW5kXzQoZGl2MyxpbnB1dCksX19hcHBlbmRfNChkaXYzLHQ2KSxtb3VudF9jb21wb25lbnQoYXBweXRlcmZpZWxkLGRpdjMsbnVsbCksY3VycmVudD0hMCxtb3VudGVkfHwoZGlzcG9zZT1saXN0ZW4oYSxcImNsaWNrXCIsY3R4WzRdKSxtb3VudGVkPSEwKX0scChjdHgsW2RpcnR5XSl7aWYoKCFjdXJyZW50fHwxJmRpcnR5KSYmdDBfdmFsdWUhPT0odDBfdmFsdWU9Y3R4WzBdLmxhYmVsK1wiXCIpJiZzZXRfZGF0YSh0MCx0MF92YWx1ZSksY3R4WzBdLmRlc2NyaXB0aW9uP2lmX2Jsb2NrP2lmX2Jsb2NrLnAoY3R4LGRpcnR5KTooKGlmX2Jsb2NrPWNyZWF0ZV9pZl9ibG9jayhjdHgpKS5jKCksaWZfYmxvY2subShkaXYwLHQyKSk6aWZfYmxvY2smJihpZl9ibG9jay5kKDEpLGlmX2Jsb2NrPW51bGwpLDImZGlydHkpe2NvbnN0IGVhY2hfdmFsdWU9T2JqZWN0LmtleXMoY3R4WzFdKTtncm91cF9vdXRyb3MoKSxlYWNoX2Jsb2Nrcz11cGRhdGVfa2V5ZWRfZWFjaChlYWNoX2Jsb2NrcyxkaXJ0eSxnZXRfa2V5LDEsY3R4LGVhY2hfdmFsdWUsZWFjaF8xX2xvb2t1cCxkaXYxLG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrLGNyZWF0ZV9lYWNoX2Jsb2NrLHQ0LGdldF9lYWNoX2NvbnRleHQpLGNoZWNrX291dHJvcygpfSghY3VycmVudHx8MyZkaXJ0eSYmYV9kaXNhYmxlZF92YWx1ZSE9PShhX2Rpc2FibGVkX3ZhbHVlPWN0eFswXS5tYXgmJmN0eFsxXS5sZW5ndGg+Y3R4WzBdLm1heCkpJiZfX2F0dHJfNChhLFwiZGlzYWJsZWRcIixhX2Rpc2FibGVkX3ZhbHVlKSwzJmRpcnR5JiZ0b2dnbGVfY2xhc3MoYSxcImRpc2FibGVkXCIsY3R4WzBdLm1heCYmY3R4WzFdLmxlbmd0aD5jdHhbMF0ubWF4KSwoIWN1cnJlbnR8fDEmZGlydHkmJmlucHV0X25hbWVfdmFsdWUhPT0oaW5wdXRfbmFtZV92YWx1ZT1jdHhbMF0ubmFtZSkpJiZfX2F0dHJfNChpbnB1dCxcIm5hbWVcIixpbnB1dF9uYW1lX3ZhbHVlKSwoIWN1cnJlbnR8fDImZGlydHkmJmlucHV0X3ZhbHVlX3ZhbHVlIT09KGlucHV0X3ZhbHVlX3ZhbHVlPUpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKGN0eFsxXSkubWFwKGZ1bmMpKSkmJmlucHV0LnZhbHVlIT09aW5wdXRfdmFsdWVfdmFsdWUpJiYoaW5wdXQudmFsdWU9aW5wdXRfdmFsdWVfdmFsdWUpO2NvbnN0IGFwcHl0ZXJmaWVsZF9jaGFuZ2VzPXt9OzEmZGlydHkmJihhcHB5dGVyZmllbGRfY2hhbmdlcy5kYXRhPXsuLi5jdHhbMF0uZmllbGQsYXJnczp7Li4uY3R4WzBdLmZpZWxkLmFyZ3MsdmFsdWU6XCJcIn19KSxhcHB5dGVyZmllbGQuJHNldChhcHB5dGVyZmllbGRfY2hhbmdlcyl9LGkobG9jYWwpe2lmKCFjdXJyZW50KXtmb3IobGV0IGk9MDtpPGVhY2hfdmFsdWUubGVuZ3RoO2krPTEpdHJhbnNpdGlvbl9pbihlYWNoX2Jsb2Nrc1tpXSk7dHJhbnNpdGlvbl9pbihhcHB5dGVyZmllbGQuJCQuZnJhZ21lbnQsbG9jYWwpLGN1cnJlbnQ9ITB9fSxvKGxvY2FsKXtmb3IobGV0IGk9MDtpPGVhY2hfYmxvY2tzLmxlbmd0aDtpKz0xKXRyYW5zaXRpb25fb3V0KGVhY2hfYmxvY2tzW2ldKTt0cmFuc2l0aW9uX291dChhcHB5dGVyZmllbGQuJCQuZnJhZ21lbnQsbG9jYWwpLGN1cnJlbnQ9ITF9LGQoZGV0YWNoaW5nKXtkZXRhY2hpbmcmJl9fZGV0YWNoXzQoZGl2MiksaWZfYmxvY2smJmlmX2Jsb2NrLmQoKTtmb3IobGV0IGk9MDtpPGVhY2hfYmxvY2tzLmxlbmd0aDtpKz0xKWVhY2hfYmxvY2tzW2ldLmQoKTtkZXRhY2hpbmcmJl9fZGV0YWNoXzQodDUpLGRldGFjaGluZyYmX19kZXRhY2hfNChkaXYzKSxkZXN0cm95X2NvbXBvbmVudChhcHB5dGVyZmllbGQpLG1vdW50ZWQ9ITEsZGlzcG9zZSgpfX19Y29uc3QgZnVuYz12PT52LmFyZ3MubmFtZTtmdW5jdGlvbiBfX2luc3RhbmNlXzQoJCRzZWxmLCQkcHJvcHMsJCRpbnZhbGlkYXRlKXtsZXR7YXJnczphcmdzfT0kJHByb3BzLHZhbHVlcz17fSxpZF9jb3VudGVyPTA7Zm9yKGNvbnN0IHYgb2YgYXJncy5kZWZhdWx0fHxbXSl2YWx1ZXNbaWRfY291bnRlcisrXT17Li4udixhcmdzOnsuLi52LmFyZ3MsbmFtZTpgJHt2LmFyZ3MubmFtZX1fJHtpZF9jb3VudGVyfWB9fTtyZXR1cm4gJCRzZWxmLiQkc2V0PSgkJHByb3BzPT57XCJhcmdzXCJpbiAkJHByb3BzJiYkJGludmFsaWRhdGUoMCxhcmdzPSQkcHJvcHMuYXJncyl9KSxbYXJncyx2YWx1ZXMsaWRfY291bnRlcix2YWx1ZV9pZD0+e2RlbGV0ZSB2YWx1ZXNbdmFsdWVfaWRdLCQkaW52YWxpZGF0ZSgxLHZhbHVlcyl9LCgpPT57YXJncy5tYXgmJnZhbHVlcy5sZW5ndGg+YXJncy5tYXh8fCQkaW52YWxpZGF0ZSgxLHZhbHVlc1skJGludmFsaWRhdGUoMixpZF9jb3VudGVyKyssaWRfY291bnRlcildPXsuLi5hcmdzLmZpZWxkLGFyZ3M6ey4uLmFyZ3MuZmllbGQuYXJncyxuYW1lOmAke2FyZ3MuZmllbGQuYXJncy5uYW1lfV8ke2lkX2NvdW50ZXJ9YH19LHZhbHVlcyl9XX12YXIgXyRWYXJpYWJsZUZpZWxkXzQ9Y2xhc3MgZXh0ZW5kcyBfX1N2ZWx0ZUNvbXBvbmVudF80e2NvbnN0cnVjdG9yKG9wdGlvbnMpe3N1cGVyKCksX19pbml0XzQodGhpcyxvcHRpb25zLF9faW5zdGFuY2VfNCxfX2NyZWF0ZV9mcmFnbWVudF80LF9fc2FmZV9ub3RfZXF1YWxfNCx7YXJnczowfSl9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxaaGNtbGhZbXhsUm1sbGJHUXVjM1psYkhSbElsMHNJbTVoYldWeklqcGJJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lKck5FNUJhVmhCUVN4eFFrRkJRVU1zUTBGQlFVRXNZMEZCUVVFc2JVSkJRVUZCTEVOQlFVRkJMRmRCUVVGQkxFTkJRVUZCTEU5QlFVRkJMRU5CUVVGQkxFTkJRVUZCTEV0QlFVRkJMRVZCUVVGQkxFTkJRVUZCTEZGQlFVRkJMRU5CUVVGQkxFbEJRVUZCTEVOQlFVRkJMRTlCUVVGQkxFTkJRVUZCTEZsQlFVRkJMRU5CUVVGQkxHMUNRVUZCUVN4RFFVRkJRU3hyUWtGQlFVRXNRMEZCUVVFc1EwRkJRVUVzU1VGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNlcyNTFiR3hkZlE9PSJdfQ==