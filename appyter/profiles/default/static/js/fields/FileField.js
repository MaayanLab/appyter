!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;((t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).FileField||(t.FileField={})).svelte=e()}}((function(){var e={};(function(t){"use strict";function n(){}Object.defineProperty(e,"__esModule",{value:!0});function r(e){return e()}function o(){return Object.create(null)}function l(e){e.forEach(r)}function a(e){return"function"==typeof e}function s(e){return 0===Object.keys(e).length}const i="undefined"!=typeof window;e.raf=i?e=>requestAnimationFrame(e):n;new Set;function c(e,t){e.appendChild(t)}function u(e,t,n){e.insertBefore(t,n||null)}function d(e){e.parentNode.removeChild(e)}function f(e){return document.createElement(e)}function p(e){return document.createTextNode(e)}function m(e,t,n,r){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n,r)}function g(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function b(e){return Array.from(e.childNodes)}function h(e,t){const n=document.createEvent("CustomEvent");return n.initCustomEvent(e,!1,!1,t),n}new Set;function y(t){e.current_component=t}function w(){if(!e.current_component)throw new Error("Function called outside component initialization");return e.current_component}const v=[],x=[],_=[],$=[],k=Promise.resolve();let j=!1;function O(){j||(j=!0,k.then(P))}function C(e){_.push(e)}let E=!1;const q=new Set;function P(){if(!E){E=!0;do{for(let e=0;e<v.length;e+=1){const t=v[e];y(t),L(t.$$)}for(y(null),v.length=0;x.length;)x.pop()();for(let e=0;e<_.length;e+=1){const t=_[e];q.has(t)||(q.add(t),t())}_.length=0}while(v.length);for(;$.length;)$.pop()();j=!1,E=!1,q.clear()}}function L(e){if(null!==e.fragment){e.update(),l(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(C)}}const S=new Set;function T(e,t){e&&e.i&&(S.delete(e),e.i(t))}const M="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:t;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);function U(e,t,n,o){const{fragment:s,on_mount:i,on_destroy:c,after_update:u}=e.$$;s&&s.m(t,n),o||C(()=>{const t=i.map(r).filter(a);c?c.push(...t):l(t),e.$$.on_mount=[]}),u.forEach(C)}function D(e,t){const n=e.$$;null!==n.fragment&&(l(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}"function"==typeof HTMLElement&&HTMLElement;class A{$destroy(){D(this,1),this.$destroy=n}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){this.$$set&&!s(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}class F extends A{constructor(e){if(!e||!e.target&&!e.$$inline)throw new Error("'target' is a required option");super()}$destroy(){super.$destroy(),this.$destroy=()=>{console.warn("Component was already destroyed")}}$capture_state(){}$inject_state(){}}e.SvelteComponent=A,e.SvelteComponentDev=F,e.SvelteComponentTyped=class extends F{constructor(e){super(e)}},e.afterUpdate=function(e){w().$$.after_update.push(e)},e.append=c,e.attr=g,e.beforeUpdate=function(e){w().$$.before_update.push(e)},e.binding_callbacks=x,e.createEventDispatcher=function(){const e=w();return(t,n)=>{const r=e.$$.callbacks[t];if(r){const o=h(t,n);r.slice().forEach(t=>{t.call(e,o)})}}},e.destroy_each=function(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)},e.detach=d,e.element=f,e.getContext=function(e){return w().$$.context.get(e)},e.globals=M,e.hasContext=function(e){return w().$$.context.has(e)},e.init=function(t,r,a,s,i,c,u=[-1]){const f=e.current_component;y(t);const p=t.$$={fragment:null,ctx:null,props:c,update:n,not_equal:i,bound:o(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(f?f.$$.context:[]),callbacks:o(),dirty:u,skip_bound:!1};let m=!1;if(p.ctx=a?a(t,r.props||{},(e,n,...r)=>{const o=r.length?r[0]:n;return p.ctx&&i(p.ctx[e],p.ctx[e]=o)&&(!p.skip_bound&&p.bound[e]&&p.bound[e](o),m&&function(e,t){-1===e.$$.dirty[0]&&(v.push(e),O(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(t,e)),n}):[],p.update(),m=!0,l(p.before_update),p.fragment=!!s&&s(p.ctx),r.target){if(r.hydrate){const e=b(r.target);p.fragment&&p.fragment.l(e),e.forEach(d)}else p.fragment&&p.fragment.c();r.intro&&T(t.$$.fragment),U(t,r.target,r.anchor,r.customElement),P()}y(f)},e.insert=u,e.listen=m,e.noop=n,e.onDestroy=function(e){w().$$.on_destroy.push(e)},e.onMount=function(e){w().$$.on_mount.push(e)},e.safe_not_equal=function(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e},e.setContext=function(e,t){w().$$.context.set(e,t)},e.set_data=function(e,t){t=""+t,e.wholeText!==t&&(e.data=t)},e.set_input_value=function(e,t){e.value=null==t?"":t},e.set_style=function(e,t,n,r){e.style.setProperty(t,n,r?"important":"")},e.space=function(){return p(" ")},e.text=p,e.tick=function(){return O(),k},e.toggle_class=function(e,t,n){e.classList[n?"add":"remove"](t)}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var t={};Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"SvelteComponent",{enumerable:!0,get:function(){return e.SvelteComponentDev}}),Object.defineProperty(t,"SvelteComponentTyped",{enumerable:!0,get:function(){return e.SvelteComponentTyped}}),Object.defineProperty(t,"afterUpdate",{enumerable:!0,get:function(){return e.afterUpdate}}),Object.defineProperty(t,"beforeUpdate",{enumerable:!0,get:function(){return e.beforeUpdate}}),Object.defineProperty(t,"createEventDispatcher",{enumerable:!0,get:function(){return e.createEventDispatcher}}),Object.defineProperty(t,"getContext",{enumerable:!0,get:function(){return e.getContext}}),Object.defineProperty(t,"hasContext",{enumerable:!0,get:function(){return e.hasContext}}),Object.defineProperty(t,"onDestroy",{enumerable:!0,get:function(){return e.onDestroy}}),Object.defineProperty(t,"onMount",{enumerable:!0,get:function(){return e.onMount}}),Object.defineProperty(t,"setContext",{enumerable:!0,get:function(){return e.setContext}}),Object.defineProperty(t,"tick",{enumerable:!0,get:function(){return e.tick}});var n={};Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,t){return Array.isArray(t)?new Promise((function(n,r){return e.require(t,(function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return n(t)}),r)})):new Promise((function(n,r){return e.require([t],n,r)}))};const{SvelteComponent:r,append:o,attr:l,binding_callbacks:a,destroy_each:s,detach:i,element:c,globals:u,init:d,insert:f,listen:p,noop:m,safe_not_equal:g,set_data:b,set_input_value:h,set_style:y,space:w,text:v,toggle_class:x}=e,{document:_}=u,{onMount:$}=t,{default:k}=n;function j(e,t,n){const r=e.slice();return r[12]=t[n],r}function O(e,t,n){const r=e.slice();return r[12]=t[n],r}function C(e){let t,n,r,a;return{c(){t=c("sup"),n=c("i"),a=w(),l(n,"class","far fa-question-circle"),l(t,"data-toggle","tooltip"),l(t,"title",r=e[0].description)},m(e,r){f(e,t,r),o(t,n),f(e,a,r)},p(e,n){1&n&&r!==(r=e[0].description)&&l(t,"title",r)},d(e){e&&i(t),e&&i(a)}}}function E(e){let t,n,r,a,s,u,d,p=e[2].error&&q(e),m=e[2].warning&&L(e);return{c(){t=c("div"),n=c("div"),r=c("div"),u=w(),p&&p.c(),d=w(),m&&m.c(),l(r,"class",a="progress-bar bg-"+e[2].bg+" svelte-7t3aq4"),l(r,"role","progressbar"),l(r,"aria-valuemin","0"),l(r,"aria-valuemax","100"),l(r,"aria-valuenow",s=e[2].progress),y(r,"width",e[2].progress+"%"),x(r,"progress-bar-striped",e[2].striped),x(r,"progress-bar-animated",e[2].animated),l(n,"class","progress bg-light svelte-7t3aq4")},m(e,l){f(e,t,l),o(t,n),o(n,r),o(t,u),p&&p.m(t,null),o(t,d),m&&m.m(t,null)},p(e,n){4&n&&a!==(a="progress-bar bg-"+e[2].bg+" svelte-7t3aq4")&&l(r,"class",a),4&n&&s!==(s=e[2].progress)&&l(r,"aria-valuenow",s),4&n&&y(r,"width",e[2].progress+"%"),4&n&&x(r,"progress-bar-striped",e[2].striped),4&n&&x(r,"progress-bar-animated",e[2].animated),e[2].error?p?p.p(e,n):((p=q(e)).c(),p.m(t,d)):p&&(p.d(1),p=null),e[2].warning?m?m.p(e,n):((m=L(e)).c(),m.m(t,null)):m&&(m.d(1),m=null)},d(e){e&&i(t),p&&p.d(),m&&m.d()}}}function q(e){let t,n,r,a,s=e[2].error+"",u=e[2].url&&P(e);return{c(){t=c("div"),n=v("Error downloading file: "),r=v(s),a=w(),u&&u.c(),l(t,"class","alert alert-danger")},m(e,l){f(e,t,l),o(t,n),o(t,r),o(t,a),u&&u.m(t,null)},p(e,n){4&n&&s!==(s=e[2].error+"")&&b(r,s),e[2].url?u?u.p(e,n):((u=P(e)).c(),u.m(t,null)):u&&(u.d(1),u=null)},d(e){e&&i(t),u&&u.d()}}}function P(e){let t,n,r,a,s=e[2].url+"";return{c(){t=v("from "),n=c("a"),r=v(s),l(n,"href",a=e[2].url),l(n,"target","_blank")},m(e,l){f(e,t,l),f(e,n,l),o(n,r)},p(e,t){4&t&&s!==(s=e[2].url+"")&&b(r,s),4&t&&a!==(a=e[2].url)&&l(n,"href",a)},d(e){e&&i(t),e&&i(n)}}}function L(e){let t,n,r,a,s,u,d,p,m,g,h,y=e[2].error+"",x=e[2].url+"";return{c(){t=c("div"),n=v("Error downloading file: "),r=v(y),a=c("br"),s=w(),(u=c("b")).textContent="It may require user engagement",d=v(", please visit\n            "),p=c("a"),m=v(x),h=v("\n          to download the example file for upload."),l(p,"href",g=e[2].url),l(p,"target","_blank"),l(t,"class","alert alert-warning")},m(e,l){f(e,t,l),o(t,n),o(t,r),o(t,a),o(t,s),o(t,u),o(t,d),o(t,p),o(p,m),o(t,h)},p(e,t){4&t&&y!==(y=e[2].error+"")&&b(r,y),4&t&&x!==(x=e[2].url+"")&&b(m,x),4&t&&g!==(g=e[2].url)&&l(p,"href",g)},d(e){e&&i(t)}}}function S(e){let t,n,r,a,u,d,p,m,g,b,h,x,_,$,k,C,E,q,P=Object.keys(e[0].examples).length>1,L=Object.keys(e[0].examples).length>1,S=P&&T(e),A=Object.keys(e[0].examples),F=[];for(let o=0;o<A.length;o+=1)F[o]=M(O(e,A,o));let z=L&&U(e),I=Object.keys(e[0].examples),H=[];for(let o=0;o<I.length;o+=1)H[o]=D(j(e,I,o));return{c(){t=c("div"),n=c("div"),r=c("span"),a=v("Load example"),S&&S.c(),u=w(),(d=c("sup")).innerHTML='<i class="far fa-question-circle"></i>',p=v(":"),m=w(),g=c("div");for(let e=0;e<F.length;e+=1)F[e].c();b=w(),h=c("div"),x=c("span"),_=v("Download example"),z&&z.c(),$=w(),(k=c("sup")).innerHTML='<i class="far fa-question-circle"></i>',C=v(":"),E=w(),q=c("div");for(let e=0;e<H.length;e+=1)H[e].c();l(d,"data-toggle","tooltip"),l(d,"title","Load the example file directly into the appyter"),l(r,"class","d-table-cell mr-1 my-1 p-1 text-right"),y(r,"white-space","nowrap"),l(g,"class","d-table-cell table-grow d-flex flex-wrap justify-content-start align-items-center"),l(n,"class","d-table-row"),l(k,"data-toggle","tooltip"),l(k,"title","Download the example file for inspection"),l(x,"class","d-table-cell mr-1 my-1 p-1 text-right"),y(x,"white-space","nowrap"),l(q,"class","d-table-cell table-grow d-flex flex-wrap justify-content-start align-items-center"),l(h,"class","d-table-row"),l(t,"class","d-table")},m(e,l){f(e,t,l),o(t,n),o(n,r),o(r,a),S&&S.m(r,null),o(r,u),o(r,d),o(r,p),o(n,m),o(n,g);for(let t=0;t<F.length;t+=1)F[t].m(g,null);o(t,b),o(t,h),o(h,x),o(x,_),z&&z.m(x,null),o(x,$),o(x,k),o(x,C),o(h,E),o(h,q);for(let t=0;t<H.length;t+=1)H[t].m(q,null)},p(e,t){if(1&t&&(P=Object.keys(e[0].examples).length>1),P?S||((S=T(e)).c(),S.m(r,u)):S&&(S.d(1),S=null),33&t){let n;for(A=Object.keys(e[0].examples),n=0;n<A.length;n+=1){const r=O(e,A,n);F[n]?F[n].p(r,t):(F[n]=M(r),F[n].c(),F[n].m(g,null))}for(;n<F.length;n+=1)F[n].d(1);F.length=A.length}if(1&t&&(L=Object.keys(e[0].examples).length>1),L?z||((z=U(e)).c(),z.m(x,$)):z&&(z.d(1),z=null),1&t){let n;for(I=Object.keys(e[0].examples),n=0;n<I.length;n+=1){const r=j(e,I,n);H[n]?H[n].p(r,t):(H[n]=D(r),H[n].c(),H[n].m(q,null))}for(;n<H.length;n+=1)H[n].d(1);H.length=I.length}},d(e){e&&i(t),S&&S.d(),s(F,e),z&&z.d(),s(H,e)}}}function T(e){let t;return{c(){t=v("s")},m(e,n){f(e,t,n)},d(e){e&&i(t)}}}function M(e){let t,n,r,a,s,u,d=e[12]+"";function m(){return e[9](e[12])}return{c(){t=c("span"),n=c("a"),r=v(d),a=w(),l(n,"href","javascript:"),l(t,"class","text-sm m-1 p-1"),y(t,"white-space","nowrap")},m(e,l){f(e,t,l),o(t,n),o(n,r),o(t,a),s||(u=p(n,"click",m),s=!0)},p(t,n){e=t,1&n&&d!==(d=e[12]+"")&&b(r,d)},d(e){e&&i(t),s=!1,u()}}}function U(e){let t;return{c(){t=v("s")},m(e,n){f(e,t,n)},d(e){e&&i(t)}}}function D(e){let t,n,r,a,s,u=e[12]+"";return{c(){t=c("span"),n=c("a"),r=v(u),s=w(),l(n,"href",a=e[0].examples[e[12]]),l(n,"target","_blank"),l(t,"class","text-sm m-1 p-1"),y(t,"white-space","nowrap")},m(e,l){f(e,t,l),o(t,n),o(n,r),o(t,s)},p(e,t){1&t&&u!==(u=e[12]+"")&&b(r,u),1&t&&a!==(a=e[0].examples[e[12]])&&l(n,"href",a)},d(e){e&&i(t)}}}function A(e){let t,n,r,a,s,u,d,g,y,x,_,$,k,j,O,q,P,L,T,M,U,D=e[0].label+"",A=(e[3]||"Choose file")+"",F=e[0].examples&&Object.keys(e[0].examples).length>0,z=e[0].description&&C(e),I=void 0!==e[2]&&E(e),H=F&&S(e);return{c(){t=c("div"),n=c("div"),r=v(D),a=w(),z&&z.c(),s=v(":"),u=w(),d=c("div"),g=c("div"),y=c("input"),_=w(),$=c("input"),j=w(),O=c("label"),q=v(A),L=w(),I&&I.c(),T=w(),H&&H.c(),l(n,"class","col-lg-3 bold text-lg-right my-auto"),l(y,"type","file"),l(y,"class","custom-file-input"),l(y,"id",x=e[0].name),l($,"type","text"),l($,"class","hidden"),l($,"name",k=e[0].name),l(O,"class","custom-file-label"),l(O,"for",P=e[0].name),l(g,"class","custom-file"),l(g,"dropzone","copy"),l(d,"class","col-lg-6 pt-2 pt-lg-0"),l(t,"class","row px-4 px-lg-3 pb-4")},m(l,i){f(l,t,i),o(t,n),o(n,r),o(n,a),z&&z.m(n,null),o(n,s),o(t,u),o(t,d),o(d,g),o(g,y),e[7](y),o(g,_),o(g,$),h($,e[4]),o(g,j),o(g,O),o(O,q),o(d,L),I&&I.m(d,null),o(d,T),H&&H.m(d,null),M||(U=p($,"input",e[8]),M=!0)},p(e,[t]){1&t&&D!==(D=e[0].label+"")&&b(r,D),e[0].description?z?z.p(e,t):((z=C(e)).c(),z.m(n,s)):z&&(z.d(1),z=null),1&t&&x!==(x=e[0].name)&&l(y,"id",x),1&t&&k!==(k=e[0].name)&&l($,"name",k),16&t&&$.value!==e[4]&&h($,e[4]),8&t&&A!==(A=(e[3]||"Choose file")+"")&&b(q,A),1&t&&P!==(P=e[0].name)&&l(O,"for",P),void 0!==e[2]?I?I.p(e,t):((I=E(e)).c(),I.m(d,T)):I&&(I.d(1),I=null),1&t&&(F=e[0].examples&&Object.keys(e[0].examples).length>0),F?H?H.p(e,t):((H=S(e)).c(),H.m(d,null)):H&&(H.d(1),H=null)},i:m,o:m,d(n){n&&i(t),z&&z.d(),e[7](null),I&&I.d(),H&&H.d(),M=!1,U()}}}function F(e,t,n){let r,o,l,s,{window:i}=t,{args:c}=t;async function u(e,t,n){-1===t.indexOf("://")&&(t=new URL(t,document.baseURI).href),(await k(i,"socket")).emit("download_start",{name:e,url:new URL(t).href,file:n})}return $(async()=>{i.require.config({paths:{"socketio-file-upload":i._config.STATIC_URL+"js/lib/socketio-file-upload/client.min"},shim:{"socketio-file-upload":{exports:"SocketIOFileUpload"}}});const[e,t]=await k(i,["socket","socketio-file-upload"]);await async function(e){e.on("download_queued",(function(e){e.name===c.name&&n(2,o={striped:!0,bg:"primary",progress:0})})),e.on("download_start",(function(e){e.name===c.name&&n(2,o={...o,animated:!0})})),e.on("download_progress",(function(e){e.name===c.name&&(e.total_size<0?n(2,o={...o,progress:25,bg:"warning"}):0===e.total_size?n(2,o={...o,progress:100}):n(2,o={...o,progress:e.chunk*e.chunk_size/e.total_size*100|0}))})),e.on("download_complete",(function(e){e.name===c.name&&(n(2,o={...o,bg:"success",animated:!1,striped:!1,progress:100}),n(3,l=e.filename),n(4,s=e.full_filename))})),e.on("download_error",(function(e){e.name===c.name&&("HTTP Error 404: Not Found"===e.error?n(2,o={progress:100,url:e.url,bg:"danger",error:e.error,striped:!1,animated:!1}):n(2,o={progress:100,url:e.url,bg:"warning",error:e.error,striped:!1,animated:!1}))}))}(e),await async function(e){e.listenOnInput(r),e.addEventListener("start",(function(e){n(2,o={striped:!0,bg:"primary",progress:0})})),e.addEventListener("progress",(function(e){n(2,o={...o,progress:e.bytesLoaded/e.file.size*100|0,animated:!0})})),e.addEventListener("complete",(function(e){n(2,o={progress:100,bg:"success",striped:!1,animated:!1}),n(3,l=e.file.name),n(4,s=e.detail.full_filename)})),e.addEventListener("error",(function(e){console.error(e),n(2,o={progress:100,bg:"danger",error:e.error,striped:!1,animated:!1})}))}(new t(e))}),e.$$set=e=>{"window"in e&&n(6,i=e.window),"args"in e&&n(0,c=e.args)},[c,r,o,l,s,u,i,function(e){a[e?"unshift":"push"](()=>{n(1,r=e)})},function(){s=this.value,n(4,s)},e=>u(c.name,c.examples[e],e)]}return class extends r{constructor(e){var t;super(),_.getElementById("svelte-7t3aq4-style")||((t=c("style")).id="svelte-7t3aq4-style",t.textContent=".progress.svelte-7t3aq4{height:25px;width:100%;background-color:grey}.progress-bar.svelte-7t3aq4{height:100%;background-color:blue}.progress-bar.bg-success.svelte-7t3aq4{height:100%;background-color:green}",o(_.head,t)),d(this,e,F,A,g,{window:6,args:0})}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2stZmxhdC9fcHJlbHVkZSIsIm5vZGVfbW9kdWxlcy9zdmVsdGUvaW50ZXJuYWwvaW5kZXguanMiLCJub2RlX21vZHVsZXMvc3ZlbHRlL2luZGV4LmpzIiwidXRpbHMvZ2V0X3JlcXVpcmUuanMiLCJwcm9maWxlcy9kZWZhdWx0L3N0YXRpYy9qcy9maWVsZHMvRmlsZUZpZWxkLnN2ZWx0ZSJdLCJuYW1lcyI6WyJmIiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImciLCJ3aW5kb3ciLCJnbG9iYWwiLCJzZWxmIiwidGhpcyIsIkZpbGVGaWVsZCIsInN2ZWx0ZSIsIl8kaW50ZXJuYWxfMiIsIm5vb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwicnVuIiwiZm4iLCJibGFua19vYmplY3QiLCJjcmVhdGUiLCJydW5fYWxsIiwiZm5zIiwiZm9yRWFjaCIsImlzX2Z1bmN0aW9uIiwidGhpbmciLCJpc19lbXB0eSIsIm9iaiIsImtleXMiLCJsZW5ndGgiLCJpc19jbGllbnQiLCJyYWYiLCJjYiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIlNldCIsImFwcGVuZCIsInRhcmdldCIsIm5vZGUiLCJhcHBlbmRDaGlsZCIsImluc2VydCIsImFuY2hvciIsImluc2VydEJlZm9yZSIsImRldGFjaCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImVsZW1lbnQiLCJuYW1lIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImRhdGEiLCJjcmVhdGVUZXh0Tm9kZSIsImxpc3RlbiIsImV2ZW50IiwiaGFuZGxlciIsIm9wdGlvbnMiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImF0dHIiLCJhdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJjaGlsZHJlbiIsIkFycmF5IiwiZnJvbSIsImNoaWxkTm9kZXMiLCJjdXN0b21fZXZlbnQiLCJ0eXBlIiwiZGV0YWlsIiwiZSIsImNyZWF0ZUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50Iiwic2V0X2N1cnJlbnRfY29tcG9uZW50IiwiY29tcG9uZW50IiwiY3VycmVudF9jb21wb25lbnQiLCJnZXRfY3VycmVudF9jb21wb25lbnQiLCJFcnJvciIsImRpcnR5X2NvbXBvbmVudHMiLCJiaW5kaW5nX2NhbGxiYWNrcyIsInJlbmRlcl9jYWxsYmFja3MiLCJmbHVzaF9jYWxsYmFja3MiLCJyZXNvbHZlZF9wcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ1cGRhdGVfc2NoZWR1bGVkIiwic2NoZWR1bGVfdXBkYXRlIiwidGhlbiIsImZsdXNoIiwiYWRkX3JlbmRlcl9jYWxsYmFjayIsInB1c2giLCJmbHVzaGluZyIsInNlZW5fY2FsbGJhY2tzIiwiaSIsInVwZGF0ZSIsIiQkIiwicG9wIiwiY2FsbGJhY2siLCJoYXMiLCJhZGQiLCJjbGVhciIsImZyYWdtZW50IiwiYmVmb3JlX3VwZGF0ZSIsImRpcnR5IiwicCIsImN0eCIsImFmdGVyX3VwZGF0ZSIsIm91dHJvaW5nIiwidHJhbnNpdGlvbl9pbiIsImJsb2NrIiwibG9jYWwiLCJkZWxldGUiLCJnbG9iYWxzIiwiZ2xvYmFsVGhpcyIsIm1vdW50X2NvbXBvbmVudCIsImN1c3RvbUVsZW1lbnQiLCJvbl9tb3VudCIsIm9uX2Rlc3Ryb3kiLCJtIiwibmV3X29uX2Rlc3Ryb3kiLCJtYXAiLCJmaWx0ZXIiLCJkZXN0cm95X2NvbXBvbmVudCIsImRldGFjaGluZyIsImQiLCJIVE1MRWxlbWVudCIsIlN2ZWx0ZUNvbXBvbmVudCIsIltvYmplY3QgT2JqZWN0XSIsIiRkZXN0cm95IiwiY2FsbGJhY2tzIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiJCRwcm9wcyIsIiQkc2V0Iiwic2tpcF9ib3VuZCIsIlN2ZWx0ZUNvbXBvbmVudERldiIsIiQkaW5saW5lIiwic3VwZXIiLCJjb25zb2xlIiwid2FybiIsIlN2ZWx0ZUNvbXBvbmVudFR5cGVkIiwiYWZ0ZXJVcGRhdGUiLCJiZWZvcmVVcGRhdGUiLCJjcmVhdGVFdmVudERpc3BhdGNoZXIiLCJzbGljZSIsImNhbGwiLCJkZXN0cm95X2VhY2giLCJpdGVyYXRpb25zIiwiZ2V0Q29udGV4dCIsImtleSIsImNvbnRleHQiLCJnZXQiLCJoYXNDb250ZXh0IiwiaW5pdCIsImluc3RhbmNlIiwiY3JlYXRlX2ZyYWdtZW50Iiwibm90X2VxdWFsIiwicHJvcHMiLCJwYXJlbnRfY29tcG9uZW50IiwiYm91bmQiLCJvbl9kaXNjb25uZWN0IiwiTWFwIiwicmVhZHkiLCJyZXQiLCJyZXN0IiwiZmlsbCIsImh5ZHJhdGUiLCJub2RlcyIsImwiLCJjIiwiaW50cm8iLCJvbkRlc3Ryb3kiLCJvbk1vdW50Iiwic2FmZV9ub3RfZXF1YWwiLCJhIiwiYiIsInNldENvbnRleHQiLCJzZXQiLCJzZXRfZGF0YSIsIndob2xlVGV4dCIsInNldF9pbnB1dF92YWx1ZSIsImlucHV0Iiwic2V0X3N0eWxlIiwiaW1wb3J0YW50Iiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsInNwYWNlIiwidGljayIsInRvZ2dsZV9jbGFzcyIsInRvZ2dsZSIsImNsYXNzTGlzdCIsIl8kc3ZlbHRlXzEiLCJlbnVtZXJhYmxlIiwiXyRnZXRfcmVxdWlyZV80IiwicmVxdWlyZWQiLCJpc0FycmF5IiwicmVqZWN0IiwicmVxdWlyZSIsIl9sZW4iLCJhcmd1bWVudHMiLCJhcmdzIiwiX2tleSIsImRvY3VtZW50XzEiLCJkZWZhdWx0IiwiZ2V0X3JlcXVpcmUiLCJnZXRfZWFjaF9jb250ZXh0IiwibGlzdCIsImNoaWxkX2N0eCIsImdldF9lYWNoX2NvbnRleHRfMSIsImNyZWF0ZV9pZl9ibG9ja183Iiwic3VwIiwic3VwX3RpdGxlX3ZhbHVlIiwidCIsImRlc2NyaXB0aW9uIiwiY3JlYXRlX2lmX2Jsb2NrXzMiLCJkaXYyIiwiZGl2MSIsImRpdjAiLCJkaXYwX2NsYXNzX3ZhbHVlIiwiZGl2MF9hcmlhX3ZhbHVlbm93X3ZhbHVlIiwidDAiLCJ0MSIsImlmX2Jsb2NrMCIsImVycm9yIiwiY3JlYXRlX2lmX2Jsb2NrXzUiLCJpZl9ibG9jazEiLCJ3YXJuaW5nIiwiY3JlYXRlX2lmX2Jsb2NrXzQiLCJiZyIsInByb2dyZXNzIiwic3RyaXBlZCIsImFuaW1hdGVkIiwiZGl2IiwidDIiLCJ0MV92YWx1ZSIsImlmX2Jsb2NrIiwidXJsIiwiY3JlYXRlX2lmX2Jsb2NrXzYiLCJhX2hyZWZfdmFsdWUiLCJiciIsInQ0IiwidDUiLCJ0NiIsInQ1X3ZhbHVlIiwidGV4dENvbnRlbnQiLCJjcmVhdGVfaWZfYmxvY2siLCJkaXY0Iiwic3BhbjAiLCJzdXAwIiwidDMiLCJkaXYzIiwic3BhbjEiLCJzdXAxIiwidDciLCJ0OCIsInNob3dfaWZfMSIsImV4YW1wbGVzIiwic2hvd19pZiIsImNyZWF0ZV9pZl9ibG9ja18yIiwiZWFjaF92YWx1ZV8xIiwiZWFjaF9ibG9ja3NfMSIsImNyZWF0ZV9lYWNoX2Jsb2NrXzEiLCJjcmVhdGVfaWZfYmxvY2tfMSIsImVhY2hfdmFsdWUiLCJlYWNoX2Jsb2NrcyIsImNyZWF0ZV9lYWNoX2Jsb2NrIiwiaW5uZXJIVE1MIiwic3BhbiIsIm1vdW50ZWQiLCJkaXNwb3NlIiwidDBfdmFsdWUiLCJjbGlja19oYW5kbGVyIiwibmV3X2N0eCIsImlucHV0MCIsImlucHV0MF9pZF92YWx1ZSIsImlucHV0MSIsImlucHV0MV9uYW1lX3ZhbHVlIiwibGFiZWwiLCJsYWJlbF9mb3JfdmFsdWUiLCJ0Nl92YWx1ZSIsImlmX2Jsb2NrMiIsIm8iLCIkJHNlbGYiLCIkJGludmFsaWRhdGUiLCJmaWxlRmllbGQiLCJzdGF0ZSIsImZpbGVuYW1lIiwiZnVsbF9maWxlbmFtZSIsImFzeW5jIiwibG9hZF9maWxlIiwiZmlsZSIsIlVSTCIsImJhc2VVUkkiLCJocmVmIiwiZW1pdCIsImNvbmZpZyIsInBhdGhzIiwic29ja2V0aW8tZmlsZS11cGxvYWQiLCJfY29uZmlnIiwiU1RBVElDX1VSTCIsInNoaW0iLCJzb2NrZXQiLCJTb2NrZXRJT0ZpbGVVcGxvYWQiLCJvbiIsImV2dCIsInRvdGFsX3NpemUiLCJjaHVuayIsImNodW5rX3NpemUiLCJzaW9mdSIsImxpc3Rlbk9uSW5wdXQiLCJieXRlc0xvYWRlZCIsInNpemUiLCIkJHZhbHVlIiwiZXhhbXBsZV9uYW1lIiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsImhlYWQiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEdBQUEsR0FBQSxpQkFBQUMsU0FBQSxvQkFBQUMsT0FBQUEsT0FBQUQsUUFBQUQsU0FBQSxHQUFBLG1CQUFBRyxRQUFBQSxPQUFBQyxJQUFBRCxPQUFBLEdBQUFILE9BQUEsQ0FBQSxJQUFBSyxJQUFBQSxFQUFBLG9CQUFBQyxPQUFBQSxPQUFBLG9CQUFBQyxPQUFBQSxPQUFBLG9CQUFBQyxLQUFBQSxLQUFBQyxNQUFBQyxZQUFBTCxFQUFBSyxVQUFBLEtBQUFDLE9BQUFYLEtBQUEsRUFBQSxXQUFBLElBQ0FZLEVBQUEsZ0JDREEsYUFJQSxTQUFTQyxLQUZUQyxPQUFPQyxlQUFlSCxFQUFTLGFBQWMsQ0FBRUksT0FBQSxJQWtCL0MsU0FBU0MsRUFBSUMsR0FDVCxPQUFPQSxJQUVYLFNBQVNDLElBQ0wsT0FBT0wsT0FBT00sT0FBTyxNQUV6QixTQUFTQyxFQUFRQyxHQUNiQSxFQUFJQyxRQUFRTixHQUVoQixTQUFTTyxFQUFZQyxHQUNqQixNQUF3QixtQkFBVkEsRUFRbEIsU0FBU0MsRUFBU0MsR0FDZCxPQUFtQyxJQUE1QmIsT0FBT2MsS0FBS0QsR0FBS0UsT0F1RzVCLE1BS01DLEVBQThCLG9CQUFYeEIsT0FJekJNLEVBQVFtQixJQUFNRCxFQUFZRSxHQUFNQyxzQkFBc0JELEdBQU1uQixFQVM5QyxJQUFJcUIsSUFtQ2xCLFNBQVNDLEVBQU9DLEVBQVFDLEdBQ3BCRCxFQUFPRSxZQUFZRCxHQUV2QixTQUFTRSxFQUFPSCxFQUFRQyxFQUFNRyxHQUMxQkosRUFBT0ssYUFBYUosRUFBTUcsR0FBVSxNQUV4QyxTQUFTRSxFQUFPTCxHQUNaQSxFQUFLTSxXQUFXQyxZQUFZUCxH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R0FBQSxJQUFBa0ksRUFBQS9DLFFBQUFpRSxFQUFBZ0gsZUFBQSwwQkFBQWxJLEVBQUE1SSxFQUFBLFVBQUErUSxHQUFBLHNCQUFBbkksRUFBQTRELFlBQUEsZ05BQUFsTixFQUFBd0ssRUFBQWtILEtBQUFwSSxJQUFBL0IsRUFBQWpKLEtBQUE4QyxFQUFBb0csRUFBQUMsRUFBQWtCLEVBQUEsQ0FBQXhLLE9BQUEsRUFBQW1NLEtBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oZil7aWYodHlwZW9mIGV4cG9ydHM9PT1cIm9iamVjdFwiJiZ0eXBlb2YgbW9kdWxlIT09XCJ1bmRlZmluZWRcIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFtdLGYpfWVsc2V7dmFyIGc7aWYodHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCIpe2c9d2luZG93fWVsc2UgaWYodHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT1cInVuZGVmaW5lZFwiKXtnPXNlbGZ9ZWxzZXtnPXRoaXN9KGcuRmlsZUZpZWxkIHx8IChnLkZpbGVGaWVsZCA9IHt9KSkuc3ZlbHRlID0gZigpfX0pKGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxtb2R1bGUsZXhwb3J0cztcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuZnVuY3Rpb24gbm9vcCgpIHsgfVxuY29uc3QgaWRlbnRpdHkgPSB4ID0+IHg7XG5mdW5jdGlvbiBhc3NpZ24odGFyLCBzcmMpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZm9yIChjb25zdCBrIGluIHNyYylcbiAgICAgICAgdGFyW2tdID0gc3JjW2tdO1xuICAgIHJldHVybiB0YXI7XG59XG5mdW5jdGlvbiBpc19wcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBhZGRfbG9jYXRpb24oZWxlbWVudCwgZmlsZSwgbGluZSwgY29sdW1uLCBjaGFyKSB7XG4gICAgZWxlbWVudC5fX3N2ZWx0ZV9tZXRhID0ge1xuICAgICAgICBsb2M6IHsgZmlsZSwgbGluZSwgY29sdW1uLCBjaGFyIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gcnVuKGZuKSB7XG4gICAgcmV0dXJuIGZuKCk7XG59XG5mdW5jdGlvbiBibGFua19vYmplY3QoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5mdW5jdGlvbiBydW5fYWxsKGZucykge1xuICAgIGZucy5mb3JFYWNoKHJ1bik7XG59XG5mdW5jdGlvbiBpc19mdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBzYWZlX25vdF9lcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGIgfHwgKChhICYmIHR5cGVvZiBhID09PSAnb2JqZWN0JykgfHwgdHlwZW9mIGEgPT09ICdmdW5jdGlvbicpO1xufVxuZnVuY3Rpb24gbm90X2VxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYjtcbn1cbmZ1bmN0aW9uIGlzX2VtcHR5KG9iaikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3N0b3JlKHN0b3JlLCBuYW1lKSB7XG4gICAgaWYgKHN0b3JlICE9IG51bGwgJiYgdHlwZW9mIHN0b3JlLnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCcke25hbWV9JyBpcyBub3QgYSBzdG9yZSB3aXRoIGEgJ3N1YnNjcmliZScgbWV0aG9kYCk7XG4gICAgfVxufVxuZnVuY3Rpb24gc3Vic2NyaWJlKHN0b3JlLCAuLi5jYWxsYmFja3MpIHtcbiAgICBpZiAoc3RvcmUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICB9XG4gICAgY29uc3QgdW5zdWIgPSBzdG9yZS5zdWJzY3JpYmUoLi4uY2FsbGJhY2tzKTtcbiAgICByZXR1cm4gdW5zdWIudW5zdWJzY3JpYmUgPyAoKSA9PiB1bnN1Yi51bnN1YnNjcmliZSgpIDogdW5zdWI7XG59XG5mdW5jdGlvbiBnZXRfc3RvcmVfdmFsdWUoc3RvcmUpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgc3Vic2NyaWJlKHN0b3JlLCBfID0+IHZhbHVlID0gXykoKTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBjb21wb25lbnRfc3Vic2NyaWJlKGNvbXBvbmVudCwgc3RvcmUsIGNhbGxiYWNrKSB7XG4gICAgY29tcG9uZW50LiQkLm9uX2Rlc3Ryb3kucHVzaChzdWJzY3JpYmUoc3RvcmUsIGNhbGxiYWNrKSk7XG59XG5mdW5jdGlvbiBjcmVhdGVfc2xvdChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKSB7XG4gICAgaWYgKGRlZmluaXRpb24pIHtcbiAgICAgICAgY29uc3Qgc2xvdF9jdHggPSBnZXRfc2xvdF9jb250ZXh0KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblswXShzbG90X2N0eCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0X3Nsb3RfY29udGV4dChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKSB7XG4gICAgcmV0dXJuIGRlZmluaXRpb25bMV0gJiYgZm5cbiAgICAgICAgPyBhc3NpZ24oJCRzY29wZS5jdHguc2xpY2UoKSwgZGVmaW5pdGlvblsxXShmbihjdHgpKSlcbiAgICAgICAgOiAkJHNjb3BlLmN0eDtcbn1cbmZ1bmN0aW9uIGdldF9zbG90X2NoYW5nZXMoZGVmaW5pdGlvbiwgJCRzY29wZSwgZGlydHksIGZuKSB7XG4gICAgaWYgKGRlZmluaXRpb25bMl0gJiYgZm4pIHtcbiAgICAgICAgY29uc3QgbGV0cyA9IGRlZmluaXRpb25bMl0oZm4oZGlydHkpKTtcbiAgICAgICAgaWYgKCQkc2NvcGUuZGlydHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxldHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBsZXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29uc3QgbWVyZ2VkID0gW107XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBNYXRoLm1heCgkJHNjb3BlLmRpcnR5Lmxlbmd0aCwgbGV0cy5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIG1lcmdlZFtpXSA9ICQkc2NvcGUuZGlydHlbaV0gfCBsZXRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lcmdlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJCRzY29wZS5kaXJ0eSB8IGxldHM7XG4gICAgfVxuICAgIHJldHVybiAkJHNjb3BlLmRpcnR5O1xufVxuZnVuY3Rpb24gdXBkYXRlX3Nsb3Qoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGRpcnR5LCBnZXRfc2xvdF9jaGFuZ2VzX2ZuLCBnZXRfc2xvdF9jb250ZXh0X2ZuKSB7XG4gICAgY29uc3Qgc2xvdF9jaGFuZ2VzID0gZ2V0X3Nsb3RfY2hhbmdlcyhzbG90X2RlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBnZXRfc2xvdF9jaGFuZ2VzX2ZuKTtcbiAgICBpZiAoc2xvdF9jaGFuZ2VzKSB7XG4gICAgICAgIGNvbnN0IHNsb3RfY29udGV4dCA9IGdldF9zbG90X2NvbnRleHQoc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGdldF9zbG90X2NvbnRleHRfZm4pO1xuICAgICAgICBzbG90LnAoc2xvdF9jb250ZXh0LCBzbG90X2NoYW5nZXMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZV9zbG90X3NwcmVhZChzbG90LCBzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZGlydHksIGdldF9zbG90X2NoYW5nZXNfZm4sIGdldF9zbG90X3NwcmVhZF9jaGFuZ2VzX2ZuLCBnZXRfc2xvdF9jb250ZXh0X2ZuKSB7XG4gICAgY29uc3Qgc2xvdF9jaGFuZ2VzID0gZ2V0X3Nsb3Rfc3ByZWFkX2NoYW5nZXNfZm4oZGlydHkpIHwgZ2V0X3Nsb3RfY2hhbmdlcyhzbG90X2RlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBnZXRfc2xvdF9jaGFuZ2VzX2ZuKTtcbiAgICBpZiAoc2xvdF9jaGFuZ2VzKSB7XG4gICAgICAgIGNvbnN0IHNsb3RfY29udGV4dCA9IGdldF9zbG90X2NvbnRleHQoc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGdldF9zbG90X2NvbnRleHRfZm4pO1xuICAgICAgICBzbG90LnAoc2xvdF9jb250ZXh0LCBzbG90X2NoYW5nZXMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMocHJvcHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gcHJvcHMpXG4gICAgICAgIGlmIChrWzBdICE9PSAnJCcpXG4gICAgICAgICAgICByZXN1bHRba10gPSBwcm9wc1trXTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY29tcHV0ZV9yZXN0X3Byb3BzKHByb3BzLCBrZXlzKSB7XG4gICAgY29uc3QgcmVzdCA9IHt9O1xuICAgIGtleXMgPSBuZXcgU2V0KGtleXMpO1xuICAgIGZvciAoY29uc3QgayBpbiBwcm9wcylcbiAgICAgICAgaWYgKCFrZXlzLmhhcyhrKSAmJiBrWzBdICE9PSAnJCcpXG4gICAgICAgICAgICByZXN0W2tdID0gcHJvcHNba107XG4gICAgcmV0dXJuIHJlc3Q7XG59XG5mdW5jdGlvbiBjb21wdXRlX3Nsb3RzKHNsb3RzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2xvdHMpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gb25jZShmbikge1xuICAgIGxldCByYW4gPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHJhbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgICAgZm4uY2FsbCh0aGlzLCAuLi5hcmdzKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gbnVsbF90b19lbXB0eSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNldF9zdG9yZV92YWx1ZShzdG9yZSwgcmV0LCB2YWx1ZSA9IHJldCkge1xuICAgIHN0b3JlLnNldCh2YWx1ZSk7XG4gICAgcmV0dXJuIHJldDtcbn1cbmNvbnN0IGhhc19wcm9wID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG5mdW5jdGlvbiBhY3Rpb25fZGVzdHJveWVyKGFjdGlvbl9yZXN1bHQpIHtcbiAgICByZXR1cm4gYWN0aW9uX3Jlc3VsdCAmJiBpc19mdW5jdGlvbihhY3Rpb25fcmVzdWx0LmRlc3Ryb3kpID8gYWN0aW9uX3Jlc3VsdC5kZXN0cm95IDogbm9vcDtcbn1cblxuY29uc3QgaXNfY2xpZW50ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5leHBvcnRzLm5vdyA9IGlzX2NsaWVudFxuICAgID8gKCkgPT4gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpXG4gICAgOiAoKSA9PiBEYXRlLm5vdygpO1xuZXhwb3J0cy5yYWYgPSBpc19jbGllbnQgPyBjYiA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpIDogbm9vcDtcbi8vIHVzZWQgaW50ZXJuYWxseSBmb3IgdGVzdGluZ1xuZnVuY3Rpb24gc2V0X25vdyhmbikge1xuICAgIGV4cG9ydHMubm93ID0gZm47XG59XG5mdW5jdGlvbiBzZXRfcmFmKGZuKSB7XG4gICAgZXhwb3J0cy5yYWYgPSBmbjtcbn1cblxuY29uc3QgdGFza3MgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBydW5fdGFza3Mobm93KSB7XG4gICAgdGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgaWYgKCF0YXNrLmMobm93KSkge1xuICAgICAgICAgICAgdGFza3MuZGVsZXRlKHRhc2spO1xuICAgICAgICAgICAgdGFzay5mKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodGFza3Muc2l6ZSAhPT0gMClcbiAgICAgICAgZXhwb3J0cy5yYWYocnVuX3Rhc2tzKTtcbn1cbi8qKlxuICogRm9yIHRlc3RpbmcgcHVycG9zZXMgb25seSFcbiAqL1xuZnVuY3Rpb24gY2xlYXJfbG9vcHMoKSB7XG4gICAgdGFza3MuY2xlYXIoKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB0YXNrIHRoYXQgcnVucyBvbiBlYWNoIHJhZiBmcmFtZVxuICogdW50aWwgaXQgcmV0dXJucyBhIGZhbHN5IHZhbHVlIG9yIGlzIGFib3J0ZWRcbiAqL1xuZnVuY3Rpb24gbG9vcChjYWxsYmFjaykge1xuICAgIGxldCB0YXNrO1xuICAgIGlmICh0YXNrcy5zaXplID09PSAwKVxuICAgICAgICBleHBvcnRzLnJhZihydW5fdGFza3MpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByb21pc2U6IG5ldyBQcm9taXNlKGZ1bGZpbGwgPT4ge1xuICAgICAgICAgICAgdGFza3MuYWRkKHRhc2sgPSB7IGM6IGNhbGxiYWNrLCBmOiBmdWxmaWxsIH0pO1xuICAgICAgICB9KSxcbiAgICAgICAgYWJvcnQoKSB7XG4gICAgICAgICAgICB0YXNrcy5kZWxldGUodGFzayk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBhcHBlbmQodGFyZ2V0LCBub2RlKSB7XG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xufVxuZnVuY3Rpb24gaW5zZXJ0KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgdGFyZ2V0Lmluc2VydEJlZm9yZShub2RlLCBhbmNob3IgfHwgbnVsbCk7XG59XG5mdW5jdGlvbiBkZXRhY2gobm9kZSkge1xuICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfZWFjaChpdGVyYXRpb25zLCBkZXRhY2hpbmcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGl0ZXJhdGlvbnNbaV0pXG4gICAgICAgICAgICBpdGVyYXRpb25zW2ldLmQoZGV0YWNoaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRfaXMobmFtZSwgaXMpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lLCB7IGlzIH0pO1xufVxuZnVuY3Rpb24gb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcyhvYmosIGV4Y2x1ZGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG4gICAgICAgIGlmIChoYXNfcHJvcChvYmosIGspXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAmJiBleGNsdWRlLmluZGV4T2YoaykgPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0YXJnZXRba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIHN2Z19lbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIG5hbWUpO1xufVxuZnVuY3Rpb24gdGV4dChkYXRhKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRhdGEpO1xufVxuZnVuY3Rpb24gc3BhY2UoKSB7XG4gICAgcmV0dXJuIHRleHQoJyAnKTtcbn1cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICAgIHJldHVybiB0ZXh0KCcnKTtcbn1cbmZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBwcmV2ZW50X2RlZmF1bHQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzdG9wX3Byb3BhZ2F0aW9uKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNlbGYoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcylcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBhdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICBlbHNlIGlmIChub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpICE9PSB2YWx1ZSlcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBzZXRfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMobm9kZS5fX3Byb3RvX18pO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgbm9kZS5zdHlsZS5jc3NUZXh0ID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ19fdmFsdWUnKSB7XG4gICAgICAgICAgICBub2RlLnZhbHVlID0gbm9kZVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlc2NyaXB0b3JzW2tleV0gJiYgZGVzY3JpcHRvcnNba2V5XS5zZXQpIHtcbiAgICAgICAgICAgIG5vZGVba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N2Z19hdHRyaWJ1dGVzKG5vZGUsIGF0dHJpYnV0ZXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9jdXN0b21fZWxlbWVudF9kYXRhKG5vZGUsIHByb3AsIHZhbHVlKSB7XG4gICAgaWYgKHByb3AgaW4gbm9kZSkge1xuICAgICAgICBub2RlW3Byb3BdID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhdHRyKG5vZGUsIHByb3AsIHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiB4bGlua19hdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRfYmluZGluZ19ncm91cF92YWx1ZShncm91cCwgX192YWx1ZSwgY2hlY2tlZCkge1xuICAgIGNvbnN0IHZhbHVlID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGdyb3VwW2ldLmNoZWNrZWQpXG4gICAgICAgICAgICB2YWx1ZS5hZGQoZ3JvdXBbaV0uX192YWx1ZSk7XG4gICAgfVxuICAgIGlmICghY2hlY2tlZCkge1xuICAgICAgICB2YWx1ZS5kZWxldGUoX192YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHRvX251bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gJycgPyBudWxsIDogK3ZhbHVlO1xufVxuZnVuY3Rpb24gdGltZV9yYW5nZXNfdG9fYXJyYXkocmFuZ2VzKSB7XG4gICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnJheS5wdXNoKHsgc3RhcnQ6IHJhbmdlcy5zdGFydChpKSwgZW5kOiByYW5nZXMuZW5kKGkpIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5mdW5jdGlvbiBjaGlsZHJlbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudC5jaGlsZE5vZGVzKTtcbn1cbmZ1bmN0aW9uIGNsYWltX2VsZW1lbnQobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIHN2Zykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5ub2RlTmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgbGV0IGogPSAwO1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlID0gW107XG4gICAgICAgICAgICB3aGlsZSAoaiA8IG5vZGUuYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBub2RlLmF0dHJpYnV0ZXNbaisrXTtcbiAgICAgICAgICAgICAgICBpZiAoIWF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZS5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHJlbW92ZS5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKHJlbW92ZVtrXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZXMuc3BsaWNlKGksIDEpWzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdmcgPyBzdmdfZWxlbWVudChuYW1lKSA6IGVsZW1lbnQobmFtZSk7XG59XG5mdW5jdGlvbiBjbGFpbV90ZXh0KG5vZGVzLCBkYXRhKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICAgICAgICBub2RlLmRhdGEgPSAnJyArIGRhdGE7XG4gICAgICAgICAgICByZXR1cm4gbm9kZXMuc3BsaWNlKGksIDEpWzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZXh0KGRhdGEpO1xufVxuZnVuY3Rpb24gY2xhaW1fc3BhY2Uobm9kZXMpIHtcbiAgICByZXR1cm4gY2xhaW1fdGV4dChub2RlcywgJyAnKTtcbn1cbmZ1bmN0aW9uIHNldF9kYXRhKHRleHQsIGRhdGEpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICAgIGlmICh0ZXh0Lndob2xlVGV4dCAhPT0gZGF0YSlcbiAgICAgICAgdGV4dC5kYXRhID0gZGF0YTtcbn1cbmZ1bmN0aW9uIHNldF9pbnB1dF92YWx1ZShpbnB1dCwgdmFsdWUpIHtcbiAgICBpbnB1dC52YWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xufVxuZnVuY3Rpb24gc2V0X2lucHV0X3R5cGUoaW5wdXQsIHR5cGUpIHtcbiAgICB0cnkge1xuICAgICAgICBpbnB1dC50eXBlID0gdHlwZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9zdHlsZShub2RlLCBrZXksIHZhbHVlLCBpbXBvcnRhbnQpIHtcbiAgICBub2RlLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUsIGltcG9ydGFudCA/ICdpbXBvcnRhbnQnIDogJycpO1xufVxuZnVuY3Rpb24gc2VsZWN0X29wdGlvbihzZWxlY3QsIHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcbiAgICAgICAgaWYgKG9wdGlvbi5fX3ZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHNlbGVjdF9vcHRpb25zKHNlbGVjdCwgdmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHNlbGVjdC5vcHRpb25zW2ldO1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB+dmFsdWUuaW5kZXhPZihvcHRpb24uX192YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2VsZWN0X3ZhbHVlKHNlbGVjdCkge1xuICAgIGNvbnN0IHNlbGVjdGVkX29wdGlvbiA9IHNlbGVjdC5xdWVyeVNlbGVjdG9yKCc6Y2hlY2tlZCcpIHx8IHNlbGVjdC5vcHRpb25zWzBdO1xuICAgIHJldHVybiBzZWxlY3RlZF9vcHRpb24gJiYgc2VsZWN0ZWRfb3B0aW9uLl9fdmFsdWU7XG59XG5mdW5jdGlvbiBzZWxlY3RfbXVsdGlwbGVfdmFsdWUoc2VsZWN0KSB7XG4gICAgcmV0dXJuIFtdLm1hcC5jYWxsKHNlbGVjdC5xdWVyeVNlbGVjdG9yQWxsKCc6Y2hlY2tlZCcpLCBvcHRpb24gPT4gb3B0aW9uLl9fdmFsdWUpO1xufVxuLy8gdW5mb3J0dW5hdGVseSB0aGlzIGNhbid0IGJlIGEgY29uc3RhbnQgYXMgdGhhdCB3b3VsZG4ndCBiZSB0cmVlLXNoYWtlYWJsZVxuLy8gc28gd2UgY2FjaGUgdGhlIHJlc3VsdCBpbnN0ZWFkXG5sZXQgY3Jvc3NvcmlnaW47XG5mdW5jdGlvbiBpc19jcm9zc29yaWdpbigpIHtcbiAgICBpZiAoY3Jvc3NvcmlnaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjcm9zc29yaWdpbiA9IGZhbHNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICB2b2lkIHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjcm9zc29yaWdpbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNyb3Nzb3JpZ2luO1xufVxuZnVuY3Rpb24gYWRkX3Jlc2l6ZV9saXN0ZW5lcihub2RlLCBmbikge1xuICAgIGNvbnN0IGNvbXB1dGVkX3N0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBpZiAoY29tcHV0ZWRfc3R5bGUucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgICAgIG5vZGUuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgIH1cbiAgICBjb25zdCBpZnJhbWUgPSBlbGVtZW50KCdpZnJhbWUnKTtcbiAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCdzdHlsZScsICdkaXNwbGF5OiBibG9jazsgcG9zaXRpb246IGFic29sdXRlOyB0b3A6IDA7IGxlZnQ6IDA7IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7ICcgK1xuICAgICAgICAnb3ZlcmZsb3c6IGhpZGRlbjsgYm9yZGVyOiAwOyBvcGFjaXR5OiAwOyBwb2ludGVyLWV2ZW50czogbm9uZTsgei1pbmRleDogLTE7Jyk7XG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgIGlmcmFtZS50YWJJbmRleCA9IC0xO1xuICAgIGNvbnN0IGNyb3Nzb3JpZ2luID0gaXNfY3Jvc3NvcmlnaW4oKTtcbiAgICBsZXQgdW5zdWJzY3JpYmU7XG4gICAgaWYgKGNyb3Nzb3JpZ2luKSB7XG4gICAgICAgIGlmcmFtZS5zcmMgPSBcImRhdGE6dGV4dC9odG1sLDxzY3JpcHQ+b25yZXNpemU9ZnVuY3Rpb24oKXtwYXJlbnQucG9zdE1lc3NhZ2UoMCwnKicpfTwvc2NyaXB0PlwiO1xuICAgICAgICB1bnN1YnNjcmliZSA9IGxpc3Rlbih3aW5kb3csICdtZXNzYWdlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBpZnJhbWUuY29udGVudFdpbmRvdylcbiAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmcmFtZS5zcmMgPSAnYWJvdXQ6YmxhbmsnO1xuICAgICAgICBpZnJhbWUub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmUgPSBsaXN0ZW4oaWZyYW1lLmNvbnRlbnRXaW5kb3csICdyZXNpemUnLCBmbik7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGFwcGVuZChub2RlLCBpZnJhbWUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChjcm9zc29yaWdpbikge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh1bnN1YnNjcmliZSAmJiBpZnJhbWUuY29udGVudFdpbmRvdykge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICBkZXRhY2goaWZyYW1lKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gdG9nZ2xlX2NsYXNzKGVsZW1lbnQsIG5hbWUsIHRvZ2dsZSkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0W3RvZ2dsZSA/ICdhZGQnIDogJ3JlbW92ZSddKG5hbWUpO1xufVxuZnVuY3Rpb24gY3VzdG9tX2V2ZW50KHR5cGUsIGRldGFpbCkge1xuICAgIGNvbnN0IGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICBlLmluaXRDdXN0b21FdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UsIGRldGFpbCk7XG4gICAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBxdWVyeV9zZWxlY3Rvcl9hbGwoc2VsZWN0b3IsIHBhcmVudCA9IGRvY3VtZW50LmJvZHkpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufVxuY2xhc3MgSHRtbFRhZyB7XG4gICAgY29uc3RydWN0b3IoYW5jaG9yID0gbnVsbCkge1xuICAgICAgICB0aGlzLmEgPSBhbmNob3I7XG4gICAgICAgIHRoaXMuZSA9IHRoaXMubiA9IG51bGw7XG4gICAgfVxuICAgIG0oaHRtbCwgdGFyZ2V0LCBhbmNob3IgPSBudWxsKSB7XG4gICAgICAgIGlmICghdGhpcy5lKSB7XG4gICAgICAgICAgICB0aGlzLmUgPSBlbGVtZW50KHRhcmdldC5ub2RlTmFtZSk7XG4gICAgICAgICAgICB0aGlzLnQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLmgoaHRtbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pKGFuY2hvcik7XG4gICAgfVxuICAgIGgoaHRtbCkge1xuICAgICAgICB0aGlzLmUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgdGhpcy5uID0gQXJyYXkuZnJvbSh0aGlzLmUuY2hpbGROb2Rlcyk7XG4gICAgfVxuICAgIGkoYW5jaG9yKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpbnNlcnQodGhpcy50LCB0aGlzLm5baV0sIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcChodG1sKSB7XG4gICAgICAgIHRoaXMuZCgpO1xuICAgICAgICB0aGlzLmgoaHRtbCk7XG4gICAgICAgIHRoaXMuaSh0aGlzLmEpO1xuICAgIH1cbiAgICBkKCkge1xuICAgICAgICB0aGlzLm4uZm9yRWFjaChkZXRhY2gpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGF0dHJpYnV0ZV90b19vYmplY3QoYXR0cmlidXRlcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmVzdWx0W2F0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldF9jdXN0b21fZWxlbWVudHNfc2xvdHMoZWxlbWVudCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGVsZW1lbnQuY2hpbGROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgIHJlc3VsdFtub2RlLnNsb3QgfHwgJ2RlZmF1bHQnXSA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuY29uc3QgYWN0aXZlX2RvY3MgPSBuZXcgU2V0KCk7XG5sZXQgYWN0aXZlID0gMDtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJrc2t5YXBwL3N0cmluZy1oYXNoL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG5mdW5jdGlvbiBoYXNoKHN0cikge1xuICAgIGxldCBoYXNoID0gNTM4MTtcbiAgICBsZXQgaSA9IHN0ci5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSlcbiAgICAgICAgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpIF4gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGhhc2ggPj4+IDA7XG59XG5mdW5jdGlvbiBjcmVhdGVfcnVsZShub2RlLCBhLCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2UsIGZuLCB1aWQgPSAwKSB7XG4gICAgY29uc3Qgc3RlcCA9IDE2LjY2NiAvIGR1cmF0aW9uO1xuICAgIGxldCBrZXlmcmFtZXMgPSAne1xcbic7XG4gICAgZm9yIChsZXQgcCA9IDA7IHAgPD0gMTsgcCArPSBzdGVwKSB7XG4gICAgICAgIGNvbnN0IHQgPSBhICsgKGIgLSBhKSAqIGVhc2UocCk7XG4gICAgICAgIGtleWZyYW1lcyArPSBwICogMTAwICsgYCV7JHtmbih0LCAxIC0gdCl9fVxcbmA7XG4gICAgfVxuICAgIGNvbnN0IHJ1bGUgPSBrZXlmcmFtZXMgKyBgMTAwJSB7JHtmbihiLCAxIC0gYil9fVxcbn1gO1xuICAgIGNvbnN0IG5hbWUgPSBgX19zdmVsdGVfJHtoYXNoKHJ1bGUpfV8ke3VpZH1gO1xuICAgIGNvbnN0IGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICBhY3RpdmVfZG9jcy5hZGQoZG9jKTtcbiAgICBjb25zdCBzdHlsZXNoZWV0ID0gZG9jLl9fc3ZlbHRlX3N0eWxlc2hlZXQgfHwgKGRvYy5fX3N2ZWx0ZV9zdHlsZXNoZWV0ID0gZG9jLmhlYWQuYXBwZW5kQ2hpbGQoZWxlbWVudCgnc3R5bGUnKSkuc2hlZXQpO1xuICAgIGNvbnN0IGN1cnJlbnRfcnVsZXMgPSBkb2MuX19zdmVsdGVfcnVsZXMgfHwgKGRvYy5fX3N2ZWx0ZV9ydWxlcyA9IHt9KTtcbiAgICBpZiAoIWN1cnJlbnRfcnVsZXNbbmFtZV0pIHtcbiAgICAgICAgY3VycmVudF9ydWxlc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIHN0eWxlc2hlZXQuaW5zZXJ0UnVsZShgQGtleWZyYW1lcyAke25hbWV9ICR7cnVsZX1gLCBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbiA9IG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnO1xuICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gYCR7YW5pbWF0aW9uID8gYCR7YW5pbWF0aW9ufSwgYCA6ICcnfSR7bmFtZX0gJHtkdXJhdGlvbn1tcyBsaW5lYXIgJHtkZWxheX1tcyAxIGJvdGhgO1xuICAgIGFjdGl2ZSArPSAxO1xuICAgIHJldHVybiBuYW1lO1xufVxuZnVuY3Rpb24gZGVsZXRlX3J1bGUobm9kZSwgbmFtZSkge1xuICAgIGNvbnN0IHByZXZpb3VzID0gKG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgICBjb25zdCBuZXh0ID0gcHJldmlvdXMuZmlsdGVyKG5hbWVcbiAgICAgICAgPyBhbmltID0+IGFuaW0uaW5kZXhPZihuYW1lKSA8IDAgLy8gcmVtb3ZlIHNwZWNpZmljIGFuaW1hdGlvblxuICAgICAgICA6IGFuaW0gPT4gYW5pbS5pbmRleE9mKCdfX3N2ZWx0ZScpID09PSAtMSAvLyByZW1vdmUgYWxsIFN2ZWx0ZSBhbmltYXRpb25zXG4gICAgKTtcbiAgICBjb25zdCBkZWxldGVkID0gcHJldmlvdXMubGVuZ3RoIC0gbmV4dC5sZW5ndGg7XG4gICAgaWYgKGRlbGV0ZWQpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5hbmltYXRpb24gPSBuZXh0LmpvaW4oJywgJyk7XG4gICAgICAgIGFjdGl2ZSAtPSBkZWxldGVkO1xuICAgICAgICBpZiAoIWFjdGl2ZSlcbiAgICAgICAgICAgIGNsZWFyX3J1bGVzKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xlYXJfcnVsZXMoKSB7XG4gICAgZXhwb3J0cy5yYWYoKCkgPT4ge1xuICAgICAgICBpZiAoYWN0aXZlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBhY3RpdmVfZG9jcy5mb3JFYWNoKGRvYyA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdHlsZXNoZWV0ID0gZG9jLl9fc3ZlbHRlX3N0eWxlc2hlZXQ7XG4gICAgICAgICAgICBsZXQgaSA9IHN0eWxlc2hlZXQuY3NzUnVsZXMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKGktLSlcbiAgICAgICAgICAgICAgICBzdHlsZXNoZWV0LmRlbGV0ZVJ1bGUoaSk7XG4gICAgICAgICAgICBkb2MuX19zdmVsdGVfcnVsZXMgPSB7fTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFjdGl2ZV9kb2NzLmNsZWFyKCk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZV9hbmltYXRpb24obm9kZSwgZnJvbSwgZm4sIHBhcmFtcykge1xuICAgIGlmICghZnJvbSlcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgY29uc3QgdG8gPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChmcm9tLmxlZnQgPT09IHRvLmxlZnQgJiYgZnJvbS5yaWdodCA9PT0gdG8ucmlnaHQgJiYgZnJvbS50b3AgPT09IHRvLnRvcCAmJiBmcm9tLmJvdHRvbSA9PT0gdG8uYm90dG9tKVxuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCBcbiAgICAvLyBAdHMtaWdub3JlIHRvZG86IHNob3VsZCB0aGlzIGJlIHNlcGFyYXRlZCBmcm9tIGRlc3RydWN0dXJpbmc/IE9yIHN0YXJ0L2VuZCBhZGRlZCB0byBwdWJsaWMgYXBpIGFuZCBkb2N1bWVudGF0aW9uP1xuICAgIHN0YXJ0OiBzdGFydF90aW1lID0gZXhwb3J0cy5ub3coKSArIGRlbGF5LCBcbiAgICAvLyBAdHMtaWdub3JlIHRvZG86XG4gICAgZW5kID0gc3RhcnRfdGltZSArIGR1cmF0aW9uLCB0aWNrID0gbm9vcCwgY3NzIH0gPSBmbihub2RlLCB7IGZyb20sIHRvIH0sIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSB0cnVlO1xuICAgIGxldCBzdGFydGVkID0gZmFsc2U7XG4gICAgbGV0IG5hbWU7XG4gICAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAwLCAxLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlbGF5KSB7XG4gICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgICBpZiAoY3NzKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgbmFtZSk7XG4gICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgbG9vcChub3cgPT4ge1xuICAgICAgICBpZiAoIXN0YXJ0ZWQgJiYgbm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydGVkICYmIG5vdyA+PSBlbmQpIHtcbiAgICAgICAgICAgIHRpY2soMSwgMCk7XG4gICAgICAgICAgICBzdG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFydW5uaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSBub3cgLSBzdGFydF90aW1lO1xuICAgICAgICAgICAgY29uc3QgdCA9IDAgKyAxICogZWFzaW5nKHAgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICBzdGFydCgpO1xuICAgIHRpY2soMCwgMSk7XG4gICAgcmV0dXJuIHN0b3A7XG59XG5mdW5jdGlvbiBmaXhfcG9zaXRpb24obm9kZSkge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBpZiAoc3R5bGUucG9zaXRpb24gIT09ICdhYnNvbHV0ZScgJiYgc3R5bGUucG9zaXRpb24gIT09ICdmaXhlZCcpIHtcbiAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBzdHlsZTtcbiAgICAgICAgY29uc3QgYSA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIG5vZGUuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICBub2RlLnN0eWxlLndpZHRoID0gd2lkdGg7XG4gICAgICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBhZGRfdHJhbnNmb3JtKG5vZGUsIGEpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZF90cmFuc2Zvcm0obm9kZSwgYSkge1xuICAgIGNvbnN0IGIgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChhLmxlZnQgIT09IGIubGVmdCB8fCBhLnRvcCAhPT0gYi50b3ApIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBzdHlsZS50cmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogc3R5bGUudHJhbnNmb3JtO1xuICAgICAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IGAke3RyYW5zZm9ybX0gdHJhbnNsYXRlKCR7YS5sZWZ0IC0gYi5sZWZ0fXB4LCAke2EudG9wIC0gYi50b3B9cHgpYDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpIHtcbiAgICBleHBvcnRzLmN1cnJlbnRfY29tcG9uZW50ID0gY29tcG9uZW50O1xufVxuZnVuY3Rpb24gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkge1xuICAgIGlmICghZXhwb3J0cy5jdXJyZW50X2NvbXBvbmVudClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGdW5jdGlvbiBjYWxsZWQgb3V0c2lkZSBjb21wb25lbnQgaW5pdGlhbGl6YXRpb24nKTtcbiAgICByZXR1cm4gZXhwb3J0cy5jdXJyZW50X2NvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGJlZm9yZVVwZGF0ZShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmJlZm9yZV91cGRhdGUucHVzaChmbik7XG59XG5mdW5jdGlvbiBvbk1vdW50KGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fbW91bnQucHVzaChmbik7XG59XG5mdW5jdGlvbiBhZnRlclVwZGF0ZShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmFmdGVyX3VwZGF0ZS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIG9uRGVzdHJveShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX2Rlc3Ryb3kucHVzaChmbik7XG59XG5mdW5jdGlvbiBjcmVhdGVFdmVudERpc3BhdGNoZXIoKSB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCk7XG4gICAgcmV0dXJuICh0eXBlLCBkZXRhaWwpID0+IHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gY29tcG9uZW50LiQkLmNhbGxiYWNrc1t0eXBlXTtcbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAgICAgLy8gVE9ETyBhcmUgdGhlcmUgc2l0dWF0aW9ucyB3aGVyZSBldmVudHMgY291bGQgYmUgZGlzcGF0Y2hlZFxuICAgICAgICAgICAgLy8gaW4gYSBzZXJ2ZXIgKG5vbi1ET00pIGVudmlyb25tZW50P1xuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBjdXN0b21fZXZlbnQodHlwZSwgZGV0YWlsKTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5zbGljZSgpLmZvckVhY2goZm4gPT4ge1xuICAgICAgICAgICAgICAgIGZuLmNhbGwoY29tcG9uZW50LCBldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBzZXRDb250ZXh0KGtleSwgY29udGV4dCkge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuc2V0KGtleSwgY29udGV4dCk7XG59XG5mdW5jdGlvbiBnZXRDb250ZXh0KGtleSkge1xuICAgIHJldHVybiBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5jb250ZXh0LmdldChrZXkpO1xufVxuZnVuY3Rpb24gaGFzQ29udGV4dChrZXkpIHtcbiAgICByZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5oYXMoa2V5KTtcbn1cbi8vIFRPRE8gZmlndXJlIG91dCBpZiB3ZSBzdGlsbCB3YW50IHRvIHN1cHBvcnRcbi8vIHNob3J0aGFuZCBldmVudHMsIG9yIGlmIHdlIHdhbnQgdG8gaW1wbGVtZW50XG4vLyBhIHJlYWwgYnViYmxpbmcgbWVjaGFuaXNtXG5mdW5jdGlvbiBidWJibGUoY29tcG9uZW50LCBldmVudCkge1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IGNvbXBvbmVudC4kJC5jYWxsYmFja3NbZXZlbnQudHlwZV07XG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICBjYWxsYmFja3Muc2xpY2UoKS5mb3JFYWNoKGZuID0+IGZuKGV2ZW50KSk7XG4gICAgfVxufVxuXG5jb25zdCBkaXJ0eV9jb21wb25lbnRzID0gW107XG5jb25zdCBpbnRyb3MgPSB7IGVuYWJsZWQ6IGZhbHNlIH07XG5jb25zdCBiaW5kaW5nX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgcmVuZGVyX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgZmx1c2hfY2FsbGJhY2tzID0gW107XG5jb25zdCByZXNvbHZlZF9wcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5sZXQgdXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gc2NoZWR1bGVfdXBkYXRlKCkge1xuICAgIGlmICghdXBkYXRlX3NjaGVkdWxlZCkge1xuICAgICAgICB1cGRhdGVfc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgcmVzb2x2ZWRfcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0aWNrKCkge1xuICAgIHNjaGVkdWxlX3VwZGF0ZSgpO1xuICAgIHJldHVybiByZXNvbHZlZF9wcm9taXNlO1xufVxuZnVuY3Rpb24gYWRkX3JlbmRlcl9jYWxsYmFjayhmbikge1xuICAgIHJlbmRlcl9jYWxsYmFja3MucHVzaChmbik7XG59XG5mdW5jdGlvbiBhZGRfZmx1c2hfY2FsbGJhY2soZm4pIHtcbiAgICBmbHVzaF9jYWxsYmFja3MucHVzaChmbik7XG59XG5sZXQgZmx1c2hpbmcgPSBmYWxzZTtcbmNvbnN0IHNlZW5fY2FsbGJhY2tzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgaWYgKGZsdXNoaW5nKVxuICAgICAgICByZXR1cm47XG4gICAgZmx1c2hpbmcgPSB0cnVlO1xuICAgIGRvIHtcbiAgICAgICAgLy8gZmlyc3QsIGNhbGwgYmVmb3JlVXBkYXRlIGZ1bmN0aW9uc1xuICAgICAgICAvLyBhbmQgdXBkYXRlIGNvbXBvbmVudHNcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJ0eV9jb21wb25lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBkaXJ0eV9jb21wb25lbnRzW2ldO1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoY29tcG9uZW50LiQkKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgIGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoID0gMDtcbiAgICAgICAgd2hpbGUgKGJpbmRpbmdfY2FsbGJhY2tzLmxlbmd0aClcbiAgICAgICAgICAgIGJpbmRpbmdfY2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgICAgIC8vIHRoZW4sIG9uY2UgY29tcG9uZW50cyBhcmUgdXBkYXRlZCwgY2FsbFxuICAgICAgICAvLyBhZnRlclVwZGF0ZSBmdW5jdGlvbnMuIFRoaXMgbWF5IGNhdXNlXG4gICAgICAgIC8vIHN1YnNlcXVlbnQgdXBkYXRlcy4uLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlcl9jYWxsYmFja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gcmVuZGVyX2NhbGxiYWNrc1tpXTtcbiAgICAgICAgICAgIGlmICghc2Vlbl9jYWxsYmFja3MuaGFzKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgICAgIC8vIC4uLnNvIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgbG9vcHNcbiAgICAgICAgICAgICAgICBzZWVuX2NhbGxiYWNrcy5hZGQoY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyX2NhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgIH0gd2hpbGUgKGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoKTtcbiAgICB3aGlsZSAoZmx1c2hfY2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICBmbHVzaF9jYWxsYmFja3MucG9wKCkoKTtcbiAgICB9XG4gICAgdXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIGZsdXNoaW5nID0gZmFsc2U7XG4gICAgc2Vlbl9jYWxsYmFja3MuY2xlYXIoKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZSgkJCkge1xuICAgIGlmICgkJC5mcmFnbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAkJC51cGRhdGUoKTtcbiAgICAgICAgcnVuX2FsbCgkJC5iZWZvcmVfdXBkYXRlKTtcbiAgICAgICAgY29uc3QgZGlydHkgPSAkJC5kaXJ0eTtcbiAgICAgICAgJCQuZGlydHkgPSBbLTFdO1xuICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5wKCQkLmN0eCwgZGlydHkpO1xuICAgICAgICAkJC5hZnRlcl91cGRhdGUuZm9yRWFjaChhZGRfcmVuZGVyX2NhbGxiYWNrKTtcbiAgICB9XG59XG5cbmxldCBwcm9taXNlO1xuZnVuY3Rpb24gd2FpdCgpIHtcbiAgICBpZiAoIXByb21pc2UpIHtcbiAgICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcHJvbWlzZSA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoKG5vZGUsIGRpcmVjdGlvbiwga2luZCkge1xuICAgIG5vZGUuZGlzcGF0Y2hFdmVudChjdXN0b21fZXZlbnQoYCR7ZGlyZWN0aW9uID8gJ2ludHJvJyA6ICdvdXRybyd9JHtraW5kfWApKTtcbn1cbmNvbnN0IG91dHJvaW5nID0gbmV3IFNldCgpO1xubGV0IG91dHJvcztcbmZ1bmN0aW9uIGdyb3VwX291dHJvcygpIHtcbiAgICBvdXRyb3MgPSB7XG4gICAgICAgIHI6IDAsXG4gICAgICAgIGM6IFtdLFxuICAgICAgICBwOiBvdXRyb3MgLy8gcGFyZW50IGdyb3VwXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNoZWNrX291dHJvcygpIHtcbiAgICBpZiAoIW91dHJvcy5yKSB7XG4gICAgICAgIHJ1bl9hbGwob3V0cm9zLmMpO1xuICAgIH1cbiAgICBvdXRyb3MgPSBvdXRyb3MucDtcbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb25faW4oYmxvY2ssIGxvY2FsKSB7XG4gICAgaWYgKGJsb2NrICYmIGJsb2NrLmkpIHtcbiAgICAgICAgb3V0cm9pbmcuZGVsZXRlKGJsb2NrKTtcbiAgICAgICAgYmxvY2suaShsb2NhbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdHJhbnNpdGlvbl9vdXQoYmxvY2ssIGxvY2FsLCBkZXRhY2gsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGJsb2NrICYmIGJsb2NrLm8pIHtcbiAgICAgICAgaWYgKG91dHJvaW5nLmhhcyhibG9jaykpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIG91dHJvaW5nLmFkZChibG9jayk7XG4gICAgICAgIG91dHJvcy5jLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgb3V0cm9pbmcuZGVsZXRlKGJsb2NrKTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmIChkZXRhY2gpXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLmQoMSk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGJsb2NrLm8obG9jYWwpO1xuICAgIH1cbn1cbmNvbnN0IG51bGxfdHJhbnNpdGlvbiA9IHsgZHVyYXRpb246IDAgfTtcbmZ1bmN0aW9uIGNyZWF0ZV9pbl90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMpIHtcbiAgICBsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zKTtcbiAgICBsZXQgcnVubmluZyA9IGZhbHNlO1xuICAgIGxldCBhbmltYXRpb25fbmFtZTtcbiAgICBsZXQgdGFzaztcbiAgICBsZXQgdWlkID0gMDtcbiAgICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uX25hbWUpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdvKCkge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgICAgICBpZiAoY3NzKVxuICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAwLCAxLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzLCB1aWQrKyk7XG4gICAgICAgIHRpY2soMCwgMSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0X3RpbWUgPSBleHBvcnRzLm5vdygpICsgZGVsYXk7XG4gICAgICAgIGNvbnN0IGVuZF90aW1lID0gc3RhcnRfdGltZSArIGR1cmF0aW9uO1xuICAgICAgICBpZiAodGFzaylcbiAgICAgICAgICAgIHRhc2suYWJvcnQoKTtcbiAgICAgICAgcnVubmluZyA9IHRydWU7XG4gICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgdHJ1ZSwgJ3N0YXJ0JykpO1xuICAgICAgICB0YXNrID0gbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93ID49IGVuZF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHRydWUsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGVhc2luZygobm93IC0gc3RhcnRfdGltZSkgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydW5uaW5nO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCgpIHtcbiAgICAgICAgICAgIGlmIChzdGFydGVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUpO1xuICAgICAgICAgICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgICAgICB3YWl0KCkudGhlbihnbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnbygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpbnZhbGlkYXRlKCkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBlbmQoKSB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX291dF90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMpIHtcbiAgICBsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zKTtcbiAgICBsZXQgcnVubmluZyA9IHRydWU7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lO1xuICAgIGNvbnN0IGdyb3VwID0gb3V0cm9zO1xuICAgIGdyb3VwLnIgKz0gMTtcbiAgICBmdW5jdGlvbiBnbygpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMSwgMCwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgIGNvbnN0IHN0YXJ0X3RpbWUgPSBleHBvcnRzLm5vdygpICsgZGVsYXk7XG4gICAgICAgIGNvbnN0IGVuZF90aW1lID0gc3RhcnRfdGltZSArIGR1cmF0aW9uO1xuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGZhbHNlLCAnc3RhcnQnKSk7XG4gICAgICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBlbmRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIS0tZ3JvdXAucikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHJlc3VsdCBpbiBgZW5kKClgIGJlaW5nIGNhbGxlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHdlIGRvbid0IG5lZWQgdG8gY2xlYW4gdXAgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuX2FsbChncm91cC5jKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGljaygxIC0gdCwgdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICB3YWl0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgIGdvKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ28oKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW5kKHJlc2V0KSB7XG4gICAgICAgICAgICBpZiAocmVzZXQgJiYgY29uZmlnLnRpY2spIHtcbiAgICAgICAgICAgICAgICBjb25maWcudGljaygxLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgICAgICAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcywgaW50cm8pIHtcbiAgICBsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zKTtcbiAgICBsZXQgdCA9IGludHJvID8gMCA6IDE7XG4gICAgbGV0IHJ1bm5pbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgbGV0IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lID0gbnVsbDtcbiAgICBmdW5jdGlvbiBjbGVhcl9hbmltYXRpb24oKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5pdChwcm9ncmFtLCBkdXJhdGlvbikge1xuICAgICAgICBjb25zdCBkID0gcHJvZ3JhbS5iIC0gdDtcbiAgICAgICAgZHVyYXRpb24gKj0gTWF0aC5hYnMoZCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhOiB0LFxuICAgICAgICAgICAgYjogcHJvZ3JhbS5iLFxuICAgICAgICAgICAgZCxcbiAgICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICAgICAgc3RhcnQ6IHByb2dyYW0uc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IHByb2dyYW0uc3RhcnQgKyBkdXJhdGlvbixcbiAgICAgICAgICAgIGdyb3VwOiBwcm9ncmFtLmdyb3VwXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdvKGIpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgY29uc3QgcHJvZ3JhbSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBleHBvcnRzLm5vdygpICsgZGVsYXksXG4gICAgICAgICAgICBiXG4gICAgICAgIH07XG4gICAgICAgIGlmICghYikge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgIHByb2dyYW0uZ3JvdXAgPSBvdXRyb3M7XG4gICAgICAgICAgICBvdXRyb3MuciArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0gfHwgcGVuZGluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhbiBpbnRybywgYW5kIHRoZXJlJ3MgYSBkZWxheSwgd2UgbmVlZCB0byBkb1xuICAgICAgICAgICAgLy8gYW4gaW5pdGlhbCB0aWNrIGFuZC9vciBhcHBseSBDU1MgYW5pbWF0aW9uIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiKVxuICAgICAgICAgICAgICAgIHRpY2soMCwgMSk7XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0KHByb2dyYW0sIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgYiwgJ3N0YXJ0JykpO1xuICAgICAgICAgICAgbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nX3Byb2dyYW0gJiYgbm93ID4gcGVuZGluZ19wcm9ncmFtLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IGluaXQocGVuZGluZ19wcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCAnc3RhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIHQsIHJ1bm5pbmdfcHJvZ3JhbS5iLCBydW5uaW5nX3Byb2dyYW0uZHVyYXRpb24sIDAsIGVhc2luZywgY29uZmlnLmNzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm93ID49IHJ1bm5pbmdfcHJvZ3JhbS5lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCA9IHJ1bm5pbmdfcHJvZ3JhbS5iLCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwZW5kaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSdyZSBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbS5iKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludHJvIOKAlCB3ZSBjYW4gdGlkeSB1cCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG91dHJvIOKAlCBuZWVkcyB0byBiZSBjb29yZGluYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tcnVubmluZ19wcm9ncmFtLmdyb3VwLnIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5fYWxsKHJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5jKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBub3cgLSBydW5uaW5nX3Byb2dyYW0uc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gcnVubmluZ19wcm9ncmFtLmEgKyBydW5uaW5nX3Byb2dyYW0uZCAqIGVhc2luZyhwIC8gcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhIShydW5uaW5nX3Byb2dyYW0gfHwgcGVuZGluZ19wcm9ncmFtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJ1bihiKSB7XG4gICAgICAgICAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHdhaXQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgICAgICAgICAgZ28oYik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnbyhiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW5kKCkge1xuICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlX3Byb21pc2UocHJvbWlzZSwgaW5mbykge1xuICAgIGNvbnN0IHRva2VuID0gaW5mby50b2tlbiA9IHt9O1xuICAgIGZ1bmN0aW9uIHVwZGF0ZSh0eXBlLCBpbmRleCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaW5mby50b2tlbiAhPT0gdG9rZW4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGluZm8ucmVzb2x2ZWQgPSB2YWx1ZTtcbiAgICAgICAgbGV0IGNoaWxkX2N0eCA9IGluZm8uY3R4O1xuICAgICAgICBpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNoaWxkX2N0eCA9IGNoaWxkX2N0eC5zbGljZSgpO1xuICAgICAgICAgICAgY2hpbGRfY3R4W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBibG9jayA9IHR5cGUgJiYgKGluZm8uY3VycmVudCA9IHR5cGUpKGNoaWxkX2N0eCk7XG4gICAgICAgIGxldCBuZWVkc19mbHVzaCA9IGZhbHNlO1xuICAgICAgICBpZiAoaW5mby5ibG9jaykge1xuICAgICAgICAgICAgaWYgKGluZm8uYmxvY2tzKSB7XG4gICAgICAgICAgICAgICAgaW5mby5ibG9ja3MuZm9yRWFjaCgoYmxvY2ssIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IGluZGV4ICYmIGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25fb3V0KGJsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8uYmxvY2tzW2ldID09PSBibG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvLmJsb2Nrc1tpXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5mby5ibG9jay5kKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvY2suYygpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihibG9jaywgMSk7XG4gICAgICAgICAgICBibG9jay5tKGluZm8ubW91bnQoKSwgaW5mby5hbmNob3IpO1xuICAgICAgICAgICAgbmVlZHNfZmx1c2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGluZm8uYmxvY2sgPSBibG9jaztcbiAgICAgICAgaWYgKGluZm8uYmxvY2tzKVxuICAgICAgICAgICAgaW5mby5ibG9ja3NbaW5kZXhdID0gYmxvY2s7XG4gICAgICAgIGlmIChuZWVkc19mbHVzaCkge1xuICAgICAgICAgICAgZmx1c2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNfcHJvbWlzZShwcm9taXNlKSkge1xuICAgICAgICBjb25zdCBjdXJyZW50X2NvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudCgpO1xuICAgICAgICBwcm9taXNlLnRoZW4odmFsdWUgPT4ge1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnRoZW4sIDEsIGluZm8udmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLmNhdGNoLCAyLCBpbmZvLmVycm9yLCBlcnJvcik7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgICAgICBpZiAoIWluZm8uaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGlmIHdlIHByZXZpb3VzbHkgaGFkIGEgdGhlbi9jYXRjaCBibG9jaywgZGVzdHJveSBpdFxuICAgICAgICBpZiAoaW5mby5jdXJyZW50ICE9PSBpbmZvLnBlbmRpbmcpIHtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnBlbmRpbmcsIDApO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChpbmZvLmN1cnJlbnQgIT09IGluZm8udGhlbikge1xuICAgICAgICAgICAgdXBkYXRlKGluZm8udGhlbiwgMSwgaW5mby52YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpbmZvLnJlc29sdmVkID0gcHJvbWlzZTtcbiAgICB9XG59XG5cbmNvbnN0IGdsb2JhbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IHdpbmRvd1xuICAgIDogdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gZ2xvYmFsVGhpc1xuICAgICAgICA6IGdsb2JhbCk7XG5cbmZ1bmN0aW9uIGRlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmQoMSk7XG4gICAgbG9va3VwLmRlbGV0ZShibG9jay5rZXkpO1xufVxuZnVuY3Rpb24gb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIHRyYW5zaXRpb25fb3V0KGJsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgIGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZpeF9hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZigpO1xuICAgIGRlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCk7XG59XG5mdW5jdGlvbiBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5mKCk7XG4gICAgb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCk7XG59XG5mdW5jdGlvbiB1cGRhdGVfa2V5ZWRfZWFjaChvbGRfYmxvY2tzLCBkaXJ0eSwgZ2V0X2tleSwgZHluYW1pYywgY3R4LCBsaXN0LCBsb29rdXAsIG5vZGUsIGRlc3Ryb3ksIGNyZWF0ZV9lYWNoX2Jsb2NrLCBuZXh0LCBnZXRfY29udGV4dCkge1xuICAgIGxldCBvID0gb2xkX2Jsb2Nrcy5sZW5ndGg7XG4gICAgbGV0IG4gPSBsaXN0Lmxlbmd0aDtcbiAgICBsZXQgaSA9IG87XG4gICAgY29uc3Qgb2xkX2luZGV4ZXMgPSB7fTtcbiAgICB3aGlsZSAoaS0tKVxuICAgICAgICBvbGRfaW5kZXhlc1tvbGRfYmxvY2tzW2ldLmtleV0gPSBpO1xuICAgIGNvbnN0IG5ld19ibG9ja3MgPSBbXTtcbiAgICBjb25zdCBuZXdfbG9va3VwID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGRlbHRhcyA9IG5ldyBNYXAoKTtcbiAgICBpID0gbjtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkX2N0eCA9IGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSk7XG4gICAgICAgIGNvbnN0IGtleSA9IGdldF9rZXkoY2hpbGRfY3R4KTtcbiAgICAgICAgbGV0IGJsb2NrID0gbG9va3VwLmdldChrZXkpO1xuICAgICAgICBpZiAoIWJsb2NrKSB7XG4gICAgICAgICAgICBibG9jayA9IGNyZWF0ZV9lYWNoX2Jsb2NrKGtleSwgY2hpbGRfY3R4KTtcbiAgICAgICAgICAgIGJsb2NrLmMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkeW5hbWljKSB7XG4gICAgICAgICAgICBibG9jay5wKGNoaWxkX2N0eCwgZGlydHkpO1xuICAgICAgICB9XG4gICAgICAgIG5ld19sb29rdXAuc2V0KGtleSwgbmV3X2Jsb2Nrc1tpXSA9IGJsb2NrKTtcbiAgICAgICAgaWYgKGtleSBpbiBvbGRfaW5kZXhlcylcbiAgICAgICAgICAgIGRlbHRhcy5zZXQoa2V5LCBNYXRoLmFicyhpIC0gb2xkX2luZGV4ZXNba2V5XSkpO1xuICAgIH1cbiAgICBjb25zdCB3aWxsX21vdmUgPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgZGlkX21vdmUgPSBuZXcgU2V0KCk7XG4gICAgZnVuY3Rpb24gaW5zZXJ0KGJsb2NrKSB7XG4gICAgICAgIHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuICAgICAgICBibG9jay5tKG5vZGUsIG5leHQpO1xuICAgICAgICBsb29rdXAuc2V0KGJsb2NrLmtleSwgYmxvY2spO1xuICAgICAgICBuZXh0ID0gYmxvY2suZmlyc3Q7XG4gICAgICAgIG4tLTtcbiAgICB9XG4gICAgd2hpbGUgKG8gJiYgbikge1xuICAgICAgICBjb25zdCBuZXdfYmxvY2sgPSBuZXdfYmxvY2tzW24gLSAxXTtcbiAgICAgICAgY29uc3Qgb2xkX2Jsb2NrID0gb2xkX2Jsb2Nrc1tvIC0gMV07XG4gICAgICAgIGNvbnN0IG5ld19rZXkgPSBuZXdfYmxvY2sua2V5O1xuICAgICAgICBjb25zdCBvbGRfa2V5ID0gb2xkX2Jsb2NrLmtleTtcbiAgICAgICAgaWYgKG5ld19ibG9jayA9PT0gb2xkX2Jsb2NrKSB7XG4gICAgICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgICAgICAgICBuZXh0ID0gbmV3X2Jsb2NrLmZpcnN0O1xuICAgICAgICAgICAgby0tO1xuICAgICAgICAgICAgbi0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfa2V5KSkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZCBibG9ja1xuICAgICAgICAgICAgZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWxvb2t1cC5oYXMobmV3X2tleSkgfHwgd2lsbF9tb3ZlLmhhcyhuZXdfa2V5KSkge1xuICAgICAgICAgICAgaW5zZXJ0KG5ld19ibG9jayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGlkX21vdmUuaGFzKG9sZF9rZXkpKSB7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVsdGFzLmdldChuZXdfa2V5KSA+IGRlbHRhcy5nZXQob2xkX2tleSkpIHtcbiAgICAgICAgICAgIGRpZF9tb3ZlLmFkZChuZXdfa2V5KTtcbiAgICAgICAgICAgIGluc2VydChuZXdfYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2lsbF9tb3ZlLmFkZChvbGRfa2V5KTtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoby0tKSB7XG4gICAgICAgIGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3Nbb107XG4gICAgICAgIGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2Jsb2NrLmtleSkpXG4gICAgICAgICAgICBkZXN0cm95KG9sZF9ibG9jaywgbG9va3VwKTtcbiAgICB9XG4gICAgd2hpbGUgKG4pXG4gICAgICAgIGluc2VydChuZXdfYmxvY2tzW24gLSAxXSk7XG4gICAgcmV0dXJuIG5ld19ibG9ja3M7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9lYWNoX2tleXMoY3R4LCBsaXN0LCBnZXRfY29udGV4dCwgZ2V0X2tleSkge1xuICAgIGNvbnN0IGtleXMgPSBuZXcgU2V0KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGdldF9rZXkoZ2V0X2NvbnRleHQoY3R4LCBsaXN0LCBpKSk7XG4gICAgICAgIGlmIChrZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBoYXZlIGR1cGxpY2F0ZSBrZXlzIGluIGEga2V5ZWQgZWFjaCcpO1xuICAgICAgICB9XG4gICAgICAgIGtleXMuYWRkKGtleSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRfc3ByZWFkX3VwZGF0ZShsZXZlbHMsIHVwZGF0ZXMpIHtcbiAgICBjb25zdCB1cGRhdGUgPSB7fTtcbiAgICBjb25zdCB0b19udWxsX291dCA9IHt9O1xuICAgIGNvbnN0IGFjY291bnRlZF9mb3IgPSB7ICQkc2NvcGU6IDEgfTtcbiAgICBsZXQgaSA9IGxldmVscy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb25zdCBvID0gbGV2ZWxzW2ldO1xuICAgICAgICBjb25zdCBuID0gdXBkYXRlc1tpXTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gbikpXG4gICAgICAgICAgICAgICAgICAgIHRvX251bGxfb3V0W2tleV0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbikge1xuICAgICAgICAgICAgICAgIGlmICghYWNjb3VudGVkX2ZvcltrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVtrZXldID0gbltrZXldO1xuICAgICAgICAgICAgICAgICAgICBhY2NvdW50ZWRfZm9yW2tleV0gPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldmVsc1tpXSA9IG47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvKSB7XG4gICAgICAgICAgICAgICAgYWNjb3VudGVkX2ZvcltrZXldID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0b19udWxsX291dCkge1xuICAgICAgICBpZiAoIShrZXkgaW4gdXBkYXRlKSlcbiAgICAgICAgICAgIHVwZGF0ZVtrZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdXBkYXRlO1xufVxuZnVuY3Rpb24gZ2V0X3NwcmVhZF9vYmplY3Qoc3ByZWFkX3Byb3BzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzcHJlYWRfcHJvcHMgPT09ICdvYmplY3QnICYmIHNwcmVhZF9wcm9wcyAhPT0gbnVsbCA/IHNwcmVhZF9wcm9wcyA6IHt9O1xufVxuXG4vLyBzb3VyY2U6IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbFxuY29uc3QgYm9vbGVhbl9hdHRyaWJ1dGVzID0gbmV3IFNldChbXG4gICAgJ2FsbG93ZnVsbHNjcmVlbicsXG4gICAgJ2FsbG93cGF5bWVudHJlcXVlc3QnLFxuICAgICdhc3luYycsXG4gICAgJ2F1dG9mb2N1cycsXG4gICAgJ2F1dG9wbGF5JyxcbiAgICAnY2hlY2tlZCcsXG4gICAgJ2NvbnRyb2xzJyxcbiAgICAnZGVmYXVsdCcsXG4gICAgJ2RlZmVyJyxcbiAgICAnZGlzYWJsZWQnLFxuICAgICdmb3Jtbm92YWxpZGF0ZScsXG4gICAgJ2hpZGRlbicsXG4gICAgJ2lzbWFwJyxcbiAgICAnbG9vcCcsXG4gICAgJ211bHRpcGxlJyxcbiAgICAnbXV0ZWQnLFxuICAgICdub21vZHVsZScsXG4gICAgJ25vdmFsaWRhdGUnLFxuICAgICdvcGVuJyxcbiAgICAncGxheXNpbmxpbmUnLFxuICAgICdyZWFkb25seScsXG4gICAgJ3JlcXVpcmVkJyxcbiAgICAncmV2ZXJzZWQnLFxuICAgICdzZWxlY3RlZCdcbl0pO1xuXG5jb25zdCBpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3RlciA9IC9bXFxzJ1wiPi89XFx1e0ZERDB9LVxcdXtGREVGfVxcdXtGRkZFfVxcdXtGRkZGfVxcdXsxRkZGRX1cXHV7MUZGRkZ9XFx1ezJGRkZFfVxcdXsyRkZGRn1cXHV7M0ZGRkV9XFx1ezNGRkZGfVxcdXs0RkZGRX1cXHV7NEZGRkZ9XFx1ezVGRkZFfVxcdXs1RkZGRn1cXHV7NkZGRkV9XFx1ezZGRkZGfVxcdXs3RkZGRX1cXHV7N0ZGRkZ9XFx1ezhGRkZFfVxcdXs4RkZGRn1cXHV7OUZGRkV9XFx1ezlGRkZGfVxcdXtBRkZGRX1cXHV7QUZGRkZ9XFx1e0JGRkZFfVxcdXtCRkZGRn1cXHV7Q0ZGRkV9XFx1e0NGRkZGfVxcdXtERkZGRX1cXHV7REZGRkZ9XFx1e0VGRkZFfVxcdXtFRkZGRn1cXHV7RkZGRkV9XFx1e0ZGRkZGfVxcdXsxMEZGRkV9XFx1ezEwRkZGRn1dL3U7XG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcbi8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNub25jaGFyYWN0ZXJcbmZ1bmN0aW9uIHNwcmVhZChhcmdzLCBjbGFzc2VzX3RvX2FkZCkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBPYmplY3QuYXNzaWduKHt9LCAuLi5hcmdzKTtcbiAgICBpZiAoY2xhc3Nlc190b19hZGQpIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXMuY2xhc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgYXR0cmlidXRlcy5jbGFzcyA9IGNsYXNzZXNfdG9fYWRkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXR0cmlidXRlcy5jbGFzcyArPSAnICcgKyBjbGFzc2VzX3RvX2FkZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgc3RyID0gJyc7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgaWYgKGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyLnRlc3QobmFtZSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKVxuICAgICAgICAgICAgc3RyICs9ICcgJyArIG5hbWU7XG4gICAgICAgIGVsc2UgaWYgKGJvb2xlYW5fYXR0cmlidXRlcy5oYXMobmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKVxuICAgICAgICAgICAgICAgIHN0ciArPSAnICcgKyBuYW1lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHN0ciArPSBgICR7bmFtZX09XCIke1N0cmluZyh2YWx1ZSkucmVwbGFjZSgvXCIvZywgJyYjMzQ7JykucmVwbGFjZSgvJy9nLCAnJiMzOTsnKX1cImA7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc3RyO1xufVxuY29uc3QgZXNjYXBlZCA9IHtcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7JyxcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0Oydcbn07XG5mdW5jdGlvbiBlc2NhcGUoaHRtbCkge1xuICAgIHJldHVybiBTdHJpbmcoaHRtbCkucmVwbGFjZSgvW1wiJyY8Pl0vZywgbWF0Y2ggPT4gZXNjYXBlZFttYXRjaF0pO1xufVxuZnVuY3Rpb24gZWFjaChpdGVtcywgZm4pIHtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzdHIgKz0gZm4oaXRlbXNbaV0sIGkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuY29uc3QgbWlzc2luZ19jb21wb25lbnQgPSB7XG4gICAgJCRyZW5kZXI6ICgpID0+ICcnXG59O1xuZnVuY3Rpb24gdmFsaWRhdGVfY29tcG9uZW50KGNvbXBvbmVudCwgbmFtZSkge1xuICAgIGlmICghY29tcG9uZW50IHx8ICFjb21wb25lbnQuJCRyZW5kZXIpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdzdmVsdGU6Y29tcG9uZW50JylcbiAgICAgICAgICAgIG5hbWUgKz0gJyB0aGlzPXsuLi59JztcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGA8JHtuYW1lfT4gaXMgbm90IGEgdmFsaWQgU1NSIGNvbXBvbmVudC4gWW91IG1heSBuZWVkIHRvIHJldmlldyB5b3VyIGJ1aWxkIGNvbmZpZyB0byBlbnN1cmUgdGhhdCBkZXBlbmRlbmNpZXMgYXJlIGNvbXBpbGVkLCByYXRoZXIgdGhhbiBpbXBvcnRlZCBhcyBwcmUtY29tcGlsZWQgbW9kdWxlc2ApO1xuICAgIH1cbiAgICByZXR1cm4gY29tcG9uZW50O1xufVxuZnVuY3Rpb24gZGVidWcoZmlsZSwgbGluZSwgY29sdW1uLCB2YWx1ZXMpIHtcbiAgICBjb25zb2xlLmxvZyhge0BkZWJ1Z30gJHtmaWxlID8gZmlsZSArICcgJyA6ICcnfSgke2xpbmV9OiR7Y29sdW1ufSlgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2codmFsdWVzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgcmV0dXJuICcnO1xufVxubGV0IG9uX2Rlc3Ryb3k7XG5mdW5jdGlvbiBjcmVhdGVfc3NyX2NvbXBvbmVudChmbikge1xuICAgIGZ1bmN0aW9uICQkcmVuZGVyKHJlc3VsdCwgcHJvcHMsIGJpbmRpbmdzLCBzbG90cykge1xuICAgICAgICBjb25zdCBwYXJlbnRfY29tcG9uZW50ID0gZXhwb3J0cy5jdXJyZW50X2NvbXBvbmVudDtcbiAgICAgICAgY29uc3QgJCQgPSB7XG4gICAgICAgICAgICBvbl9kZXN0cm95LFxuICAgICAgICAgICAgY29udGV4dDogbmV3IE1hcChwYXJlbnRfY29tcG9uZW50ID8gcGFyZW50X2NvbXBvbmVudC4kJC5jb250ZXh0IDogW10pLFxuICAgICAgICAgICAgLy8gdGhlc2Ugd2lsbCBiZSBpbW1lZGlhdGVseSBkaXNjYXJkZWRcbiAgICAgICAgICAgIG9uX21vdW50OiBbXSxcbiAgICAgICAgICAgIGJlZm9yZV91cGRhdGU6IFtdLFxuICAgICAgICAgICAgYWZ0ZXJfdXBkYXRlOiBbXSxcbiAgICAgICAgICAgIGNhbGxiYWNrczogYmxhbmtfb2JqZWN0KClcbiAgICAgICAgfTtcbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHsgJCQgfSk7XG4gICAgICAgIGNvbnN0IGh0bWwgPSBmbihyZXN1bHQsIHByb3BzLCBiaW5kaW5ncywgc2xvdHMpO1xuICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG4gICAgICAgIHJldHVybiBodG1sO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByZW5kZXI6IChwcm9wcyA9IHt9LCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgICAgIG9uX2Rlc3Ryb3kgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgdGl0bGU6ICcnLCBoZWFkOiAnJywgY3NzOiBuZXcgU2V0KCkgfTtcbiAgICAgICAgICAgIGNvbnN0IGh0bWwgPSAkJHJlbmRlcihyZXN1bHQsIHByb3BzLCB7fSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBydW5fYWxsKG9uX2Rlc3Ryb3kpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBodG1sLFxuICAgICAgICAgICAgICAgIGNzczoge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBBcnJheS5mcm9tKHJlc3VsdC5jc3MpLm1hcChjc3MgPT4gY3NzLmNvZGUpLmpvaW4oJ1xcbicpLFxuICAgICAgICAgICAgICAgICAgICBtYXA6IG51bGwgLy8gVE9ET1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGVhZDogcmVzdWx0LnRpdGxlICsgcmVzdWx0LmhlYWRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgICQkcmVuZGVyXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGFkZF9hdHRyaWJ1dGUobmFtZSwgdmFsdWUsIGJvb2xlYW4pIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCAoYm9vbGVhbiAmJiAhdmFsdWUpKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgcmV0dXJuIGAgJHtuYW1lfSR7dmFsdWUgPT09IHRydWUgPyAnJyA6IGA9JHt0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gSlNPTi5zdHJpbmdpZnkoZXNjYXBlKHZhbHVlKSkgOiBgXCIke3ZhbHVlfVwiYH1gfWA7XG59XG5mdW5jdGlvbiBhZGRfY2xhc3NlcyhjbGFzc2VzKSB7XG4gICAgcmV0dXJuIGNsYXNzZXMgPyBgIGNsYXNzPVwiJHtjbGFzc2VzfVwiYCA6ICcnO1xufVxuXG5mdW5jdGlvbiBiaW5kKGNvbXBvbmVudCwgbmFtZSwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBpbmRleCA9IGNvbXBvbmVudC4kJC5wcm9wc1tuYW1lXTtcbiAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb21wb25lbnQuJCQuYm91bmRbaW5kZXhdID0gY2FsbGJhY2s7XG4gICAgICAgIGNhbGxiYWNrKGNvbXBvbmVudC4kJC5jdHhbaW5kZXhdKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVfY29tcG9uZW50KGJsb2NrKSB7XG4gICAgYmxvY2sgJiYgYmxvY2suYygpO1xufVxuZnVuY3Rpb24gY2xhaW1fY29tcG9uZW50KGJsb2NrLCBwYXJlbnRfbm9kZXMpIHtcbiAgICBibG9jayAmJiBibG9jay5sKHBhcmVudF9ub2Rlcyk7XG59XG5mdW5jdGlvbiBtb3VudF9jb21wb25lbnQoY29tcG9uZW50LCB0YXJnZXQsIGFuY2hvciwgY3VzdG9tRWxlbWVudCkge1xuICAgIGNvbnN0IHsgZnJhZ21lbnQsIG9uX21vdW50LCBvbl9kZXN0cm95LCBhZnRlcl91cGRhdGUgfSA9IGNvbXBvbmVudC4kJDtcbiAgICBmcmFnbWVudCAmJiBmcmFnbWVudC5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICBpZiAoIWN1c3RvbUVsZW1lbnQpIHtcbiAgICAgICAgLy8gb25Nb3VudCBoYXBwZW5zIGJlZm9yZSB0aGUgaW5pdGlhbCBhZnRlclVwZGF0ZVxuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld19vbl9kZXN0cm95ID0gb25fbW91bnQubWFwKHJ1bikuZmlsdGVyKGlzX2Z1bmN0aW9uKTtcbiAgICAgICAgICAgIGlmIChvbl9kZXN0cm95KSB7XG4gICAgICAgICAgICAgICAgb25fZGVzdHJveS5wdXNoKC4uLm5ld19vbl9kZXN0cm95KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEVkZ2UgY2FzZSAtIGNvbXBvbmVudCB3YXMgZGVzdHJveWVkIGltbWVkaWF0ZWx5LFxuICAgICAgICAgICAgICAgIC8vIG1vc3QgbGlrZWx5IGFzIGEgcmVzdWx0IG9mIGEgYmluZGluZyBpbml0aWFsaXNpbmdcbiAgICAgICAgICAgICAgICBydW5fYWxsKG5ld19vbl9kZXN0cm95KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBvbmVudC4kJC5vbl9tb3VudCA9IFtdO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG59XG5mdW5jdGlvbiBkZXN0cm95X2NvbXBvbmVudChjb21wb25lbnQsIGRldGFjaGluZykge1xuICAgIGNvbnN0ICQkID0gY29tcG9uZW50LiQkO1xuICAgIGlmICgkJC5mcmFnbWVudCAhPT0gbnVsbCkge1xuICAgICAgICBydW5fYWxsKCQkLm9uX2Rlc3Ryb3kpO1xuICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5kKGRldGFjaGluZyk7XG4gICAgICAgIC8vIFRPRE8gbnVsbCBvdXQgb3RoZXIgcmVmcywgaW5jbHVkaW5nIGNvbXBvbmVudC4kJCAoYnV0IG5lZWQgdG9cbiAgICAgICAgLy8gcHJlc2VydmUgZmluYWwgc3RhdGU/KVxuICAgICAgICAkJC5vbl9kZXN0cm95ID0gJCQuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgICAkJC5jdHggPSBbXTtcbiAgICB9XG59XG5mdW5jdGlvbiBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSkge1xuICAgIGlmIChjb21wb25lbnQuJCQuZGlydHlbMF0gPT09IC0xKSB7XG4gICAgICAgIGRpcnR5X2NvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgICAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICAgICAgY29tcG9uZW50LiQkLmRpcnR5LmZpbGwoMCk7XG4gICAgfVxuICAgIGNvbXBvbmVudC4kJC5kaXJ0eVsoaSAvIDMxKSB8IDBdIHw9ICgxIDw8IChpICUgMzEpKTtcbn1cbmZ1bmN0aW9uIGluaXQoY29tcG9uZW50LCBvcHRpb25zLCBpbnN0YW5jZSwgY3JlYXRlX2ZyYWdtZW50LCBub3RfZXF1YWwsIHByb3BzLCBkaXJ0eSA9IFstMV0pIHtcbiAgICBjb25zdCBwYXJlbnRfY29tcG9uZW50ID0gZXhwb3J0cy5jdXJyZW50X2NvbXBvbmVudDtcbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KTtcbiAgICBjb25zdCAkJCA9IGNvbXBvbmVudC4kJCA9IHtcbiAgICAgICAgZnJhZ21lbnQ6IG51bGwsXG4gICAgICAgIGN0eDogbnVsbCxcbiAgICAgICAgLy8gc3RhdGVcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHVwZGF0ZTogbm9vcCxcbiAgICAgICAgbm90X2VxdWFsLFxuICAgICAgICBib3VuZDogYmxhbmtfb2JqZWN0KCksXG4gICAgICAgIC8vIGxpZmVjeWNsZVxuICAgICAgICBvbl9tb3VudDogW10sXG4gICAgICAgIG9uX2Rlc3Ryb3k6IFtdLFxuICAgICAgICBvbl9kaXNjb25uZWN0OiBbXSxcbiAgICAgICAgYmVmb3JlX3VwZGF0ZTogW10sXG4gICAgICAgIGFmdGVyX3VwZGF0ZTogW10sXG4gICAgICAgIGNvbnRleHQ6IG5ldyBNYXAocGFyZW50X2NvbXBvbmVudCA/IHBhcmVudF9jb21wb25lbnQuJCQuY29udGV4dCA6IFtdKSxcbiAgICAgICAgLy8gZXZlcnl0aGluZyBlbHNlXG4gICAgICAgIGNhbGxiYWNrczogYmxhbmtfb2JqZWN0KCksXG4gICAgICAgIGRpcnR5LFxuICAgICAgICBza2lwX2JvdW5kOiBmYWxzZVxuICAgIH07XG4gICAgbGV0IHJlYWR5ID0gZmFsc2U7XG4gICAgJCQuY3R4ID0gaW5zdGFuY2VcbiAgICAgICAgPyBpbnN0YW5jZShjb21wb25lbnQsIG9wdGlvbnMucHJvcHMgfHwge30sIChpLCByZXQsIC4uLnJlc3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmVzdC5sZW5ndGggPyByZXN0WzBdIDogcmV0O1xuICAgICAgICAgICAgaWYgKCQkLmN0eCAmJiBub3RfZXF1YWwoJCQuY3R4W2ldLCAkJC5jdHhbaV0gPSB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoISQkLnNraXBfYm91bmQgJiYgJCQuYm91bmRbaV0pXG4gICAgICAgICAgICAgICAgICAgICQkLmJvdW5kW2ldKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVhZHkpXG4gICAgICAgICAgICAgICAgICAgIG1ha2VfZGlydHkoY29tcG9uZW50LCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH0pXG4gICAgICAgIDogW107XG4gICAgJCQudXBkYXRlKCk7XG4gICAgcmVhZHkgPSB0cnVlO1xuICAgIHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG4gICAgLy8gYGZhbHNlYCBhcyBhIHNwZWNpYWwgY2FzZSBvZiBubyBET00gY29tcG9uZW50XG4gICAgJCQuZnJhZ21lbnQgPSBjcmVhdGVfZnJhZ21lbnQgPyBjcmVhdGVfZnJhZ21lbnQoJCQuY3R4KSA6IGZhbHNlO1xuICAgIGlmIChvcHRpb25zLnRhcmdldCkge1xuICAgICAgICBpZiAob3B0aW9ucy5oeWRyYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlcyA9IGNoaWxkcmVuKG9wdGlvbnMudGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5sKG5vZGVzKTtcbiAgICAgICAgICAgIG5vZGVzLmZvckVhY2goZGV0YWNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW50cm8pXG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGNvbXBvbmVudC4kJC5mcmFnbWVudCk7XG4gICAgICAgIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIG9wdGlvbnMudGFyZ2V0LCBvcHRpb25zLmFuY2hvciwgb3B0aW9ucy5jdXN0b21FbGVtZW50KTtcbiAgICAgICAgZmx1c2goKTtcbiAgICB9XG4gICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHBhcmVudF9jb21wb25lbnQpO1xufVxuaWYgKHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV4cG9ydHMuU3ZlbHRlRWxlbWVudCA9IGNsYXNzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgb25fbW91bnQgfSA9IHRoaXMuJCQ7XG4gICAgICAgICAgICB0aGlzLiQkLm9uX2Rpc2Nvbm5lY3QgPSBvbl9tb3VudC5tYXAocnVuKS5maWx0ZXIoaXNfZnVuY3Rpb24pO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuJCQuc2xvdHRlZCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLiQkLnNsb3R0ZWRba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHIsIF9vbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXNbYXR0cl0gPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHJ1bl9hbGwodGhpcy4kJC5vbl9kaXNjb25uZWN0KTtcbiAgICAgICAgfVxuICAgICAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICAgICAgdGhpcy4kZGVzdHJveSA9IG5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBUT0RPIHNob3VsZCB0aGlzIGRlbGVnYXRlIHRvIGFkZEV2ZW50TGlzdGVuZXI/XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja3MgPSAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gfHwgKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdID0gW10pKTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgICRzZXQoJCRwcm9wcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuJCRzZXQgJiYgIWlzX2VtcHR5KCQkcHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkc2V0KCQkcHJvcHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgU3ZlbHRlIGNvbXBvbmVudHMuIFVzZWQgd2hlbiBkZXY9ZmFsc2UuXG4gKi9cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICB9XG4gICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgICRzZXQoJCRwcm9wcykge1xuICAgICAgICBpZiAodGhpcy4kJHNldCAmJiAhaXNfZW1wdHkoJCRwcm9wcykpIHtcbiAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiQkc2V0KCQkcHJvcHMpO1xuICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoX2Rldih0eXBlLCBkZXRhaWwpIHtcbiAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudCh0eXBlLCBPYmplY3QuYXNzaWduKHsgdmVyc2lvbjogJzMuMzUuMCcgfSwgZGV0YWlsKSkpO1xufVxuZnVuY3Rpb24gYXBwZW5kX2Rldih0YXJnZXQsIG5vZGUpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUluc2VydCcsIHsgdGFyZ2V0LCBub2RlIH0pO1xuICAgIGFwcGVuZCh0YXJnZXQsIG5vZGUpO1xufVxuZnVuY3Rpb24gaW5zZXJ0X2Rldih0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUsIGFuY2hvciB9KTtcbiAgICBpbnNlcnQodGFyZ2V0LCBub2RlLCBhbmNob3IpO1xufVxuZnVuY3Rpb24gZGV0YWNoX2Rldihub2RlKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01SZW1vdmUnLCB7IG5vZGUgfSk7XG4gICAgZGV0YWNoKG5vZGUpO1xufVxuZnVuY3Rpb24gZGV0YWNoX2JldHdlZW5fZGV2KGJlZm9yZSwgYWZ0ZXIpIHtcbiAgICB3aGlsZSAoYmVmb3JlLm5leHRTaWJsaW5nICYmIGJlZm9yZS5uZXh0U2libGluZyAhPT0gYWZ0ZXIpIHtcbiAgICAgICAgZGV0YWNoX2RldihiZWZvcmUubmV4dFNpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGFjaF9iZWZvcmVfZGV2KGFmdGVyKSB7XG4gICAgd2hpbGUgKGFmdGVyLnByZXZpb3VzU2libGluZykge1xuICAgICAgICBkZXRhY2hfZGV2KGFmdGVyLnByZXZpb3VzU2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoX2FmdGVyX2RldihiZWZvcmUpIHtcbiAgICB3aGlsZSAoYmVmb3JlLm5leHRTaWJsaW5nKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYmVmb3JlLm5leHRTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBsaXN0ZW5fZGV2KG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zLCBoYXNfcHJldmVudF9kZWZhdWx0LCBoYXNfc3RvcF9wcm9wYWdhdGlvbikge1xuICAgIGNvbnN0IG1vZGlmaWVycyA9IG9wdGlvbnMgPT09IHRydWUgPyBbJ2NhcHR1cmUnXSA6IG9wdGlvbnMgPyBBcnJheS5mcm9tKE9iamVjdC5rZXlzKG9wdGlvbnMpKSA6IFtdO1xuICAgIGlmIChoYXNfcHJldmVudF9kZWZhdWx0KVxuICAgICAgICBtb2RpZmllcnMucHVzaCgncHJldmVudERlZmF1bHQnKTtcbiAgICBpZiAoaGFzX3N0b3BfcHJvcGFnYXRpb24pXG4gICAgICAgIG1vZGlmaWVycy5wdXNoKCdzdG9wUHJvcGFnYXRpb24nKTtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUFkZEV2ZW50TGlzdGVuZXInLCB7IG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBtb2RpZmllcnMgfSk7XG4gICAgY29uc3QgZGlzcG9zZSA9IGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01SZW1vdmVFdmVudExpc3RlbmVyJywgeyBub2RlLCBldmVudCwgaGFuZGxlciwgbW9kaWZpZXJzIH0pO1xuICAgICAgICBkaXNwb3NlKCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGF0dHJfZGV2KG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBhdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKVxuICAgICAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZUF0dHJpYnV0ZScsIHsgbm9kZSwgYXR0cmlidXRlIH0pO1xuICAgIGVsc2VcbiAgICAgICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXRBdHRyaWJ1dGUnLCB7IG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBwcm9wX2Rldihub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBub2RlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0UHJvcGVydHknLCB7IG5vZGUsIHByb3BlcnR5LCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIGRhdGFzZXRfZGV2KG5vZGUsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIG5vZGUuZGF0YXNldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldERhdGFzZXQnLCB7IG5vZGUsIHByb3BlcnR5LCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIHNldF9kYXRhX2Rldih0ZXh0LCBkYXRhKSB7XG4gICAgZGF0YSA9ICcnICsgZGF0YTtcbiAgICBpZiAodGV4dC53aG9sZVRleHQgPT09IGRhdGEpXG4gICAgICAgIHJldHVybjtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldERhdGEnLCB7IG5vZGU6IHRleHQsIGRhdGEgfSk7XG4gICAgdGV4dC5kYXRhID0gZGF0YTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX2VhY2hfYXJndW1lbnQoYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdzdHJpbmcnICYmICEoYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIGFyZykpIHtcbiAgICAgICAgbGV0IG1zZyA9ICd7I2VhY2h9IG9ubHkgaXRlcmF0ZXMgb3ZlciBhcnJheS1saWtlIG9iamVjdHMuJztcbiAgICAgICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgYXJnICYmIFN5bWJvbC5pdGVyYXRvciBpbiBhcmcpIHtcbiAgICAgICAgICAgIG1zZyArPSAnIFlvdSBjYW4gdXNlIGEgc3ByZWFkIHRvIGNvbnZlcnQgdGhpcyBpdGVyYWJsZSBpbnRvIGFuIGFycmF5Lic7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVfc2xvdHMobmFtZSwgc2xvdCwga2V5cykge1xuICAgIGZvciAoY29uc3Qgc2xvdF9rZXkgb2YgT2JqZWN0LmtleXMoc2xvdCkpIHtcbiAgICAgICAgaWYgKCF+a2V5cy5pbmRleE9mKHNsb3Rfa2V5KSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGA8JHtuYW1lfT4gcmVjZWl2ZWQgYW4gdW5leHBlY3RlZCBzbG90IFwiJHtzbG90X2tleX1cIi5gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgU3ZlbHRlIGNvbXBvbmVudHMgd2l0aCBzb21lIG1pbm9yIGRldi1lbmhhbmNlbWVudHMuIFVzZWQgd2hlbiBkZXY9dHJ1ZS5cbiAqL1xuY2xhc3MgU3ZlbHRlQ29tcG9uZW50RGV2IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucyB8fCAoIW9wdGlvbnMudGFyZ2V0ICYmICFvcHRpb25zLiQkaW5saW5lKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ3RhcmdldCcgaXMgYSByZXF1aXJlZCBvcHRpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLiRkZXN0cm95KCk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvbXBvbmVudCB3YXMgYWxyZWFkeSBkZXN0cm95ZWQnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIH07XG4gICAgfVxuICAgICRjYXB0dXJlX3N0YXRlKCkgeyB9XG4gICAgJGluamVjdF9zdGF0ZSgpIHsgfVxufVxuLyoqXG4gKiBCYXNlIGNsYXNzIHRvIGNyZWF0ZSBzdHJvbmdseSB0eXBlZCBTdmVsdGUgY29tcG9uZW50cy5cbiAqIFRoaXMgb25seSBleGlzdHMgZm9yIHR5cGluZyBwdXJwb3NlcyBhbmQgc2hvdWxkIGJlIHVzZWQgaW4gYC5kLnRzYCBmaWxlcy5cbiAqXG4gKiAjIyMgRXhhbXBsZTpcbiAqXG4gKiBZb3UgaGF2ZSBjb21wb25lbnQgbGlicmFyeSBvbiBucG0gY2FsbGVkIGBjb21wb25lbnQtbGlicmFyeWAsIGZyb20gd2hpY2hcbiAqIHlvdSBleHBvcnQgYSBjb21wb25lbnQgY2FsbGVkIGBNeUNvbXBvbmVudGAuIEZvciBTdmVsdGUrVHlwZVNjcmlwdCB1c2VycyxcbiAqIHlvdSB3YW50IHRvIHByb3ZpZGUgdHlwaW5ncy4gVGhlcmVmb3JlIHlvdSBjcmVhdGUgYSBgaW5kZXguZC50c2A6XG4gKiBgYGB0c1xuICogaW1wb3J0IHsgU3ZlbHRlQ29tcG9uZW50VHlwZWQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gKiBleHBvcnQgY2xhc3MgTXlDb21wb25lbnQgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnRUeXBlZDx7Zm9vOiBzdHJpbmd9PiB7fVxuICogYGBgXG4gKiBUeXBpbmcgdGhpcyBtYWtlcyBpdCBwb3NzaWJsZSBmb3IgSURFcyBsaWtlIFZTIENvZGUgd2l0aCB0aGUgU3ZlbHRlIGV4dGVuc2lvblxuICogdG8gcHJvdmlkZSBpbnRlbGxpc2Vuc2UgYW5kIHRvIHVzZSB0aGUgY29tcG9uZW50IGxpa2UgdGhpcyBpbiBhIFN2ZWx0ZSBmaWxlXG4gKiB3aXRoIFR5cGVTY3JpcHQ6XG4gKiBgYGBzdmVsdGVcbiAqIDxzY3JpcHQgbGFuZz1cInRzXCI+XG4gKiBcdGltcG9ydCB7IE15Q29tcG9uZW50IH0gZnJvbSBcImNvbXBvbmVudC1saWJyYXJ5XCI7XG4gKiA8L3NjcmlwdD5cbiAqIDxNeUNvbXBvbmVudCBmb289eydiYXInfSAvPlxuICogYGBgXG4gKlxuICogIyMjIyBXaHkgbm90IG1ha2UgdGhpcyBwYXJ0IG9mIGBTdmVsdGVDb21wb25lbnQoRGV2KWA/XG4gKiBCZWNhdXNlXG4gKiBgYGB0c1xuICogY2xhc3MgQVN1YmNsYXNzT2ZTdmVsdGVDb21wb25lbnQgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQ8e2Zvbzogc3RyaW5nfT4ge31cbiAqIGNvbnN0IGNvbXBvbmVudDogdHlwZW9mIFN2ZWx0ZUNvbXBvbmVudCA9IEFTdWJjbGFzc09mU3ZlbHRlQ29tcG9uZW50O1xuICogYGBgXG4gKiB3aWxsIHRocm93IGEgdHlwZSBlcnJvciwgc28gd2UgbmVlZCB0byBzZXBlcmF0ZSB0aGUgbW9yZSBzdHJpY3RseSB0eXBlZCBjbGFzcy5cbiAqL1xuY2xhc3MgU3ZlbHRlQ29tcG9uZW50VHlwZWQgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnREZXYge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgfVxufVxuZnVuY3Rpb24gbG9vcF9ndWFyZCh0aW1lb3V0KSB7XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gc3RhcnQgPiB0aW1lb3V0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luZmluaXRlIGxvb3AgZGV0ZWN0ZWQnKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydHMuSHRtbFRhZyA9IEh0bWxUYWc7XG5leHBvcnRzLlN2ZWx0ZUNvbXBvbmVudCA9IFN2ZWx0ZUNvbXBvbmVudDtcbmV4cG9ydHMuU3ZlbHRlQ29tcG9uZW50RGV2ID0gU3ZlbHRlQ29tcG9uZW50RGV2O1xuZXhwb3J0cy5TdmVsdGVDb21wb25lbnRUeXBlZCA9IFN2ZWx0ZUNvbXBvbmVudFR5cGVkO1xuZXhwb3J0cy5hY3Rpb25fZGVzdHJveWVyID0gYWN0aW9uX2Rlc3Ryb3llcjtcbmV4cG9ydHMuYWRkX2F0dHJpYnV0ZSA9IGFkZF9hdHRyaWJ1dGU7XG5leHBvcnRzLmFkZF9jbGFzc2VzID0gYWRkX2NsYXNzZXM7XG5leHBvcnRzLmFkZF9mbHVzaF9jYWxsYmFjayA9IGFkZF9mbHVzaF9jYWxsYmFjaztcbmV4cG9ydHMuYWRkX2xvY2F0aW9uID0gYWRkX2xvY2F0aW9uO1xuZXhwb3J0cy5hZGRfcmVuZGVyX2NhbGxiYWNrID0gYWRkX3JlbmRlcl9jYWxsYmFjaztcbmV4cG9ydHMuYWRkX3Jlc2l6ZV9saXN0ZW5lciA9IGFkZF9yZXNpemVfbGlzdGVuZXI7XG5leHBvcnRzLmFkZF90cmFuc2Zvcm0gPSBhZGRfdHJhbnNmb3JtO1xuZXhwb3J0cy5hZnRlclVwZGF0ZSA9IGFmdGVyVXBkYXRlO1xuZXhwb3J0cy5hcHBlbmQgPSBhcHBlbmQ7XG5leHBvcnRzLmFwcGVuZF9kZXYgPSBhcHBlbmRfZGV2O1xuZXhwb3J0cy5hc3NpZ24gPSBhc3NpZ247XG5leHBvcnRzLmF0dHIgPSBhdHRyO1xuZXhwb3J0cy5hdHRyX2RldiA9IGF0dHJfZGV2O1xuZXhwb3J0cy5hdHRyaWJ1dGVfdG9fb2JqZWN0ID0gYXR0cmlidXRlX3RvX29iamVjdDtcbmV4cG9ydHMuYmVmb3JlVXBkYXRlID0gYmVmb3JlVXBkYXRlO1xuZXhwb3J0cy5iaW5kID0gYmluZDtcbmV4cG9ydHMuYmluZGluZ19jYWxsYmFja3MgPSBiaW5kaW5nX2NhbGxiYWNrcztcbmV4cG9ydHMuYmxhbmtfb2JqZWN0ID0gYmxhbmtfb2JqZWN0O1xuZXhwb3J0cy5idWJibGUgPSBidWJibGU7XG5leHBvcnRzLmNoZWNrX291dHJvcyA9IGNoZWNrX291dHJvcztcbmV4cG9ydHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbmV4cG9ydHMuY2xhaW1fY29tcG9uZW50ID0gY2xhaW1fY29tcG9uZW50O1xuZXhwb3J0cy5jbGFpbV9lbGVtZW50ID0gY2xhaW1fZWxlbWVudDtcbmV4cG9ydHMuY2xhaW1fc3BhY2UgPSBjbGFpbV9zcGFjZTtcbmV4cG9ydHMuY2xhaW1fdGV4dCA9IGNsYWltX3RleHQ7XG5leHBvcnRzLmNsZWFyX2xvb3BzID0gY2xlYXJfbG9vcHM7XG5leHBvcnRzLmNvbXBvbmVudF9zdWJzY3JpYmUgPSBjb21wb25lbnRfc3Vic2NyaWJlO1xuZXhwb3J0cy5jb21wdXRlX3Jlc3RfcHJvcHMgPSBjb21wdXRlX3Jlc3RfcHJvcHM7XG5leHBvcnRzLmNvbXB1dGVfc2xvdHMgPSBjb21wdXRlX3Nsb3RzO1xuZXhwb3J0cy5jcmVhdGVFdmVudERpc3BhdGNoZXIgPSBjcmVhdGVFdmVudERpc3BhdGNoZXI7XG5leHBvcnRzLmNyZWF0ZV9hbmltYXRpb24gPSBjcmVhdGVfYW5pbWF0aW9uO1xuZXhwb3J0cy5jcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uID0gY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbjtcbmV4cG9ydHMuY3JlYXRlX2NvbXBvbmVudCA9IGNyZWF0ZV9jb21wb25lbnQ7XG5leHBvcnRzLmNyZWF0ZV9pbl90cmFuc2l0aW9uID0gY3JlYXRlX2luX3RyYW5zaXRpb247XG5leHBvcnRzLmNyZWF0ZV9vdXRfdHJhbnNpdGlvbiA9IGNyZWF0ZV9vdXRfdHJhbnNpdGlvbjtcbmV4cG9ydHMuY3JlYXRlX3Nsb3QgPSBjcmVhdGVfc2xvdDtcbmV4cG9ydHMuY3JlYXRlX3Nzcl9jb21wb25lbnQgPSBjcmVhdGVfc3NyX2NvbXBvbmVudDtcbmV4cG9ydHMuY3VzdG9tX2V2ZW50ID0gY3VzdG9tX2V2ZW50O1xuZXhwb3J0cy5kYXRhc2V0X2RldiA9IGRhdGFzZXRfZGV2O1xuZXhwb3J0cy5kZWJ1ZyA9IGRlYnVnO1xuZXhwb3J0cy5kZXN0cm95X2Jsb2NrID0gZGVzdHJveV9ibG9jaztcbmV4cG9ydHMuZGVzdHJveV9jb21wb25lbnQgPSBkZXN0cm95X2NvbXBvbmVudDtcbmV4cG9ydHMuZGVzdHJveV9lYWNoID0gZGVzdHJveV9lYWNoO1xuZXhwb3J0cy5kZXRhY2ggPSBkZXRhY2g7XG5leHBvcnRzLmRldGFjaF9hZnRlcl9kZXYgPSBkZXRhY2hfYWZ0ZXJfZGV2O1xuZXhwb3J0cy5kZXRhY2hfYmVmb3JlX2RldiA9IGRldGFjaF9iZWZvcmVfZGV2O1xuZXhwb3J0cy5kZXRhY2hfYmV0d2Vlbl9kZXYgPSBkZXRhY2hfYmV0d2Vlbl9kZXY7XG5leHBvcnRzLmRldGFjaF9kZXYgPSBkZXRhY2hfZGV2O1xuZXhwb3J0cy5kaXJ0eV9jb21wb25lbnRzID0gZGlydHlfY29tcG9uZW50cztcbmV4cG9ydHMuZGlzcGF0Y2hfZGV2ID0gZGlzcGF0Y2hfZGV2O1xuZXhwb3J0cy5lYWNoID0gZWFjaDtcbmV4cG9ydHMuZWxlbWVudCA9IGVsZW1lbnQ7XG5leHBvcnRzLmVsZW1lbnRfaXMgPSBlbGVtZW50X2lzO1xuZXhwb3J0cy5lbXB0eSA9IGVtcHR5O1xuZXhwb3J0cy5lc2NhcGUgPSBlc2NhcGU7XG5leHBvcnRzLmVzY2FwZWQgPSBlc2NhcGVkO1xuZXhwb3J0cy5leGNsdWRlX2ludGVybmFsX3Byb3BzID0gZXhjbHVkZV9pbnRlcm5hbF9wcm9wcztcbmV4cG9ydHMuZml4X2FuZF9kZXN0cm95X2Jsb2NrID0gZml4X2FuZF9kZXN0cm95X2Jsb2NrO1xuZXhwb3J0cy5maXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrID0gZml4X2FuZF9vdXRyb19hbmRfZGVzdHJveV9ibG9jaztcbmV4cG9ydHMuZml4X3Bvc2l0aW9uID0gZml4X3Bvc2l0aW9uO1xuZXhwb3J0cy5mbHVzaCA9IGZsdXNoO1xuZXhwb3J0cy5nZXRDb250ZXh0ID0gZ2V0Q29udGV4dDtcbmV4cG9ydHMuZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWUgPSBnZXRfYmluZGluZ19ncm91cF92YWx1ZTtcbmV4cG9ydHMuZ2V0X2N1cnJlbnRfY29tcG9uZW50ID0gZ2V0X2N1cnJlbnRfY29tcG9uZW50O1xuZXhwb3J0cy5nZXRfY3VzdG9tX2VsZW1lbnRzX3Nsb3RzID0gZ2V0X2N1c3RvbV9lbGVtZW50c19zbG90cztcbmV4cG9ydHMuZ2V0X3Nsb3RfY2hhbmdlcyA9IGdldF9zbG90X2NoYW5nZXM7XG5leHBvcnRzLmdldF9zbG90X2NvbnRleHQgPSBnZXRfc2xvdF9jb250ZXh0O1xuZXhwb3J0cy5nZXRfc3ByZWFkX29iamVjdCA9IGdldF9zcHJlYWRfb2JqZWN0O1xuZXhwb3J0cy5nZXRfc3ByZWFkX3VwZGF0ZSA9IGdldF9zcHJlYWRfdXBkYXRlO1xuZXhwb3J0cy5nZXRfc3RvcmVfdmFsdWUgPSBnZXRfc3RvcmVfdmFsdWU7XG5leHBvcnRzLmdsb2JhbHMgPSBnbG9iYWxzO1xuZXhwb3J0cy5ncm91cF9vdXRyb3MgPSBncm91cF9vdXRyb3M7XG5leHBvcnRzLmhhbmRsZV9wcm9taXNlID0gaGFuZGxlX3Byb21pc2U7XG5leHBvcnRzLmhhc0NvbnRleHQgPSBoYXNDb250ZXh0O1xuZXhwb3J0cy5oYXNfcHJvcCA9IGhhc19wcm9wO1xuZXhwb3J0cy5pZGVudGl0eSA9IGlkZW50aXR5O1xuZXhwb3J0cy5pbml0ID0gaW5pdDtcbmV4cG9ydHMuaW5zZXJ0ID0gaW5zZXJ0O1xuZXhwb3J0cy5pbnNlcnRfZGV2ID0gaW5zZXJ0X2RldjtcbmV4cG9ydHMuaW50cm9zID0gaW50cm9zO1xuZXhwb3J0cy5pbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3RlciA9IGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyO1xuZXhwb3J0cy5pc19jbGllbnQgPSBpc19jbGllbnQ7XG5leHBvcnRzLmlzX2Nyb3Nzb3JpZ2luID0gaXNfY3Jvc3NvcmlnaW47XG5leHBvcnRzLmlzX2VtcHR5ID0gaXNfZW1wdHk7XG5leHBvcnRzLmlzX2Z1bmN0aW9uID0gaXNfZnVuY3Rpb247XG5leHBvcnRzLmlzX3Byb21pc2UgPSBpc19wcm9taXNlO1xuZXhwb3J0cy5saXN0ZW4gPSBsaXN0ZW47XG5leHBvcnRzLmxpc3Rlbl9kZXYgPSBsaXN0ZW5fZGV2O1xuZXhwb3J0cy5sb29wID0gbG9vcDtcbmV4cG9ydHMubG9vcF9ndWFyZCA9IGxvb3BfZ3VhcmQ7XG5leHBvcnRzLm1pc3NpbmdfY29tcG9uZW50ID0gbWlzc2luZ19jb21wb25lbnQ7XG5leHBvcnRzLm1vdW50X2NvbXBvbmVudCA9IG1vdW50X2NvbXBvbmVudDtcbmV4cG9ydHMubm9vcCA9IG5vb3A7XG5leHBvcnRzLm5vdF9lcXVhbCA9IG5vdF9lcXVhbDtcbmV4cG9ydHMubnVsbF90b19lbXB0eSA9IG51bGxfdG9fZW1wdHk7XG5leHBvcnRzLm9iamVjdF93aXRob3V0X3Byb3BlcnRpZXMgPSBvYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzO1xuZXhwb3J0cy5vbkRlc3Ryb3kgPSBvbkRlc3Ryb3k7XG5leHBvcnRzLm9uTW91bnQgPSBvbk1vdW50O1xuZXhwb3J0cy5vbmNlID0gb25jZTtcbmV4cG9ydHMub3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2sgPSBvdXRyb19hbmRfZGVzdHJveV9ibG9jaztcbmV4cG9ydHMucHJldmVudF9kZWZhdWx0ID0gcHJldmVudF9kZWZhdWx0O1xuZXhwb3J0cy5wcm9wX2RldiA9IHByb3BfZGV2O1xuZXhwb3J0cy5xdWVyeV9zZWxlY3Rvcl9hbGwgPSBxdWVyeV9zZWxlY3Rvcl9hbGw7XG5leHBvcnRzLnJ1biA9IHJ1bjtcbmV4cG9ydHMucnVuX2FsbCA9IHJ1bl9hbGw7XG5leHBvcnRzLnNhZmVfbm90X2VxdWFsID0gc2FmZV9ub3RfZXF1YWw7XG5leHBvcnRzLnNjaGVkdWxlX3VwZGF0ZSA9IHNjaGVkdWxlX3VwZGF0ZTtcbmV4cG9ydHMuc2VsZWN0X211bHRpcGxlX3ZhbHVlID0gc2VsZWN0X211bHRpcGxlX3ZhbHVlO1xuZXhwb3J0cy5zZWxlY3Rfb3B0aW9uID0gc2VsZWN0X29wdGlvbjtcbmV4cG9ydHMuc2VsZWN0X29wdGlvbnMgPSBzZWxlY3Rfb3B0aW9ucztcbmV4cG9ydHMuc2VsZWN0X3ZhbHVlID0gc2VsZWN0X3ZhbHVlO1xuZXhwb3J0cy5zZWxmID0gc2VsZjtcbmV4cG9ydHMuc2V0Q29udGV4dCA9IHNldENvbnRleHQ7XG5leHBvcnRzLnNldF9hdHRyaWJ1dGVzID0gc2V0X2F0dHJpYnV0ZXM7XG5leHBvcnRzLnNldF9jdXJyZW50X2NvbXBvbmVudCA9IHNldF9jdXJyZW50X2NvbXBvbmVudDtcbmV4cG9ydHMuc2V0X2N1c3RvbV9lbGVtZW50X2RhdGEgPSBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YTtcbmV4cG9ydHMuc2V0X2RhdGEgPSBzZXRfZGF0YTtcbmV4cG9ydHMuc2V0X2RhdGFfZGV2ID0gc2V0X2RhdGFfZGV2O1xuZXhwb3J0cy5zZXRfaW5wdXRfdHlwZSA9IHNldF9pbnB1dF90eXBlO1xuZXhwb3J0cy5zZXRfaW5wdXRfdmFsdWUgPSBzZXRfaW5wdXRfdmFsdWU7XG5leHBvcnRzLnNldF9ub3cgPSBzZXRfbm93O1xuZXhwb3J0cy5zZXRfcmFmID0gc2V0X3JhZjtcbmV4cG9ydHMuc2V0X3N0b3JlX3ZhbHVlID0gc2V0X3N0b3JlX3ZhbHVlO1xuZXhwb3J0cy5zZXRfc3R5bGUgPSBzZXRfc3R5bGU7XG5leHBvcnRzLnNldF9zdmdfYXR0cmlidXRlcyA9IHNldF9zdmdfYXR0cmlidXRlcztcbmV4cG9ydHMuc3BhY2UgPSBzcGFjZTtcbmV4cG9ydHMuc3ByZWFkID0gc3ByZWFkO1xuZXhwb3J0cy5zdG9wX3Byb3BhZ2F0aW9uID0gc3RvcF9wcm9wYWdhdGlvbjtcbmV4cG9ydHMuc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuZXhwb3J0cy5zdmdfZWxlbWVudCA9IHN2Z19lbGVtZW50O1xuZXhwb3J0cy50ZXh0ID0gdGV4dDtcbmV4cG9ydHMudGljayA9IHRpY2s7XG5leHBvcnRzLnRpbWVfcmFuZ2VzX3RvX2FycmF5ID0gdGltZV9yYW5nZXNfdG9fYXJyYXk7XG5leHBvcnRzLnRvX251bWJlciA9IHRvX251bWJlcjtcbmV4cG9ydHMudG9nZ2xlX2NsYXNzID0gdG9nZ2xlX2NsYXNzO1xuZXhwb3J0cy50cmFuc2l0aW9uX2luID0gdHJhbnNpdGlvbl9pbjtcbmV4cG9ydHMudHJhbnNpdGlvbl9vdXQgPSB0cmFuc2l0aW9uX291dDtcbmV4cG9ydHMudXBkYXRlX2tleWVkX2VhY2ggPSB1cGRhdGVfa2V5ZWRfZWFjaDtcbmV4cG9ydHMudXBkYXRlX3Nsb3QgPSB1cGRhdGVfc2xvdDtcbmV4cG9ydHMudXBkYXRlX3Nsb3Rfc3ByZWFkID0gdXBkYXRlX3Nsb3Rfc3ByZWFkO1xuZXhwb3J0cy52YWxpZGF0ZV9jb21wb25lbnQgPSB2YWxpZGF0ZV9jb21wb25lbnQ7XG5leHBvcnRzLnZhbGlkYXRlX2VhY2hfYXJndW1lbnQgPSB2YWxpZGF0ZV9lYWNoX2FyZ3VtZW50O1xuZXhwb3J0cy52YWxpZGF0ZV9lYWNoX2tleXMgPSB2YWxpZGF0ZV9lYWNoX2tleXM7XG5leHBvcnRzLnZhbGlkYXRlX3Nsb3RzID0gdmFsaWRhdGVfc2xvdHM7XG5leHBvcnRzLnZhbGlkYXRlX3N0b3JlID0gdmFsaWRhdGVfc3RvcmU7XG5leHBvcnRzLnhsaW5rX2F0dHIgPSB4bGlua19hdHRyO1xuIiwidmFyIF8kc3ZlbHRlXzEgPSB7fTtcblwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShfJHN2ZWx0ZV8xLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pOy8qIHJlbW92ZWQ6IHZhciBfJGludGVybmFsXzI9cmVxdWlyZShcIi4vaW50ZXJuYWwvaW5kZXguanNcIik7ICovO09iamVjdC5kZWZpbmVQcm9wZXJ0eShfJHN2ZWx0ZV8xLFwiU3ZlbHRlQ29tcG9uZW50XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIF8kaW50ZXJuYWxfMi5TdmVsdGVDb21wb25lbnREZXZ9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KF8kc3ZlbHRlXzEsXCJTdmVsdGVDb21wb25lbnRUeXBlZFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfJGludGVybmFsXzIuU3ZlbHRlQ29tcG9uZW50VHlwZWR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KF8kc3ZlbHRlXzEsXCJhZnRlclVwZGF0ZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfJGludGVybmFsXzIuYWZ0ZXJVcGRhdGV9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KF8kc3ZlbHRlXzEsXCJiZWZvcmVVcGRhdGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gXyRpbnRlcm5hbF8yLmJlZm9yZVVwZGF0ZX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoXyRzdmVsdGVfMSxcImNyZWF0ZUV2ZW50RGlzcGF0Y2hlclwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfJGludGVybmFsXzIuY3JlYXRlRXZlbnREaXNwYXRjaGVyfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfJHN2ZWx0ZV8xLFwiZ2V0Q29udGV4dFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfJGludGVybmFsXzIuZ2V0Q29udGV4dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoXyRzdmVsdGVfMSxcImhhc0NvbnRleHRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gXyRpbnRlcm5hbF8yLmhhc0NvbnRleHR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KF8kc3ZlbHRlXzEsXCJvbkRlc3Ryb3lcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gXyRpbnRlcm5hbF8yLm9uRGVzdHJveX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoXyRzdmVsdGVfMSxcIm9uTW91bnRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gXyRpbnRlcm5hbF8yLm9uTW91bnR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KF8kc3ZlbHRlXzEsXCJzZXRDb250ZXh0XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIF8kaW50ZXJuYWxfMi5zZXRDb250ZXh0fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfJHN2ZWx0ZV8xLFwidGlja1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfJGludGVybmFsXzIudGlja319KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYklrOWlhbVZqZENJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVpYaHdiM0owY3lJc0luWmhiSFZsSWl3aVpXNTFiV1Z5WVdKc1pTSXNJbWRsZENJc0ltbHVkR1Z5Ym1Gc0lpd2lVM1psYkhSbFEyOXRjRzl1Wlc1MFJHVjJJaXdpVTNabGJIUmxRMjl0Y0c5dVpXNTBWSGx3WldRaUxDSmhablJsY2xWd1pHRjBaU0lzSW1KbFptOXlaVlZ3WkdGMFpTSXNJbU55WldGMFpVVjJaVzUwUkdsemNHRjBZMmhsY2lJc0ltZGxkRU52Ym5SbGVIUWlMQ0pvWVhORGIyNTBaWGgwSWl3aWIyNUVaWE4wY205NUlpd2liMjVOYjNWdWRDSXNJbk5sZEVOdmJuUmxlSFFpTENKMGFXTnJJbDBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUVzV1VGQlFTeERRVVZCUVN4TlFVRkJRU3hEUVVGUFF5eGpRVUZCUVN4RFFVRmxReXhWUVVGQlFTeERRVUZUTEZsQlFVRXNRMEZCWXl4RFFVRkZReXhMUVVGQlFTeERRVUZCUVN4RFFVRlBMRU5CUVVFc1EwRkJRU3hEUVVGQkxFTkJSWFJFTEdkRlFVbEJTQ3hOUVVGQlFTeERRVUZQUXl4alFVRkJRU3hEUVVGbFF5eFZRVUZCUVN4RFFVRlRMR2xDUVVGQkxFTkJRVzFDTEVOQlEycEVSU3hWUVVGQlFTeERRVUZCUVN4RFFVRlpMRU5CUVVFc1EwRkRXa01zUjBGQlFVRXNRMEZCU3l4VlFVRkJMRU5CUTBvc1QwRkJUME1zV1VGQlFVRXNRMEZCVTBNc2EwSkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlIyeENVQ3hOUVVGQlFTeERRVUZQUXl4alFVRkJRU3hEUVVGbFF5eFZRVUZCUVN4RFFVRlRMSE5DUVVGQkxFTkJRWGRDTEVOQlEzUkVSU3hWUVVGQlFTeERRVUZCUVN4RFFVRlpMRU5CUVVFc1EwRkRXa01zUjBGQlFVRXNRMEZCU3l4VlFVRkJMRU5CUTBvc1QwRkJUME1zV1VGQlFVRXNRMEZCVTBVc2IwSkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlIyeENVaXhOUVVGQlFTeERRVUZQUXl4alFVRkJRU3hEUVVGbFF5eFZRVUZCUVN4RFFVRlRMR0ZCUVVFc1EwRkJaU3hEUVVNM1EwVXNWVUZCUVVFc1EwRkJRVUVzUTBGQldTeERRVUZCTEVOQlExcERMRWRCUVVGQkxFTkJRVXNzVlVGQlFTeERRVU5LTEU5QlFVOURMRmxCUVVGQkxFTkJRVk5ITEZkQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUjJ4Q1ZDeE5RVUZCUVN4RFFVRlBReXhqUVVGQlFTeERRVUZsUXl4VlFVRkJRU3hEUVVGVExHTkJRVUVzUTBGQlowSXNRMEZET1VORkxGVkJRVUZCTEVOQlFVRkJMRU5CUVZrc1EwRkJRU3hEUVVOYVF5eEhRVUZCUVN4RFFVRkxMRlZCUVVFc1EwRkRTaXhQUVVGUFF5eFpRVUZCUVN4RFFVRlRTU3haUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVWRzUWxZc1RVRkJRVUVzUTBGQlQwTXNZMEZCUVVFc1EwRkJaVU1zVlVGQlFVRXNRMEZCVXl4MVFrRkJRU3hEUVVGNVFpeERRVU4yUkVVc1ZVRkJRVUVzUTBGQlFVRXNRMEZCV1N4RFFVRkJMRU5CUTFwRExFZEJRVUZCTEVOQlFVc3NWVUZCUVN4RFFVTktMRTlCUVU5RExGbEJRVUZCTEVOQlFWTkxMSEZDUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVWRzUWxnc1RVRkJRVUVzUTBGQlQwTXNZMEZCUVVFc1EwRkJaVU1zVlVGQlFVRXNRMEZCVXl4WlFVRkJMRU5CUVdNc1EwRkROVU5GTEZWQlFVRkJMRU5CUVVGQkxFTkJRVmtzUTBGQlFTeERRVU5hUXl4SFFVRkJRU3hEUVVGTExGVkJRVUVzUTBGRFNpeFBRVUZQUXl4WlFVRkJRU3hEUVVGVFRTeFZRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVZHNRbG9zVFVGQlFVRXNRMEZCVDBNc1kwRkJRVUVzUTBGQlpVTXNWVUZCUVVFc1EwRkJVeXhaUVVGQkxFTkJRV01zUTBGRE5VTkZMRlZCUVVGQkxFTkJRVUZCTEVOQlFWa3NRMEZCUVN4RFFVTmFReXhIUVVGQlFTeERRVUZMTEZWQlFVRXNRMEZEU2l4UFFVRlBReXhaUVVGQlFTeERRVUZUVHl4VlFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVkc1FtSXNUVUZCUVVFc1EwRkJUME1zWTBGQlFVRXNRMEZCWlVNc1ZVRkJRVUVzUTBGQlV5eFhRVUZCTEVOQlFXRXNRMEZETTBORkxGVkJRVUZCTEVOQlFVRkJMRU5CUVZrc1EwRkJRU3hEUVVOYVF5eEhRVUZCUVN4RFFVRkxMRlZCUVVFc1EwRkRTaXhQUVVGUFF5eFpRVUZCUVN4RFFVRlRVU3hUUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVWRzUW1Rc1RVRkJRVUVzUTBGQlQwTXNZMEZCUVVFc1EwRkJaVU1zVlVGQlFVRXNRMEZCVXl4VFFVRkJMRU5CUVZjc1EwRkRla05GTEZWQlFVRkJMRU5CUVVGQkxFTkJRVmtzUTBGQlFTeERRVU5hUXl4SFFVRkJRU3hEUVVGTExGVkJRVUVzUTBGRFNpeFBRVUZQUXl4WlFVRkJRU3hEUVVGVFV5eFBRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVZHNRbVlzVFVGQlFVRXNRMEZCVDBNc1kwRkJRVUVzUTBGQlpVTXNWVUZCUVVFc1EwRkJVeXhaUVVGQkxFTkJRV01zUTBGRE5VTkZMRlZCUVVGQkxFTkJRVUZCTEVOQlFWa3NRMEZCUVN4RFFVTmFReXhIUVVGQlFTeERRVUZMTEZWQlFVRXNRMEZEU2l4UFFVRlBReXhaUVVGQlFTeERRVUZUVlN4VlFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVkc1FtaENMRTFCUVVGQkxFTkJRVTlETEdOQlFVRkJMRU5CUVdWRExGVkJRVUZCTEVOQlFWTXNUVUZCUVN4RFFVRlJMRU5CUTNSRFJTeFZRVUZCUVN4RFFVRkJRU3hEUVVGWkxFTkJRVUVzUTBGRFdrTXNSMEZCUVVFc1EwRkJTeXhWUVVGQkxFTkJRMG9zVDBGQlQwTXNXVUZCUVVFc1EwRkJVMWNzU1VGQlFVRXNRMEZCUVVFc1EwRkJRVUVzUTBGQlFVRXNRMEZCUVVFaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNlcyNTFiR3hkZlE9PSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldF9yZXF1aXJlKHdpbmRvdywgcmVxdWlyZWQpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocmVxdWlyZWQpKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHdpbmRvdy5yZXF1aXJlKHJlcXVpcmVkLCAoLi4uYXJncykgPT4gcmVzb2x2ZShhcmdzKSwgcmVqZWN0KSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gd2luZG93LnJlcXVpcmUoW3JlcXVpcmVkXSwgcmVzb2x2ZSwgcmVqZWN0KSlcbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7Y29uc3R7U3ZlbHRlQ29tcG9uZW50OlN2ZWx0ZUNvbXBvbmVudCxhcHBlbmQ6YXBwZW5kLGF0dHI6YXR0cixiaW5kaW5nX2NhbGxiYWNrczpiaW5kaW5nX2NhbGxiYWNrcyxkZXN0cm95X2VhY2g6ZGVzdHJveV9lYWNoLGRldGFjaDpkZXRhY2gsZWxlbWVudDplbGVtZW50LGdsb2JhbHM6Z2xvYmFscyxpbml0OmluaXQsaW5zZXJ0Omluc2VydCxsaXN0ZW46bGlzdGVuLG5vb3A6bm9vcCxzYWZlX25vdF9lcXVhbDpzYWZlX25vdF9lcXVhbCxzZXRfZGF0YTpzZXRfZGF0YSxzZXRfaW5wdXRfdmFsdWU6c2V0X2lucHV0X3ZhbHVlLHNldF9zdHlsZTpzZXRfc3R5bGUsc3BhY2U6c3BhY2UsdGV4dDp0ZXh0LHRvZ2dsZV9jbGFzczp0b2dnbGVfY2xhc3N9PV8kaW50ZXJuYWxfMix7ZG9jdW1lbnQ6ZG9jdW1lbnRfMX09Z2xvYmFscyx7b25Nb3VudDpvbk1vdW50fT1fJHN2ZWx0ZV8xLHtkZWZhdWx0OmdldF9yZXF1aXJlfT1fJGdldF9yZXF1aXJlXzQ7ZnVuY3Rpb24gZ2V0X2VhY2hfY29udGV4dChjdHgsbGlzdCxpKXtjb25zdCBjaGlsZF9jdHg9Y3R4LnNsaWNlKCk7cmV0dXJuIGNoaWxkX2N0eFsxMl09bGlzdFtpXSxjaGlsZF9jdHh9ZnVuY3Rpb24gZ2V0X2VhY2hfY29udGV4dF8xKGN0eCxsaXN0LGkpe2NvbnN0IGNoaWxkX2N0eD1jdHguc2xpY2UoKTtyZXR1cm4gY2hpbGRfY3R4WzEyXT1saXN0W2ldLGNoaWxkX2N0eH1mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfNyhjdHgpe2xldCBzdXAsaSxzdXBfdGl0bGVfdmFsdWUsdDtyZXR1cm57Yygpe3N1cD1lbGVtZW50KFwic3VwXCIpLGk9ZWxlbWVudChcImlcIiksdD1zcGFjZSgpLGF0dHIoaSxcImNsYXNzXCIsXCJmYXIgZmEtcXVlc3Rpb24tY2lyY2xlXCIpLGF0dHIoc3VwLFwiZGF0YS10b2dnbGVcIixcInRvb2x0aXBcIiksYXR0cihzdXAsXCJ0aXRsZVwiLHN1cF90aXRsZV92YWx1ZT1jdHhbMF0uZGVzY3JpcHRpb24pfSxtKHRhcmdldCxhbmNob3Ipe2luc2VydCh0YXJnZXQsc3VwLGFuY2hvciksYXBwZW5kKHN1cCxpKSxpbnNlcnQodGFyZ2V0LHQsYW5jaG9yKX0scChjdHgsZGlydHkpezEmZGlydHkmJnN1cF90aXRsZV92YWx1ZSE9PShzdXBfdGl0bGVfdmFsdWU9Y3R4WzBdLmRlc2NyaXB0aW9uKSYmYXR0cihzdXAsXCJ0aXRsZVwiLHN1cF90aXRsZV92YWx1ZSl9LGQoZGV0YWNoaW5nKXtkZXRhY2hpbmcmJmRldGFjaChzdXApLGRldGFjaGluZyYmZGV0YWNoKHQpfX19ZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzMoY3R4KXtsZXQgZGl2MixkaXYxLGRpdjAsZGl2MF9jbGFzc192YWx1ZSxkaXYwX2FyaWFfdmFsdWVub3dfdmFsdWUsdDAsdDEsaWZfYmxvY2swPWN0eFsyXS5lcnJvciYmY3JlYXRlX2lmX2Jsb2NrXzUoY3R4KSxpZl9ibG9jazE9Y3R4WzJdLndhcm5pbmcmJmNyZWF0ZV9pZl9ibG9ja180KGN0eCk7cmV0dXJue2MoKXtkaXYyPWVsZW1lbnQoXCJkaXZcIiksZGl2MT1lbGVtZW50KFwiZGl2XCIpLGRpdjA9ZWxlbWVudChcImRpdlwiKSx0MD1zcGFjZSgpLGlmX2Jsb2NrMCYmaWZfYmxvY2swLmMoKSx0MT1zcGFjZSgpLGlmX2Jsb2NrMSYmaWZfYmxvY2sxLmMoKSxhdHRyKGRpdjAsXCJjbGFzc1wiLGRpdjBfY2xhc3NfdmFsdWU9XCJwcm9ncmVzcy1iYXIgYmctXCIrY3R4WzJdLmJnK1wiIHN2ZWx0ZS03dDNhcTRcIiksYXR0cihkaXYwLFwicm9sZVwiLFwicHJvZ3Jlc3NiYXJcIiksYXR0cihkaXYwLFwiYXJpYS12YWx1ZW1pblwiLFwiMFwiKSxhdHRyKGRpdjAsXCJhcmlhLXZhbHVlbWF4XCIsXCIxMDBcIiksYXR0cihkaXYwLFwiYXJpYS12YWx1ZW5vd1wiLGRpdjBfYXJpYV92YWx1ZW5vd192YWx1ZT1jdHhbMl0ucHJvZ3Jlc3MpLHNldF9zdHlsZShkaXYwLFwid2lkdGhcIixjdHhbMl0ucHJvZ3Jlc3MrXCIlXCIpLHRvZ2dsZV9jbGFzcyhkaXYwLFwicHJvZ3Jlc3MtYmFyLXN0cmlwZWRcIixjdHhbMl0uc3RyaXBlZCksdG9nZ2xlX2NsYXNzKGRpdjAsXCJwcm9ncmVzcy1iYXItYW5pbWF0ZWRcIixjdHhbMl0uYW5pbWF0ZWQpLGF0dHIoZGl2MSxcImNsYXNzXCIsXCJwcm9ncmVzcyBiZy1saWdodCBzdmVsdGUtN3QzYXE0XCIpfSxtKHRhcmdldCxhbmNob3Ipe2luc2VydCh0YXJnZXQsZGl2MixhbmNob3IpLGFwcGVuZChkaXYyLGRpdjEpLGFwcGVuZChkaXYxLGRpdjApLGFwcGVuZChkaXYyLHQwKSxpZl9ibG9jazAmJmlmX2Jsb2NrMC5tKGRpdjIsbnVsbCksYXBwZW5kKGRpdjIsdDEpLGlmX2Jsb2NrMSYmaWZfYmxvY2sxLm0oZGl2MixudWxsKX0scChjdHgsZGlydHkpezQmZGlydHkmJmRpdjBfY2xhc3NfdmFsdWUhPT0oZGl2MF9jbGFzc192YWx1ZT1cInByb2dyZXNzLWJhciBiZy1cIitjdHhbMl0uYmcrXCIgc3ZlbHRlLTd0M2FxNFwiKSYmYXR0cihkaXYwLFwiY2xhc3NcIixkaXYwX2NsYXNzX3ZhbHVlKSw0JmRpcnR5JiZkaXYwX2FyaWFfdmFsdWVub3dfdmFsdWUhPT0oZGl2MF9hcmlhX3ZhbHVlbm93X3ZhbHVlPWN0eFsyXS5wcm9ncmVzcykmJmF0dHIoZGl2MCxcImFyaWEtdmFsdWVub3dcIixkaXYwX2FyaWFfdmFsdWVub3dfdmFsdWUpLDQmZGlydHkmJnNldF9zdHlsZShkaXYwLFwid2lkdGhcIixjdHhbMl0ucHJvZ3Jlc3MrXCIlXCIpLDQmZGlydHkmJnRvZ2dsZV9jbGFzcyhkaXYwLFwicHJvZ3Jlc3MtYmFyLXN0cmlwZWRcIixjdHhbMl0uc3RyaXBlZCksNCZkaXJ0eSYmdG9nZ2xlX2NsYXNzKGRpdjAsXCJwcm9ncmVzcy1iYXItYW5pbWF0ZWRcIixjdHhbMl0uYW5pbWF0ZWQpLGN0eFsyXS5lcnJvcj9pZl9ibG9jazA/aWZfYmxvY2swLnAoY3R4LGRpcnR5KTooKGlmX2Jsb2NrMD1jcmVhdGVfaWZfYmxvY2tfNShjdHgpKS5jKCksaWZfYmxvY2swLm0oZGl2Mix0MSkpOmlmX2Jsb2NrMCYmKGlmX2Jsb2NrMC5kKDEpLGlmX2Jsb2NrMD1udWxsKSxjdHhbMl0ud2FybmluZz9pZl9ibG9jazE/aWZfYmxvY2sxLnAoY3R4LGRpcnR5KTooKGlmX2Jsb2NrMT1jcmVhdGVfaWZfYmxvY2tfNChjdHgpKS5jKCksaWZfYmxvY2sxLm0oZGl2MixudWxsKSk6aWZfYmxvY2sxJiYoaWZfYmxvY2sxLmQoMSksaWZfYmxvY2sxPW51bGwpfSxkKGRldGFjaGluZyl7ZGV0YWNoaW5nJiZkZXRhY2goZGl2MiksaWZfYmxvY2swJiZpZl9ibG9jazAuZCgpLGlmX2Jsb2NrMSYmaWZfYmxvY2sxLmQoKX19fWZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja181KGN0eCl7bGV0IGRpdix0MCx0MSx0Mix0MV92YWx1ZT1jdHhbMl0uZXJyb3IrXCJcIixpZl9ibG9jaz1jdHhbMl0udXJsJiZjcmVhdGVfaWZfYmxvY2tfNihjdHgpO3JldHVybntjKCl7ZGl2PWVsZW1lbnQoXCJkaXZcIiksdDA9dGV4dChcIkVycm9yIGRvd25sb2FkaW5nIGZpbGU6IFwiKSx0MT10ZXh0KHQxX3ZhbHVlKSx0Mj1zcGFjZSgpLGlmX2Jsb2NrJiZpZl9ibG9jay5jKCksYXR0cihkaXYsXCJjbGFzc1wiLFwiYWxlcnQgYWxlcnQtZGFuZ2VyXCIpfSxtKHRhcmdldCxhbmNob3Ipe2luc2VydCh0YXJnZXQsZGl2LGFuY2hvciksYXBwZW5kKGRpdix0MCksYXBwZW5kKGRpdix0MSksYXBwZW5kKGRpdix0MiksaWZfYmxvY2smJmlmX2Jsb2NrLm0oZGl2LG51bGwpfSxwKGN0eCxkaXJ0eSl7NCZkaXJ0eSYmdDFfdmFsdWUhPT0odDFfdmFsdWU9Y3R4WzJdLmVycm9yK1wiXCIpJiZzZXRfZGF0YSh0MSx0MV92YWx1ZSksY3R4WzJdLnVybD9pZl9ibG9jaz9pZl9ibG9jay5wKGN0eCxkaXJ0eSk6KChpZl9ibG9jaz1jcmVhdGVfaWZfYmxvY2tfNihjdHgpKS5jKCksaWZfYmxvY2subShkaXYsbnVsbCkpOmlmX2Jsb2NrJiYoaWZfYmxvY2suZCgxKSxpZl9ibG9jaz1udWxsKX0sZChkZXRhY2hpbmcpe2RldGFjaGluZyYmZGV0YWNoKGRpdiksaWZfYmxvY2smJmlmX2Jsb2NrLmQoKX19fWZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja182KGN0eCl7bGV0IHQwLGEsdDEsYV9ocmVmX3ZhbHVlLHQxX3ZhbHVlPWN0eFsyXS51cmwrXCJcIjtyZXR1cm57Yygpe3QwPXRleHQoXCJmcm9tIFwiKSxhPWVsZW1lbnQoXCJhXCIpLHQxPXRleHQodDFfdmFsdWUpLGF0dHIoYSxcImhyZWZcIixhX2hyZWZfdmFsdWU9Y3R4WzJdLnVybCksYXR0cihhLFwidGFyZ2V0XCIsXCJfYmxhbmtcIil9LG0odGFyZ2V0LGFuY2hvcil7aW5zZXJ0KHRhcmdldCx0MCxhbmNob3IpLGluc2VydCh0YXJnZXQsYSxhbmNob3IpLGFwcGVuZChhLHQxKX0scChjdHgsZGlydHkpezQmZGlydHkmJnQxX3ZhbHVlIT09KHQxX3ZhbHVlPWN0eFsyXS51cmwrXCJcIikmJnNldF9kYXRhKHQxLHQxX3ZhbHVlKSw0JmRpcnR5JiZhX2hyZWZfdmFsdWUhPT0oYV9ocmVmX3ZhbHVlPWN0eFsyXS51cmwpJiZhdHRyKGEsXCJocmVmXCIsYV9ocmVmX3ZhbHVlKX0sZChkZXRhY2hpbmcpe2RldGFjaGluZyYmZGV0YWNoKHQwKSxkZXRhY2hpbmcmJmRldGFjaChhKX19fWZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja180KGN0eCl7bGV0IGRpdix0MCx0MSxicix0MixiLHQ0LGEsdDUsYV9ocmVmX3ZhbHVlLHQ2LHQxX3ZhbHVlPWN0eFsyXS5lcnJvcitcIlwiLHQ1X3ZhbHVlPWN0eFsyXS51cmwrXCJcIjtyZXR1cm57Yygpe2Rpdj1lbGVtZW50KFwiZGl2XCIpLHQwPXRleHQoXCJFcnJvciBkb3dubG9hZGluZyBmaWxlOiBcIiksdDE9dGV4dCh0MV92YWx1ZSksYnI9ZWxlbWVudChcImJyXCIpLHQyPXNwYWNlKCksKGI9ZWxlbWVudChcImJcIikpLnRleHRDb250ZW50PVwiSXQgbWF5IHJlcXVpcmUgdXNlciBlbmdhZ2VtZW50XCIsdDQ9dGV4dChcIiwgcGxlYXNlIHZpc2l0XFxuICAgICAgICAgICAgXCIpLGE9ZWxlbWVudChcImFcIiksdDU9dGV4dCh0NV92YWx1ZSksdDY9dGV4dChcIlxcbiAgICAgICAgICB0byBkb3dubG9hZCB0aGUgZXhhbXBsZSBmaWxlIGZvciB1cGxvYWQuXCIpLGF0dHIoYSxcImhyZWZcIixhX2hyZWZfdmFsdWU9Y3R4WzJdLnVybCksYXR0cihhLFwidGFyZ2V0XCIsXCJfYmxhbmtcIiksYXR0cihkaXYsXCJjbGFzc1wiLFwiYWxlcnQgYWxlcnQtd2FybmluZ1wiKX0sbSh0YXJnZXQsYW5jaG9yKXtpbnNlcnQodGFyZ2V0LGRpdixhbmNob3IpLGFwcGVuZChkaXYsdDApLGFwcGVuZChkaXYsdDEpLGFwcGVuZChkaXYsYnIpLGFwcGVuZChkaXYsdDIpLGFwcGVuZChkaXYsYiksYXBwZW5kKGRpdix0NCksYXBwZW5kKGRpdixhKSxhcHBlbmQoYSx0NSksYXBwZW5kKGRpdix0Nil9LHAoY3R4LGRpcnR5KXs0JmRpcnR5JiZ0MV92YWx1ZSE9PSh0MV92YWx1ZT1jdHhbMl0uZXJyb3IrXCJcIikmJnNldF9kYXRhKHQxLHQxX3ZhbHVlKSw0JmRpcnR5JiZ0NV92YWx1ZSE9PSh0NV92YWx1ZT1jdHhbMl0udXJsK1wiXCIpJiZzZXRfZGF0YSh0NSx0NV92YWx1ZSksNCZkaXJ0eSYmYV9ocmVmX3ZhbHVlIT09KGFfaHJlZl92YWx1ZT1jdHhbMl0udXJsKSYmYXR0cihhLFwiaHJlZlwiLGFfaHJlZl92YWx1ZSl9LGQoZGV0YWNoaW5nKXtkZXRhY2hpbmcmJmRldGFjaChkaXYpfX19ZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrKGN0eCl7bGV0IGRpdjQsZGl2MSxzcGFuMCx0MCx0MSxzdXAwLHQyLHQzLGRpdjAsdDQsZGl2MyxzcGFuMSx0NSx0NixzdXAxLHQ3LHQ4LGRpdjIsc2hvd19pZl8xPU9iamVjdC5rZXlzKGN0eFswXS5leGFtcGxlcykubGVuZ3RoPjEsc2hvd19pZj1PYmplY3Qua2V5cyhjdHhbMF0uZXhhbXBsZXMpLmxlbmd0aD4xLGlmX2Jsb2NrMD1zaG93X2lmXzEmJmNyZWF0ZV9pZl9ibG9ja18yKGN0eCksZWFjaF92YWx1ZV8xPU9iamVjdC5rZXlzKGN0eFswXS5leGFtcGxlcyksZWFjaF9ibG9ja3NfMT1bXTtmb3IobGV0IGk9MDtpPGVhY2hfdmFsdWVfMS5sZW5ndGg7aSs9MSllYWNoX2Jsb2Nrc18xW2ldPWNyZWF0ZV9lYWNoX2Jsb2NrXzEoZ2V0X2VhY2hfY29udGV4dF8xKGN0eCxlYWNoX3ZhbHVlXzEsaSkpO2xldCBpZl9ibG9jazE9c2hvd19pZiYmY3JlYXRlX2lmX2Jsb2NrXzEoY3R4KSxlYWNoX3ZhbHVlPU9iamVjdC5rZXlzKGN0eFswXS5leGFtcGxlcyksZWFjaF9ibG9ja3M9W107Zm9yKGxldCBpPTA7aTxlYWNoX3ZhbHVlLmxlbmd0aDtpKz0xKWVhY2hfYmxvY2tzW2ldPWNyZWF0ZV9lYWNoX2Jsb2NrKGdldF9lYWNoX2NvbnRleHQoY3R4LGVhY2hfdmFsdWUsaSkpO3JldHVybntjKCl7ZGl2ND1lbGVtZW50KFwiZGl2XCIpLGRpdjE9ZWxlbWVudChcImRpdlwiKSxzcGFuMD1lbGVtZW50KFwic3BhblwiKSx0MD10ZXh0KFwiTG9hZCBleGFtcGxlXCIpLGlmX2Jsb2NrMCYmaWZfYmxvY2swLmMoKSx0MT1zcGFjZSgpLChzdXAwPWVsZW1lbnQoXCJzdXBcIikpLmlubmVySFRNTD0nPGkgY2xhc3M9XCJmYXIgZmEtcXVlc3Rpb24tY2lyY2xlXCI+PC9pPicsdDI9dGV4dChcIjpcIiksdDM9c3BhY2UoKSxkaXYwPWVsZW1lbnQoXCJkaXZcIik7Zm9yKGxldCBpPTA7aTxlYWNoX2Jsb2Nrc18xLmxlbmd0aDtpKz0xKWVhY2hfYmxvY2tzXzFbaV0uYygpO3Q0PXNwYWNlKCksZGl2Mz1lbGVtZW50KFwiZGl2XCIpLHNwYW4xPWVsZW1lbnQoXCJzcGFuXCIpLHQ1PXRleHQoXCJEb3dubG9hZCBleGFtcGxlXCIpLGlmX2Jsb2NrMSYmaWZfYmxvY2sxLmMoKSx0Nj1zcGFjZSgpLChzdXAxPWVsZW1lbnQoXCJzdXBcIikpLmlubmVySFRNTD0nPGkgY2xhc3M9XCJmYXIgZmEtcXVlc3Rpb24tY2lyY2xlXCI+PC9pPicsdDc9dGV4dChcIjpcIiksdDg9c3BhY2UoKSxkaXYyPWVsZW1lbnQoXCJkaXZcIik7Zm9yKGxldCBpPTA7aTxlYWNoX2Jsb2Nrcy5sZW5ndGg7aSs9MSllYWNoX2Jsb2Nrc1tpXS5jKCk7YXR0cihzdXAwLFwiZGF0YS10b2dnbGVcIixcInRvb2x0aXBcIiksYXR0cihzdXAwLFwidGl0bGVcIixcIkxvYWQgdGhlIGV4YW1wbGUgZmlsZSBkaXJlY3RseSBpbnRvIHRoZSBhcHB5dGVyXCIpLGF0dHIoc3BhbjAsXCJjbGFzc1wiLFwiZC10YWJsZS1jZWxsIG1yLTEgbXktMSBwLTEgdGV4dC1yaWdodFwiKSxzZXRfc3R5bGUoc3BhbjAsXCJ3aGl0ZS1zcGFjZVwiLFwibm93cmFwXCIpLGF0dHIoZGl2MCxcImNsYXNzXCIsXCJkLXRhYmxlLWNlbGwgdGFibGUtZ3JvdyBkLWZsZXggZmxleC13cmFwIGp1c3RpZnktY29udGVudC1zdGFydCBhbGlnbi1pdGVtcy1jZW50ZXJcIiksYXR0cihkaXYxLFwiY2xhc3NcIixcImQtdGFibGUtcm93XCIpLGF0dHIoc3VwMSxcImRhdGEtdG9nZ2xlXCIsXCJ0b29sdGlwXCIpLGF0dHIoc3VwMSxcInRpdGxlXCIsXCJEb3dubG9hZCB0aGUgZXhhbXBsZSBmaWxlIGZvciBpbnNwZWN0aW9uXCIpLGF0dHIoc3BhbjEsXCJjbGFzc1wiLFwiZC10YWJsZS1jZWxsIG1yLTEgbXktMSBwLTEgdGV4dC1yaWdodFwiKSxzZXRfc3R5bGUoc3BhbjEsXCJ3aGl0ZS1zcGFjZVwiLFwibm93cmFwXCIpLGF0dHIoZGl2MixcImNsYXNzXCIsXCJkLXRhYmxlLWNlbGwgdGFibGUtZ3JvdyBkLWZsZXggZmxleC13cmFwIGp1c3RpZnktY29udGVudC1zdGFydCBhbGlnbi1pdGVtcy1jZW50ZXJcIiksYXR0cihkaXYzLFwiY2xhc3NcIixcImQtdGFibGUtcm93XCIpLGF0dHIoZGl2NCxcImNsYXNzXCIsXCJkLXRhYmxlXCIpfSxtKHRhcmdldCxhbmNob3Ipe2luc2VydCh0YXJnZXQsZGl2NCxhbmNob3IpLGFwcGVuZChkaXY0LGRpdjEpLGFwcGVuZChkaXYxLHNwYW4wKSxhcHBlbmQoc3BhbjAsdDApLGlmX2Jsb2NrMCYmaWZfYmxvY2swLm0oc3BhbjAsbnVsbCksYXBwZW5kKHNwYW4wLHQxKSxhcHBlbmQoc3BhbjAsc3VwMCksYXBwZW5kKHNwYW4wLHQyKSxhcHBlbmQoZGl2MSx0MyksYXBwZW5kKGRpdjEsZGl2MCk7Zm9yKGxldCBpPTA7aTxlYWNoX2Jsb2Nrc18xLmxlbmd0aDtpKz0xKWVhY2hfYmxvY2tzXzFbaV0ubShkaXYwLG51bGwpO2FwcGVuZChkaXY0LHQ0KSxhcHBlbmQoZGl2NCxkaXYzKSxhcHBlbmQoZGl2MyxzcGFuMSksYXBwZW5kKHNwYW4xLHQ1KSxpZl9ibG9jazEmJmlmX2Jsb2NrMS5tKHNwYW4xLG51bGwpLGFwcGVuZChzcGFuMSx0NiksYXBwZW5kKHNwYW4xLHN1cDEpLGFwcGVuZChzcGFuMSx0NyksYXBwZW5kKGRpdjMsdDgpLGFwcGVuZChkaXYzLGRpdjIpO2ZvcihsZXQgaT0wO2k8ZWFjaF9ibG9ja3MubGVuZ3RoO2krPTEpZWFjaF9ibG9ja3NbaV0ubShkaXYyLG51bGwpfSxwKGN0eCxkaXJ0eSl7aWYoMSZkaXJ0eSYmKHNob3dfaWZfMT1PYmplY3Qua2V5cyhjdHhbMF0uZXhhbXBsZXMpLmxlbmd0aD4xKSxzaG93X2lmXzE/aWZfYmxvY2swfHwoKGlmX2Jsb2NrMD1jcmVhdGVfaWZfYmxvY2tfMihjdHgpKS5jKCksaWZfYmxvY2swLm0oc3BhbjAsdDEpKTppZl9ibG9jazAmJihpZl9ibG9jazAuZCgxKSxpZl9ibG9jazA9bnVsbCksMzMmZGlydHkpe2xldCBpO2ZvcihlYWNoX3ZhbHVlXzE9T2JqZWN0LmtleXMoY3R4WzBdLmV4YW1wbGVzKSxpPTA7aTxlYWNoX3ZhbHVlXzEubGVuZ3RoO2krPTEpe2NvbnN0IGNoaWxkX2N0eD1nZXRfZWFjaF9jb250ZXh0XzEoY3R4LGVhY2hfdmFsdWVfMSxpKTtlYWNoX2Jsb2Nrc18xW2ldP2VhY2hfYmxvY2tzXzFbaV0ucChjaGlsZF9jdHgsZGlydHkpOihlYWNoX2Jsb2Nrc18xW2ldPWNyZWF0ZV9lYWNoX2Jsb2NrXzEoY2hpbGRfY3R4KSxlYWNoX2Jsb2Nrc18xW2ldLmMoKSxlYWNoX2Jsb2Nrc18xW2ldLm0oZGl2MCxudWxsKSl9Zm9yKDtpPGVhY2hfYmxvY2tzXzEubGVuZ3RoO2krPTEpZWFjaF9ibG9ja3NfMVtpXS5kKDEpO2VhY2hfYmxvY2tzXzEubGVuZ3RoPWVhY2hfdmFsdWVfMS5sZW5ndGh9aWYoMSZkaXJ0eSYmKHNob3dfaWY9T2JqZWN0LmtleXMoY3R4WzBdLmV4YW1wbGVzKS5sZW5ndGg+MSksc2hvd19pZj9pZl9ibG9jazF8fCgoaWZfYmxvY2sxPWNyZWF0ZV9pZl9ibG9ja18xKGN0eCkpLmMoKSxpZl9ibG9jazEubShzcGFuMSx0NikpOmlmX2Jsb2NrMSYmKGlmX2Jsb2NrMS5kKDEpLGlmX2Jsb2NrMT1udWxsKSwxJmRpcnR5KXtsZXQgaTtmb3IoZWFjaF92YWx1ZT1PYmplY3Qua2V5cyhjdHhbMF0uZXhhbXBsZXMpLGk9MDtpPGVhY2hfdmFsdWUubGVuZ3RoO2krPTEpe2NvbnN0IGNoaWxkX2N0eD1nZXRfZWFjaF9jb250ZXh0KGN0eCxlYWNoX3ZhbHVlLGkpO2VhY2hfYmxvY2tzW2ldP2VhY2hfYmxvY2tzW2ldLnAoY2hpbGRfY3R4LGRpcnR5KTooZWFjaF9ibG9ja3NbaV09Y3JlYXRlX2VhY2hfYmxvY2soY2hpbGRfY3R4KSxlYWNoX2Jsb2Nrc1tpXS5jKCksZWFjaF9ibG9ja3NbaV0ubShkaXYyLG51bGwpKX1mb3IoO2k8ZWFjaF9ibG9ja3MubGVuZ3RoO2krPTEpZWFjaF9ibG9ja3NbaV0uZCgxKTtlYWNoX2Jsb2Nrcy5sZW5ndGg9ZWFjaF92YWx1ZS5sZW5ndGh9fSxkKGRldGFjaGluZyl7ZGV0YWNoaW5nJiZkZXRhY2goZGl2NCksaWZfYmxvY2swJiZpZl9ibG9jazAuZCgpLGRlc3Ryb3lfZWFjaChlYWNoX2Jsb2Nrc18xLGRldGFjaGluZyksaWZfYmxvY2sxJiZpZl9ibG9jazEuZCgpLGRlc3Ryb3lfZWFjaChlYWNoX2Jsb2NrcyxkZXRhY2hpbmcpfX19ZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzIoY3R4KXtsZXQgdDtyZXR1cm57Yygpe3Q9dGV4dChcInNcIil9LG0odGFyZ2V0LGFuY2hvcil7aW5zZXJ0KHRhcmdldCx0LGFuY2hvcil9LGQoZGV0YWNoaW5nKXtkZXRhY2hpbmcmJmRldGFjaCh0KX19fWZ1bmN0aW9uIGNyZWF0ZV9lYWNoX2Jsb2NrXzEoY3R4KXtsZXQgc3BhbixhLHQwLHQxLG1vdW50ZWQsZGlzcG9zZSx0MF92YWx1ZT1jdHhbMTJdK1wiXCI7ZnVuY3Rpb24gY2xpY2tfaGFuZGxlcigpe3JldHVybiBjdHhbOV0oY3R4WzEyXSl9cmV0dXJue2MoKXtzcGFuPWVsZW1lbnQoXCJzcGFuXCIpLGE9ZWxlbWVudChcImFcIiksdDA9dGV4dCh0MF92YWx1ZSksdDE9c3BhY2UoKSxhdHRyKGEsXCJocmVmXCIsXCJqYXZhc2NyaXB0OlwiKSxhdHRyKHNwYW4sXCJjbGFzc1wiLFwidGV4dC1zbSBtLTEgcC0xXCIpLHNldF9zdHlsZShzcGFuLFwid2hpdGUtc3BhY2VcIixcIm5vd3JhcFwiKX0sbSh0YXJnZXQsYW5jaG9yKXtpbnNlcnQodGFyZ2V0LHNwYW4sYW5jaG9yKSxhcHBlbmQoc3BhbixhKSxhcHBlbmQoYSx0MCksYXBwZW5kKHNwYW4sdDEpLG1vdW50ZWR8fChkaXNwb3NlPWxpc3RlbihhLFwiY2xpY2tcIixjbGlja19oYW5kbGVyKSxtb3VudGVkPSEwKX0scChuZXdfY3R4LGRpcnR5KXtjdHg9bmV3X2N0eCwxJmRpcnR5JiZ0MF92YWx1ZSE9PSh0MF92YWx1ZT1jdHhbMTJdK1wiXCIpJiZzZXRfZGF0YSh0MCx0MF92YWx1ZSl9LGQoZGV0YWNoaW5nKXtkZXRhY2hpbmcmJmRldGFjaChzcGFuKSxtb3VudGVkPSExLGRpc3Bvc2UoKX19fWZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18xKGN0eCl7bGV0IHQ7cmV0dXJue2MoKXt0PXRleHQoXCJzXCIpfSxtKHRhcmdldCxhbmNob3Ipe2luc2VydCh0YXJnZXQsdCxhbmNob3IpfSxkKGRldGFjaGluZyl7ZGV0YWNoaW5nJiZkZXRhY2godCl9fX1mdW5jdGlvbiBjcmVhdGVfZWFjaF9ibG9jayhjdHgpe2xldCBzcGFuLGEsdDAsYV9ocmVmX3ZhbHVlLHQxLHQwX3ZhbHVlPWN0eFsxMl0rXCJcIjtyZXR1cm57Yygpe3NwYW49ZWxlbWVudChcInNwYW5cIiksYT1lbGVtZW50KFwiYVwiKSx0MD10ZXh0KHQwX3ZhbHVlKSx0MT1zcGFjZSgpLGF0dHIoYSxcImhyZWZcIixhX2hyZWZfdmFsdWU9Y3R4WzBdLmV4YW1wbGVzW2N0eFsxMl1dKSxhdHRyKGEsXCJ0YXJnZXRcIixcIl9ibGFua1wiKSxhdHRyKHNwYW4sXCJjbGFzc1wiLFwidGV4dC1zbSBtLTEgcC0xXCIpLHNldF9zdHlsZShzcGFuLFwid2hpdGUtc3BhY2VcIixcIm5vd3JhcFwiKX0sbSh0YXJnZXQsYW5jaG9yKXtpbnNlcnQodGFyZ2V0LHNwYW4sYW5jaG9yKSxhcHBlbmQoc3BhbixhKSxhcHBlbmQoYSx0MCksYXBwZW5kKHNwYW4sdDEpfSxwKGN0eCxkaXJ0eSl7MSZkaXJ0eSYmdDBfdmFsdWUhPT0odDBfdmFsdWU9Y3R4WzEyXStcIlwiKSYmc2V0X2RhdGEodDAsdDBfdmFsdWUpLDEmZGlydHkmJmFfaHJlZl92YWx1ZSE9PShhX2hyZWZfdmFsdWU9Y3R4WzBdLmV4YW1wbGVzW2N0eFsxMl1dKSYmYXR0cihhLFwiaHJlZlwiLGFfaHJlZl92YWx1ZSl9LGQoZGV0YWNoaW5nKXtkZXRhY2hpbmcmJmRldGFjaChzcGFuKX19fWZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudChjdHgpe2xldCBkaXYzLGRpdjAsdDAsdDEsdDIsdDMsZGl2MixkaXYxLGlucHV0MCxpbnB1dDBfaWRfdmFsdWUsdDQsaW5wdXQxLGlucHV0MV9uYW1lX3ZhbHVlLHQ1LGxhYmVsLHQ2LGxhYmVsX2Zvcl92YWx1ZSx0Nyx0OCxtb3VudGVkLGRpc3Bvc2UsdDBfdmFsdWU9Y3R4WzBdLmxhYmVsK1wiXCIsdDZfdmFsdWU9KGN0eFszXXx8XCJDaG9vc2UgZmlsZVwiKStcIlwiLHNob3dfaWY9Y3R4WzBdLmV4YW1wbGVzJiZPYmplY3Qua2V5cyhjdHhbMF0uZXhhbXBsZXMpLmxlbmd0aD4wLGlmX2Jsb2NrMD1jdHhbMF0uZGVzY3JpcHRpb24mJmNyZWF0ZV9pZl9ibG9ja183KGN0eCksaWZfYmxvY2sxPXZvaWQgMCE9PWN0eFsyXSYmY3JlYXRlX2lmX2Jsb2NrXzMoY3R4KSxpZl9ibG9jazI9c2hvd19pZiYmY3JlYXRlX2lmX2Jsb2NrKGN0eCk7cmV0dXJue2MoKXtkaXYzPWVsZW1lbnQoXCJkaXZcIiksZGl2MD1lbGVtZW50KFwiZGl2XCIpLHQwPXRleHQodDBfdmFsdWUpLHQxPXNwYWNlKCksaWZfYmxvY2swJiZpZl9ibG9jazAuYygpLHQyPXRleHQoXCI6XCIpLHQzPXNwYWNlKCksZGl2Mj1lbGVtZW50KFwiZGl2XCIpLGRpdjE9ZWxlbWVudChcImRpdlwiKSxpbnB1dDA9ZWxlbWVudChcImlucHV0XCIpLHQ0PXNwYWNlKCksaW5wdXQxPWVsZW1lbnQoXCJpbnB1dFwiKSx0NT1zcGFjZSgpLGxhYmVsPWVsZW1lbnQoXCJsYWJlbFwiKSx0Nj10ZXh0KHQ2X3ZhbHVlKSx0Nz1zcGFjZSgpLGlmX2Jsb2NrMSYmaWZfYmxvY2sxLmMoKSx0OD1zcGFjZSgpLGlmX2Jsb2NrMiYmaWZfYmxvY2syLmMoKSxhdHRyKGRpdjAsXCJjbGFzc1wiLFwiY29sLWxnLTMgYm9sZCB0ZXh0LWxnLXJpZ2h0IG15LWF1dG9cIiksYXR0cihpbnB1dDAsXCJ0eXBlXCIsXCJmaWxlXCIpLGF0dHIoaW5wdXQwLFwiY2xhc3NcIixcImN1c3RvbS1maWxlLWlucHV0XCIpLGF0dHIoaW5wdXQwLFwiaWRcIixpbnB1dDBfaWRfdmFsdWU9Y3R4WzBdLm5hbWUpLGF0dHIoaW5wdXQxLFwidHlwZVwiLFwidGV4dFwiKSxhdHRyKGlucHV0MSxcImNsYXNzXCIsXCJoaWRkZW5cIiksYXR0cihpbnB1dDEsXCJuYW1lXCIsaW5wdXQxX25hbWVfdmFsdWU9Y3R4WzBdLm5hbWUpLGF0dHIobGFiZWwsXCJjbGFzc1wiLFwiY3VzdG9tLWZpbGUtbGFiZWxcIiksYXR0cihsYWJlbCxcImZvclwiLGxhYmVsX2Zvcl92YWx1ZT1jdHhbMF0ubmFtZSksYXR0cihkaXYxLFwiY2xhc3NcIixcImN1c3RvbS1maWxlXCIpLGF0dHIoZGl2MSxcImRyb3B6b25lXCIsXCJjb3B5XCIpLGF0dHIoZGl2MixcImNsYXNzXCIsXCJjb2wtbGctNiBwdC0yIHB0LWxnLTBcIiksYXR0cihkaXYzLFwiY2xhc3NcIixcInJvdyBweC00IHB4LWxnLTMgcGItNFwiKX0sbSh0YXJnZXQsYW5jaG9yKXtpbnNlcnQodGFyZ2V0LGRpdjMsYW5jaG9yKSxhcHBlbmQoZGl2MyxkaXYwKSxhcHBlbmQoZGl2MCx0MCksYXBwZW5kKGRpdjAsdDEpLGlmX2Jsb2NrMCYmaWZfYmxvY2swLm0oZGl2MCxudWxsKSxhcHBlbmQoZGl2MCx0MiksYXBwZW5kKGRpdjMsdDMpLGFwcGVuZChkaXYzLGRpdjIpLGFwcGVuZChkaXYyLGRpdjEpLGFwcGVuZChkaXYxLGlucHV0MCksY3R4WzddKGlucHV0MCksYXBwZW5kKGRpdjEsdDQpLGFwcGVuZChkaXYxLGlucHV0MSksc2V0X2lucHV0X3ZhbHVlKGlucHV0MSxjdHhbNF0pLGFwcGVuZChkaXYxLHQ1KSxhcHBlbmQoZGl2MSxsYWJlbCksYXBwZW5kKGxhYmVsLHQ2KSxhcHBlbmQoZGl2Mix0NyksaWZfYmxvY2sxJiZpZl9ibG9jazEubShkaXYyLG51bGwpLGFwcGVuZChkaXYyLHQ4KSxpZl9ibG9jazImJmlmX2Jsb2NrMi5tKGRpdjIsbnVsbCksbW91bnRlZHx8KGRpc3Bvc2U9bGlzdGVuKGlucHV0MSxcImlucHV0XCIsY3R4WzhdKSxtb3VudGVkPSEwKX0scChjdHgsW2RpcnR5XSl7MSZkaXJ0eSYmdDBfdmFsdWUhPT0odDBfdmFsdWU9Y3R4WzBdLmxhYmVsK1wiXCIpJiZzZXRfZGF0YSh0MCx0MF92YWx1ZSksY3R4WzBdLmRlc2NyaXB0aW9uP2lmX2Jsb2NrMD9pZl9ibG9jazAucChjdHgsZGlydHkpOigoaWZfYmxvY2swPWNyZWF0ZV9pZl9ibG9ja183KGN0eCkpLmMoKSxpZl9ibG9jazAubShkaXYwLHQyKSk6aWZfYmxvY2swJiYoaWZfYmxvY2swLmQoMSksaWZfYmxvY2swPW51bGwpLDEmZGlydHkmJmlucHV0MF9pZF92YWx1ZSE9PShpbnB1dDBfaWRfdmFsdWU9Y3R4WzBdLm5hbWUpJiZhdHRyKGlucHV0MCxcImlkXCIsaW5wdXQwX2lkX3ZhbHVlKSwxJmRpcnR5JiZpbnB1dDFfbmFtZV92YWx1ZSE9PShpbnB1dDFfbmFtZV92YWx1ZT1jdHhbMF0ubmFtZSkmJmF0dHIoaW5wdXQxLFwibmFtZVwiLGlucHV0MV9uYW1lX3ZhbHVlKSwxNiZkaXJ0eSYmaW5wdXQxLnZhbHVlIT09Y3R4WzRdJiZzZXRfaW5wdXRfdmFsdWUoaW5wdXQxLGN0eFs0XSksOCZkaXJ0eSYmdDZfdmFsdWUhPT0odDZfdmFsdWU9KGN0eFszXXx8XCJDaG9vc2UgZmlsZVwiKStcIlwiKSYmc2V0X2RhdGEodDYsdDZfdmFsdWUpLDEmZGlydHkmJmxhYmVsX2Zvcl92YWx1ZSE9PShsYWJlbF9mb3JfdmFsdWU9Y3R4WzBdLm5hbWUpJiZhdHRyKGxhYmVsLFwiZm9yXCIsbGFiZWxfZm9yX3ZhbHVlKSx2b2lkIDAhPT1jdHhbMl0/aWZfYmxvY2sxP2lmX2Jsb2NrMS5wKGN0eCxkaXJ0eSk6KChpZl9ibG9jazE9Y3JlYXRlX2lmX2Jsb2NrXzMoY3R4KSkuYygpLGlmX2Jsb2NrMS5tKGRpdjIsdDgpKTppZl9ibG9jazEmJihpZl9ibG9jazEuZCgxKSxpZl9ibG9jazE9bnVsbCksMSZkaXJ0eSYmKHNob3dfaWY9Y3R4WzBdLmV4YW1wbGVzJiZPYmplY3Qua2V5cyhjdHhbMF0uZXhhbXBsZXMpLmxlbmd0aD4wKSxzaG93X2lmP2lmX2Jsb2NrMj9pZl9ibG9jazIucChjdHgsZGlydHkpOigoaWZfYmxvY2syPWNyZWF0ZV9pZl9ibG9jayhjdHgpKS5jKCksaWZfYmxvY2syLm0oZGl2MixudWxsKSk6aWZfYmxvY2syJiYoaWZfYmxvY2syLmQoMSksaWZfYmxvY2syPW51bGwpfSxpOm5vb3Asbzpub29wLGQoZGV0YWNoaW5nKXtkZXRhY2hpbmcmJmRldGFjaChkaXYzKSxpZl9ibG9jazAmJmlmX2Jsb2NrMC5kKCksY3R4WzddKG51bGwpLGlmX2Jsb2NrMSYmaWZfYmxvY2sxLmQoKSxpZl9ibG9jazImJmlmX2Jsb2NrMi5kKCksbW91bnRlZD0hMSxkaXNwb3NlKCl9fX1mdW5jdGlvbiBpbnN0YW5jZSgkJHNlbGYsJCRwcm9wcywkJGludmFsaWRhdGUpe2xldCBmaWxlRmllbGQsc3RhdGUsZmlsZW5hbWUsZnVsbF9maWxlbmFtZSx7d2luZG93OndpbmRvd309JCRwcm9wcyx7YXJnczphcmdzfT0kJHByb3BzO2FzeW5jIGZ1bmN0aW9uIGxvYWRfZmlsZShuYW1lLHVybCxmaWxlKXstMT09PXVybC5pbmRleE9mKFwiOi8vXCIpJiYodXJsPW5ldyBVUkwodXJsLGRvY3VtZW50LmJhc2VVUkkpLmhyZWYpLChhd2FpdCBnZXRfcmVxdWlyZSh3aW5kb3csXCJzb2NrZXRcIikpLmVtaXQoXCJkb3dubG9hZF9zdGFydFwiLHtuYW1lOm5hbWUsdXJsOm5ldyBVUkwodXJsKS5ocmVmLGZpbGU6ZmlsZX0pfW9uTW91bnQoYXN5bmMoKT0+e3dpbmRvdy5yZXF1aXJlLmNvbmZpZyh7cGF0aHM6e1wic29ja2V0aW8tZmlsZS11cGxvYWRcIjpgJHt3aW5kb3cuX2NvbmZpZy5TVEFUSUNfVVJMfWpzL2xpYi9zb2NrZXRpby1maWxlLXVwbG9hZC9jbGllbnQubWluYH0sc2hpbTp7XCJzb2NrZXRpby1maWxlLXVwbG9hZFwiOntleHBvcnRzOlwiU29ja2V0SU9GaWxlVXBsb2FkXCJ9fX0pO2NvbnN0W3NvY2tldCxTb2NrZXRJT0ZpbGVVcGxvYWRdPWF3YWl0IGdldF9yZXF1aXJlKHdpbmRvdyxbXCJzb2NrZXRcIixcInNvY2tldGlvLWZpbGUtdXBsb2FkXCJdKTthd2FpdCBhc3luYyBmdW5jdGlvbihzb2NrZXQpe3NvY2tldC5vbihcImRvd25sb2FkX3F1ZXVlZFwiLGZ1bmN0aW9uKGV2dCl7ZXZ0Lm5hbWU9PT1hcmdzLm5hbWUmJiQkaW52YWxpZGF0ZSgyLHN0YXRlPXtzdHJpcGVkOiEwLGJnOlwicHJpbWFyeVwiLHByb2dyZXNzOjB9KX0pLHNvY2tldC5vbihcImRvd25sb2FkX3N0YXJ0XCIsZnVuY3Rpb24oZXZ0KXtldnQubmFtZT09PWFyZ3MubmFtZSYmJCRpbnZhbGlkYXRlKDIsc3RhdGU9ey4uLnN0YXRlLGFuaW1hdGVkOiEwfSl9KSxzb2NrZXQub24oXCJkb3dubG9hZF9wcm9ncmVzc1wiLGZ1bmN0aW9uKGV2dCl7ZXZ0Lm5hbWU9PT1hcmdzLm5hbWUmJihldnQudG90YWxfc2l6ZTwwPyQkaW52YWxpZGF0ZSgyLHN0YXRlPXsuLi5zdGF0ZSxwcm9ncmVzczoyNSxiZzpcIndhcm5pbmdcIn0pOjA9PT1ldnQudG90YWxfc2l6ZT8kJGludmFsaWRhdGUoMixzdGF0ZT17Li4uc3RhdGUscHJvZ3Jlc3M6MTAwfSk6JCRpbnZhbGlkYXRlKDIsc3RhdGU9ey4uLnN0YXRlLHByb2dyZXNzOmV2dC5jaHVuaypldnQuY2h1bmtfc2l6ZS9ldnQudG90YWxfc2l6ZSoxMDB8MH0pKX0pLHNvY2tldC5vbihcImRvd25sb2FkX2NvbXBsZXRlXCIsZnVuY3Rpb24oZXZ0KXtldnQubmFtZT09PWFyZ3MubmFtZSYmKCQkaW52YWxpZGF0ZSgyLHN0YXRlPXsuLi5zdGF0ZSxiZzpcInN1Y2Nlc3NcIixhbmltYXRlZDohMSxzdHJpcGVkOiExLHByb2dyZXNzOjEwMH0pLCQkaW52YWxpZGF0ZSgzLGZpbGVuYW1lPWV2dC5maWxlbmFtZSksJCRpbnZhbGlkYXRlKDQsZnVsbF9maWxlbmFtZT1ldnQuZnVsbF9maWxlbmFtZSkpfSksc29ja2V0Lm9uKFwiZG93bmxvYWRfZXJyb3JcIixmdW5jdGlvbihldnQpe2V2dC5uYW1lPT09YXJncy5uYW1lJiYoXCJIVFRQIEVycm9yIDQwNDogTm90IEZvdW5kXCI9PT1ldnQuZXJyb3I/JCRpbnZhbGlkYXRlKDIsc3RhdGU9e3Byb2dyZXNzOjEwMCx1cmw6ZXZ0LnVybCxiZzpcImRhbmdlclwiLGVycm9yOmV2dC5lcnJvcixzdHJpcGVkOiExLGFuaW1hdGVkOiExfSk6JCRpbnZhbGlkYXRlKDIsc3RhdGU9e3Byb2dyZXNzOjEwMCx1cmw6ZXZ0LnVybCxiZzpcIndhcm5pbmdcIixlcnJvcjpldnQuZXJyb3Isc3RyaXBlZDohMSxhbmltYXRlZDohMX0pKX0pfShzb2NrZXQpLGF3YWl0IGFzeW5jIGZ1bmN0aW9uKHNpb2Z1KXtzaW9mdS5saXN0ZW5PbklucHV0KGZpbGVGaWVsZCksc2lvZnUuYWRkRXZlbnRMaXN0ZW5lcihcInN0YXJ0XCIsZnVuY3Rpb24oZXZ0KXskJGludmFsaWRhdGUoMixzdGF0ZT17c3RyaXBlZDohMCxiZzpcInByaW1hcnlcIixwcm9ncmVzczowfSl9KSxzaW9mdS5hZGRFdmVudExpc3RlbmVyKFwicHJvZ3Jlc3NcIixmdW5jdGlvbihldnQpeyQkaW52YWxpZGF0ZSgyLHN0YXRlPXsuLi5zdGF0ZSxwcm9ncmVzczpldnQuYnl0ZXNMb2FkZWQvZXZ0LmZpbGUuc2l6ZSoxMDB8MCxhbmltYXRlZDohMH0pfSksc2lvZnUuYWRkRXZlbnRMaXN0ZW5lcihcImNvbXBsZXRlXCIsZnVuY3Rpb24oZXZ0KXskJGludmFsaWRhdGUoMixzdGF0ZT17cHJvZ3Jlc3M6MTAwLGJnOlwic3VjY2Vzc1wiLHN0cmlwZWQ6ITEsYW5pbWF0ZWQ6ITF9KSwkJGludmFsaWRhdGUoMyxmaWxlbmFtZT1ldnQuZmlsZS5uYW1lKSwkJGludmFsaWRhdGUoNCxmdWxsX2ZpbGVuYW1lPWV2dC5kZXRhaWwuZnVsbF9maWxlbmFtZSl9KSxzaW9mdS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIixmdW5jdGlvbihldnQpe2NvbnNvbGUuZXJyb3IoZXZ0KSwkJGludmFsaWRhdGUoMixzdGF0ZT17cHJvZ3Jlc3M6MTAwLGJnOlwiZGFuZ2VyXCIsZXJyb3I6ZXZ0LmVycm9yLHN0cmlwZWQ6ITEsYW5pbWF0ZWQ6ITF9KX0pfShuZXcgU29ja2V0SU9GaWxlVXBsb2FkKHNvY2tldCkpfSk7cmV0dXJuICQkc2VsZi4kJHNldD0oJCRwcm9wcz0+e1wid2luZG93XCJpbiAkJHByb3BzJiYkJGludmFsaWRhdGUoNix3aW5kb3c9JCRwcm9wcy53aW5kb3cpLFwiYXJnc1wiaW4gJCRwcm9wcyYmJCRpbnZhbGlkYXRlKDAsYXJncz0kJHByb3BzLmFyZ3MpfSksW2FyZ3MsZmlsZUZpZWxkLHN0YXRlLGZpbGVuYW1lLGZ1bGxfZmlsZW5hbWUsbG9hZF9maWxlLHdpbmRvdyxmdW5jdGlvbigkJHZhbHVlKXtiaW5kaW5nX2NhbGxiYWNrc1skJHZhbHVlP1widW5zaGlmdFwiOlwicHVzaFwiXSgoKT0+eyQkaW52YWxpZGF0ZSgxLGZpbGVGaWVsZD0kJHZhbHVlKX0pfSxmdW5jdGlvbigpe2Z1bGxfZmlsZW5hbWU9dGhpcy52YWx1ZSwkJGludmFsaWRhdGUoNCxmdWxsX2ZpbGVuYW1lKX0sZXhhbXBsZV9uYW1lPT5sb2FkX2ZpbGUoYXJncy5uYW1lLGFyZ3MuZXhhbXBsZXNbZXhhbXBsZV9uYW1lXSxleGFtcGxlX25hbWUpXX12YXIgXyRGaWxlRmllbGRfMz1jbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudHtjb25zdHJ1Y3RvcihvcHRpb25zKXt2YXIgc3R5bGU7c3VwZXIoKSxkb2N1bWVudF8xLmdldEVsZW1lbnRCeUlkKFwic3ZlbHRlLTd0M2FxNC1zdHlsZVwiKXx8KChzdHlsZT1lbGVtZW50KFwic3R5bGVcIikpLmlkPVwic3ZlbHRlLTd0M2FxNC1zdHlsZVwiLHN0eWxlLnRleHRDb250ZW50PVwiLnByb2dyZXNzLnN2ZWx0ZS03dDNhcTR7aGVpZ2h0OjI1cHg7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOmdyZXl9LnByb2dyZXNzLWJhci5zdmVsdGUtN3QzYXE0e2hlaWdodDoxMDAlO2JhY2tncm91bmQtY29sb3I6Ymx1ZX0ucHJvZ3Jlc3MtYmFyLmJnLXN1Y2Nlc3Muc3ZlbHRlLTd0M2FxNHtoZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOmdyZWVufVwiLGFwcGVuZChkb2N1bWVudF8xLmhlYWQsc3R5bGUpKSxpbml0KHRoaXMsb3B0aW9ucyxpbnN0YW5jZSxjcmVhdGVfZnJhZ21lbnQsc2FmZV9ub3RfZXF1YWwse3dpbmRvdzo2LGFyZ3M6MH0pfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrWnBiR1ZHYVdWc1pDNXpkbVZzZEdVaVhTd2libUZ0WlhNaU9sc2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWpCc1owSkJlVGxDUVVFc2FVSkJRVUZETEVOQlFVRkJMR05CUVVGQkxHVkJRVUZCTEVOQlFVRkJMRmRCUVVGQkxFTkJRVUZCTEU5QlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVsQlFVRkJMRXRCUVVGQkxFTkJRVUZCTEV0QlFVRkJMRVZCUVVGQkxFTkJRVUZCTEZWQlFVRkJMRU5CUVVGQkxHTkJRVUZCTEVOQlFVRkJMSEZDUVVGQlFTeERRVUZCUVN4SFFVRkJRU3hEUVVGQlFTeExRVUZCUVN4RFFVRkJRU3hQUVVGQlFTeERRVUZCUVN4UFFVRkJRU3hEUVVGQlFTeEZRVUZCUVN4RlFVRkJRU3hEUVVGQlFTeHhRa0ZCUVVFc1EwRkJRVUVzUzBGQlFVRXNRMEZCUVVFc1YwRkJRVUVzUTBGQlFVRXNLMDFCUVVGQkxFTkJRVUZCTEUxQlFVRkJMRU5CUVVGQkxGVkJRVUZCTEVOQlFVRkJMRWxCUVVGQkxFTkJRVUZCTEV0QlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRWxCUVVGQkxFTkJRVUZCTEVsQlFVRkJMRU5CUVVGQkxFOUJRVUZCTEVOQlFVRkJMRkZCUVVGQkxFTkJRVUZCTEdWQlFVRkJMRU5CUVVGQkxHTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFMUJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVsQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sdHVkV3hzWFgwPSJdfQ==