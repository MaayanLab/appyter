!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;((t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).FileField||(t.FileField={})).svelte=e()}}((function(){var e={};(function(t){"use strict";function n(){}Object.defineProperty(e,"__esModule",{value:!0});function o(e){return e()}function r(){return Object.create(null)}function i(e){e.forEach(o)}function l(e){return"function"==typeof e}function a(e){return 0===Object.keys(e).length}const s="undefined"!=typeof window;e.raf=s?e=>requestAnimationFrame(e):n;new Set;function u(e,t){e.appendChild(t)}function c(e,t,n){e.insertBefore(t,n||null)}function d(e){e.parentNode.removeChild(e)}function f(e){return document.createElement(e)}function p(e){return document.createTextNode(e)}function m(e,t,n,o){return e.addEventListener(t,n,o),()=>e.removeEventListener(t,n,o)}function g(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function b(e){return Array.from(e.childNodes)}function h(e,t){const n=document.createEvent("CustomEvent");return n.initCustomEvent(e,!1,!1,t),n}new Set;function y(t){e.current_component=t}function w(){if(!e.current_component)throw new Error("Function called outside component initialization");return e.current_component}const v=[],_=[],$=[],x=[],k=Promise.resolve();let E=!1;function C(){E||(E=!0,k.then(P))}function j(e){$.push(e)}let q=!1;const O=new Set;function P(){if(!q){q=!0;do{for(let e=0;e<v.length;e+=1){const t=v[e];y(t),L(t.$$)}for(v.length=0;_.length;)_.pop()();for(let e=0;e<$.length;e+=1){const t=$[e];O.has(t)||(O.add(t),t())}$.length=0}while(v.length);for(;x.length;)x.pop()();E=!1,q=!1,O.clear()}}function L(e){if(null!==e.fragment){e.update(),i(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(j)}}const S=new Set;function U(e,t){e&&e.i&&(S.delete(e),e.i(t))}const T="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:t;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);function M(e,t,n){const{fragment:r,on_mount:a,on_destroy:s,after_update:u}=e.$$;r&&r.m(t,n),j(()=>{const t=a.map(o).filter(l);s?s.push(...t):i(t),e.$$.on_mount=[]}),u.forEach(j)}function D(e,t){const n=e.$$;null!==n.fragment&&(i(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}"function"==typeof HTMLElement&&HTMLElement;class F{$destroy(){D(this,1),this.$destroy=n}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){this.$$set&&!a(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}e.SvelteComponent=F,e.SvelteComponentDev=class extends F{constructor(e){if(!e||!e.target&&!e.$$inline)throw new Error("'target' is a required option");super()}$destroy(){super.$destroy(),this.$destroy=()=>{console.warn("Component was already destroyed")}}$capture_state(){}$inject_state(){}},e.afterUpdate=function(e){w().$$.after_update.push(e)},e.append=u,e.attr=g,e.beforeUpdate=function(e){w().$$.before_update.push(e)},e.binding_callbacks=_,e.createEventDispatcher=function(){const e=w();return(t,n)=>{const o=e.$$.callbacks[t];if(o){const r=h(t,n);o.slice().forEach(t=>{t.call(e,r)})}}},e.destroy_each=function(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)},e.detach=d,e.element=f,e.getContext=function(e){return w().$$.context.get(e)},e.globals=T,e.init=function(t,o,l,a,s,u,c=[-1]){const f=e.current_component;y(t);const p=o.props||{},m=t.$$={fragment:null,ctx:null,props:u,update:n,not_equal:s,bound:r(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(f?f.$$.context:[]),callbacks:r(),dirty:c,skip_bound:!1};let g=!1;if(m.ctx=l?l(t,p,(e,n,...o)=>{const r=o.length?o[0]:n;return m.ctx&&s(m.ctx[e],m.ctx[e]=r)&&(!m.skip_bound&&m.bound[e]&&m.bound[e](r),g&&function(e,t){-1===e.$$.dirty[0]&&(v.push(e),C(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(t,e)),n}):[],m.update(),g=!0,i(m.before_update),m.fragment=!!a&&a(m.ctx),o.target){if(o.hydrate){const e=b(o.target);m.fragment&&m.fragment.l(e),e.forEach(d)}else m.fragment&&m.fragment.c();o.intro&&U(t.$$.fragment),M(t,o.target,o.anchor),P()}y(f)},e.insert=c,e.listen=m,e.noop=n,e.onDestroy=function(e){w().$$.on_destroy.push(e)},e.onMount=function(e){w().$$.on_mount.push(e)},e.safe_not_equal=function(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e},e.setContext=function(e,t){w().$$.context.set(e,t)},e.set_data=function(e,t){t=""+t,e.wholeText!==t&&(e.data=t)},e.set_input_value=function(e,t){e.value=null==t?"":t},e.set_style=function(e,t,n,o){e.style.setProperty(t,n,o?"important":"")},e.space=function(){return p(" ")},e.text=p,e.tick=function(){return C(),k},e.toggle_class=function(e,t,n){e.classList[n?"add":"remove"](t)}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var t={};Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"SvelteComponent",{enumerable:!0,get:function(){return e.SvelteComponentDev}}),Object.defineProperty(t,"afterUpdate",{enumerable:!0,get:function(){return e.afterUpdate}}),Object.defineProperty(t,"beforeUpdate",{enumerable:!0,get:function(){return e.beforeUpdate}}),Object.defineProperty(t,"createEventDispatcher",{enumerable:!0,get:function(){return e.createEventDispatcher}}),Object.defineProperty(t,"getContext",{enumerable:!0,get:function(){return e.getContext}}),Object.defineProperty(t,"onDestroy",{enumerable:!0,get:function(){return e.onDestroy}}),Object.defineProperty(t,"onMount",{enumerable:!0,get:function(){return e.onMount}}),Object.defineProperty(t,"setContext",{enumerable:!0,get:function(){return e.setContext}}),Object.defineProperty(t,"tick",{enumerable:!0,get:function(){return e.tick}});const{SvelteComponent:n,append:o,attr:r,binding_callbacks:i,destroy_each:l,detach:a,element:s,globals:u,init:c,insert:d,listen:f,noop:p,safe_not_equal:m,set_data:g,set_input_value:b,set_style:h,space:y,text:w,toggle_class:v}=e,{document:_}=u,{onMount:$}=t;function x(e,t,n){const o=e.slice();return o[16]=t[n],o}function k(e){let t,n,i,l;return{c(){t=s("sup"),n=s("i"),l=y(),r(n,"class","far fa-question-circle ml-1"),r(n,"data-toggle","tooltip"),r(n,"title",""),r(n,"data-original-title",i=e[0].description)},m(e,r){d(e,t,r),o(t,n),d(e,l,r)},p(e,t){1&t&&i!==(i=e[0].description)&&r(n,"data-original-title",i)},d(e){e&&a(t),e&&a(l)}}}function E(e){let t,n,i,l,u,c,f,p=e[2].error&&C(e),m=e[2].warning&&q(e);return{c(){t=s("div"),n=s("div"),i=s("div"),c=y(),p&&p.c(),f=y(),m&&m.c(),r(i,"class",l="progress-bar bg-"+e[2].bg+" svelte-7t3aq4"),r(i,"role","progressbar"),r(i,"aria-valuemin","0"),r(i,"aria-valuemax","100"),r(i,"aria-valuenow",u=e[2].progress),h(i,"width",e[2].progress+"%"),v(i,"progress-bar-striped",e[2].striped),v(i,"progress-bar-animated",e[2].animated),r(n,"class","progress bg-light svelte-7t3aq4")},m(e,r){d(e,t,r),o(t,n),o(n,i),o(t,c),p&&p.m(t,null),o(t,f),m&&m.m(t,null)},p(e,n){4&n&&l!==(l="progress-bar bg-"+e[2].bg+" svelte-7t3aq4")&&r(i,"class",l),4&n&&u!==(u=e[2].progress)&&r(i,"aria-valuenow",u),4&n&&h(i,"width",e[2].progress+"%"),4&n&&v(i,"progress-bar-striped",e[2].striped),4&n&&v(i,"progress-bar-animated",e[2].animated),e[2].error?p?p.p(e,n):((p=C(e)).c(),p.m(t,f)):p&&(p.d(1),p=null),e[2].warning?m?m.p(e,n):((m=q(e)).c(),m.m(t,null)):m&&(m.d(1),m=null)},d(e){e&&a(t),p&&p.d(),m&&m.d()}}}function C(e){let t,n,i,l,u=e[2].error+"",c=e[2].url&&j(e);return{c(){t=s("div"),n=w("Error downloading file: "),i=w(u),l=y(),c&&c.c(),r(t,"class","alert alert-danger")},m(e,r){d(e,t,r),o(t,n),o(t,i),o(t,l),c&&c.m(t,null)},p(e,n){4&n&&u!==(u=e[2].error+"")&&g(i,u),e[2].url?c?c.p(e,n):((c=j(e)).c(),c.m(t,null)):c&&(c.d(1),c=null)},d(e){e&&a(t),c&&c.d()}}}function j(e){let t,n,i,l,u=e[2].url+"";return{c(){t=w("from "),n=s("a"),i=w(u),r(n,"href",l=e[2].url),r(n,"target","_blank")},m(e,r){d(e,t,r),d(e,n,r),o(n,i)},p(e,t){4&t&&u!==(u=e[2].url+"")&&g(i,u),4&t&&l!==(l=e[2].url)&&r(n,"href",l)},d(e){e&&a(t),e&&a(n)}}}function q(e){let t,n,i,l,u,c,f,p,m,b,h,v=e[2].error+"",_=e[2].url+"";return{c(){t=s("div"),n=w("Error downloading file: "),i=w(v),l=s("br"),u=y(),(c=s("b")).textContent="It may require user engagement",f=w(", please visit\n            "),p=s("a"),m=w(_),h=w("\n          to download the example file for upload."),r(p,"href",b=e[2].url),r(p,"target","_blank"),r(t,"class","alert alert-warning")},m(e,r){d(e,t,r),o(t,n),o(t,i),o(t,l),o(t,u),o(t,c),o(t,f),o(t,p),o(p,m),o(t,h)},p(e,t){4&t&&v!==(v=e[2].error+"")&&g(i,v),4&t&&_!==(_=e[2].url+"")&&g(m,_),4&t&&b!==(b=e[2].url)&&r(p,"href",b)},d(e){e&&a(t)}}}function O(e){let t,n,r,i=Object.keys(e[0].examples),u=[];for(let o=0;o<i.length;o+=1)u[o]=P(x(e,i,o));return{c(){t=s("ul"),(n=s("span")).textContent="Load example:",r=y();for(let e=0;e<u.length;e+=1)u[e].c();h(t,"list-style-type","none")},m(e,i){d(e,t,i),o(t,n),o(t,r);for(let n=0;n<u.length;n+=1)u[n].m(t,null)},p(e,n){if(33&n){let o;for(i=Object.keys(e[0].examples),o=0;o<i.length;o+=1){const r=x(e,i,o);u[o]?u[o].p(r,n):(u[o]=P(r),u[o].c(),u[o].m(t,null))}for(;o<u.length;o+=1)u[o].d(1);u.length=i.length}},d(e){e&&a(t),l(u,e)}}}function P(e){let t,n,i,l,u,c,p,m=e[16]+"";function b(...t){return e[9](e[16],...t)}return{c(){t=s("li"),n=w("\xa0\n            "),i=s("a"),l=w(m),u=w("\n            \xa0\n          "),r(i,"href","javascript:"),h(t,"display","inline")},m(e,r){d(e,t,r),o(t,n),o(t,i),o(i,l),o(t,u),c||(p=f(i,"click",b),c=!0)},p(t,n){e=t,1&n&&m!==(m=e[16]+"")&&g(l,m)},d(e){e&&a(t),c=!1,p()}}}function L(e){let t,n,i,l,u,c,m,h,v,_,$,x,C,j,q,P,L,S,U,T,M,D=e[0].label+"",F=(e[3]||"Choose file")+"",z=e[0].description&&k(e),A=void 0!==e[2]&&E(e),I=e[0].examples&&O(e);return{c(){t=s("div"),n=s("div"),i=w(D),l=y(),z&&z.c(),u=w(":"),c=y(),m=s("div"),h=s("div"),v=s("input"),$=y(),x=s("input"),j=y(),q=s("label"),P=w(F),S=y(),A&&A.c(),U=y(),I&&I.c(),r(n,"class","col-lg-3 bold text-lg-right my-auto"),r(v,"type","file"),r(v,"class","custom-file-input"),r(v,"id",_=e[0].name),r(x,"type","text"),r(x,"class","hidden"),r(x,"name",C=e[0].name),r(q,"class","custom-file-label"),r(q,"for",L=e[0].name),r(h,"class","custom-file"),r(h,"dropzone","copy"),r(m,"class","col-lg-6 pt-2 pt-lg-0"),r(t,"class","row px-4 px-lg-3 pb-4")},m(r,a){d(r,t,a),o(t,n),o(n,i),o(n,l),z&&z.m(n,null),o(n,u),o(t,c),o(t,m),o(m,h),o(h,v),e[7](v),o(h,$),o(h,x),b(x,e[4]),o(h,j),o(h,q),o(q,P),o(m,S),A&&A.m(m,null),o(m,U),I&&I.m(m,null),T||(M=f(x,"input",e[8]),T=!0)},p(e,[t]){1&t&&D!==(D=e[0].label+"")&&g(i,D),e[0].description?z?z.p(e,t):((z=k(e)).c(),z.m(n,u)):z&&(z.d(1),z=null),1&t&&_!==(_=e[0].name)&&r(v,"id",_),1&t&&C!==(C=e[0].name)&&r(x,"name",C),16&t&&x.value!==e[4]&&b(x,e[4]),8&t&&F!==(F=(e[3]||"Choose file")+"")&&g(P,F),1&t&&L!==(L=e[0].name)&&r(q,"for",L),void 0!==e[2]?A?A.p(e,t):((A=E(e)).c(),A.m(m,U)):A&&(A.d(1),A=null),e[0].examples?I?I.p(e,t):((I=O(e)).c(),I.m(m,null)):I&&(I.d(1),I=null)},i:p,o:p,d(n){n&&a(t),z&&z.d(),e[7](null),A&&A.d(),I&&I.d(),T=!1,M()}}}function S(e,t,n){let o,r,{window:l}=t,{args:a}=t;l.require.config({paths:{"socketio-file-upload":l._config.STATIC_URL+"js/lib/socketio-file-upload/client.min"},shim:{"socketio-file-upload":{exports:"SocketIOFileUpload"}}});let s,u,c,d,f=void 0;async function p(){void 0===f&&(f=await new Promise((e,t)=>l.require(["socket","socketio-file-upload"],(function(t,n){e({socket:t,siofu:new n(t)})}),t)),o=f.socket,r=f.siofu)}async function m(e,t,n){-1===t.indexOf("://")&&(t=new URL(t,document.baseURI).href),await p(),o.emit("download_start",{name:e,url:new URL(t).href,file:n})}return $(async()=>{await p(),await async function(){o.on("download_queued",(function(e){e.name===a.name&&n(2,u={striped:!0,bg:"primary",progress:0})})),o.on("download_start",(function(e){e.name===a.name&&n(2,u={...u,animated:!0})})),o.on("download_progress",(function(e){e.name===a.name&&(e.total_size<0?n(2,u={...u,progress:25,bg:"warning"}):0===e.total_size?n(2,u={...u,progress:100}):n(2,u={...u,progress:e.chunk*e.chunk_size/e.total_size*100|0}))})),o.on("download_complete",(function(e){e.name===a.name&&(n(2,u={...u,bg:"success",animated:!1,progress:100}),n(3,c=e.filename),n(4,d=e.full_filename))})),o.on("download_error",(function(e){e.name===a.name&&("HTTP Error 404: Not Found"===e.error?n(2,u={progress:100,url:e.url,bg:"danger",error:e.error}):n(2,u={progress:100,url:e.url,bg:"warning",error:e.error}))}))}(),await async function(){r.listenOnInput(s),r.addEventListener("start",(function(e){n(2,u={striped:!0,animated:!0,bg:"primary",progress:0})})),r.addEventListener("progress",(function(e){n(2,u={...u,progress:e.bytesLoaded/e.file.size*100|0})})),r.addEventListener("complete",(function(e){n(2,u={progress:100,bg:"success"}),n(3,c=e.file.name),n(4,d=e.detail.full_filename)})),r.addEventListener("error",(function(e){console.error(e),n(2,u={progress:100,bg:"danger",error:e.error})}))}()}),e.$$set=e=>{"window"in e&&n(6,l=e.window),"args"in e&&n(0,a=e.args)},[a,s,u,c,d,m,l,function(e){i[e?"unshift":"push"](()=>{n(1,s=e)})},function(){d=this.value,n(4,d)},e=>m(a.name,a.examples[e],e)]}return class extends n{constructor(e){var t;super(),_.getElementById("svelte-7t3aq4-style")||((t=s("style")).id="svelte-7t3aq4-style",t.textContent=".progress.svelte-7t3aq4{height:25px;width:100%;background-color:grey}.progress-bar.svelte-7t3aq4{height:100%;background-color:blue}.progress-bar.bg-success.svelte-7t3aq4{height:100%;background-color:green}",o(_.head,t)),c(this,e,S,L,m,{window:6,args:0})}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,