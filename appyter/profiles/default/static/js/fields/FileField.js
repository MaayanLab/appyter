!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;((t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).FileField||(t.FileField={})).svelte=e()}}((function(){var e={};(function(t){(function(){"use strict";function n(){}Object.defineProperty(e,"__esModule",{value:!0});function r(e){return e()}function o(){return Object.create(null)}function l(e){e.forEach(r)}function a(e){return"function"==typeof e}function s(e){return 0===Object.keys(e).length}const i="undefined"!=typeof window;e.raf=i?e=>requestAnimationFrame(e):n;new Set;function c(e,t){e.appendChild(t)}function u(e,t,n){e.insertBefore(t,n||null)}function d(e){e.parentNode.removeChild(e)}function f(e){return document.createElement(e)}function p(e){return document.createTextNode(e)}function m(e,t,n,r){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n,r)}function g(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function h(e){return Array.from(e.childNodes)}function b(e,t){const n=document.createEvent("CustomEvent");return n.initCustomEvent(e,!1,!1,t),n}new Set;function y(t){e.current_component=t}function w(){if(!e.current_component)throw new Error("Function called outside component initialization");return e.current_component}const v=[],x=[],_=[],$=[],k=Promise.resolve();let j=!1;function O(){j||(j=!0,k.then(P))}function C(e){_.push(e)}let E=!1;const q=new Set;function P(){if(!E){E=!0;do{for(let e=0;e<v.length;e+=1){const t=v[e];y(t),L(t.$$)}for(y(null),v.length=0;x.length;)x.pop()();for(let e=0;e<_.length;e+=1){const t=_[e];q.has(t)||(q.add(t),t())}_.length=0}while(v.length);for(;$.length;)$.pop()();j=!1,E=!1,q.clear()}}function L(e){if(null!==e.fragment){e.update(),l(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(C)}}const S=new Set;function T(e,t){e&&e.i&&(S.delete(e),e.i(t))}const M="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:t;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);function U(e,t,n){const{fragment:o,on_mount:s,on_destroy:i,after_update:c}=e.$$;o&&o.m(t,n),C(()=>{const t=s.map(r).filter(a);i?i.push(...t):l(t),e.$$.on_mount=[]}),c.forEach(C)}function D(e,t){const n=e.$$;null!==n.fragment&&(l(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}"function"==typeof HTMLElement&&HTMLElement;class A{$destroy(){D(this,1),this.$destroy=n}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){this.$$set&&!s(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}class F extends A{constructor(e){if(!e||!e.target&&!e.$$inline)throw new Error("'target' is a required option");super()}$destroy(){super.$destroy(),this.$destroy=()=>{console.warn("Component was already destroyed")}}$capture_state(){}$inject_state(){}}e.SvelteComponent=A,e.SvelteComponentDev=F,e.SvelteComponentTyped=class extends F{constructor(e){super(e)}},e.afterUpdate=function(e){w().$$.after_update.push(e)},e.append=c,e.attr=g,e.beforeUpdate=function(e){w().$$.before_update.push(e)},e.binding_callbacks=x,e.createEventDispatcher=function(){const e=w();return(t,n)=>{const r=e.$$.callbacks[t];if(r){const o=b(t,n);r.slice().forEach(t=>{t.call(e,o)})}}},e.destroy_each=function(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)},e.detach=d,e.element=f,e.getContext=function(e){return w().$$.context.get(e)},e.globals=M,e.hasContext=function(e){return w().$$.context.has(e)},e.init=function(t,r,a,s,i,c,u=[-1]){const f=e.current_component;y(t);const p=r.props||{},m=t.$$={fragment:null,ctx:null,props:c,update:n,not_equal:i,bound:o(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(f?f.$$.context:[]),callbacks:o(),dirty:u,skip_bound:!1};let g=!1;if(m.ctx=a?a(t,p,(e,n,...r)=>{const o=r.length?r[0]:n;return m.ctx&&i(m.ctx[e],m.ctx[e]=o)&&(!m.skip_bound&&m.bound[e]&&m.bound[e](o),g&&function(e,t){-1===e.$$.dirty[0]&&(v.push(e),O(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(t,e)),n}):[],m.update(),g=!0,l(m.before_update),m.fragment=!!s&&s(m.ctx),r.target){if(r.hydrate){const e=h(r.target);m.fragment&&m.fragment.l(e),e.forEach(d)}else m.fragment&&m.fragment.c();r.intro&&T(t.$$.fragment),U(t,r.target,r.anchor),P()}y(f)},e.insert=u,e.listen=m,e.noop=n,e.onDestroy=function(e){w().$$.on_destroy.push(e)},e.onMount=function(e){w().$$.on_mount.push(e)},e.safe_not_equal=function(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e},e.setContext=function(e,t){w().$$.context.set(e,t)},e.set_data=function(e,t){t=""+t,e.wholeText!==t&&(e.data=t)},e.set_input_value=function(e,t){e.value=null==t?"":t},e.set_style=function(e,t,n,r){e.style.setProperty(t,n,r?"important":"")},e.space=function(){return p(" ")},e.text=p,e.tick=function(){return O(),k},e.toggle_class=function(e,t,n){e.classList[n?"add":"remove"](t)}}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var t={};Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"SvelteComponent",{enumerable:!0,get:function(){return e.SvelteComponentDev}}),Object.defineProperty(t,"SvelteComponentTyped",{enumerable:!0,get:function(){return e.SvelteComponentTyped}}),Object.defineProperty(t,"afterUpdate",{enumerable:!0,get:function(){return e.afterUpdate}}),Object.defineProperty(t,"beforeUpdate",{enumerable:!0,get:function(){return e.beforeUpdate}}),Object.defineProperty(t,"createEventDispatcher",{enumerable:!0,get:function(){return e.createEventDispatcher}}),Object.defineProperty(t,"getContext",{enumerable:!0,get:function(){return e.getContext}}),Object.defineProperty(t,"hasContext",{enumerable:!0,get:function(){return e.hasContext}}),Object.defineProperty(t,"onDestroy",{enumerable:!0,get:function(){return e.onDestroy}}),Object.defineProperty(t,"onMount",{enumerable:!0,get:function(){return e.onMount}}),Object.defineProperty(t,"setContext",{enumerable:!0,get:function(){return e.setContext}}),Object.defineProperty(t,"tick",{enumerable:!0,get:function(){return e.tick}});var n={};Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,t){return Array.isArray(t)?new Promise((function(n,r){return e.require(t,(function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return n(t)}))})):new Promise((function(n,r){return e.require([t],n)}))};const{SvelteComponent:r,append:o,attr:l,binding_callbacks:a,destroy_each:s,detach:i,element:c,globals:u,init:d,insert:f,listen:p,noop:m,safe_not_equal:g,set_data:h,set_input_value:b,set_style:y,space:w,text:v,toggle_class:x}=e,{document:_}=u,{onMount:$}=t,{default:k}=n;function j(e,t,n){const r=e.slice();return r[12]=t[n],r}function O(e,t,n){const r=e.slice();return r[12]=t[n],r}function C(e){let t,n,r,a;return{c(){t=c("sup"),n=c("i"),a=w(),l(n,"class","far fa-question-circle"),l(t,"data-toggle","tooltip"),l(t,"title",r=e[0].description)},m(e,r){f(e,t,r),o(t,n),f(e,a,r)},p(e,n){1&n&&r!==(r=e[0].description)&&l(t,"title",r)},d(e){e&&i(t),e&&i(a)}}}function E(e){let t,n,r,a,s,u,d,p=e[2].error&&q(e),m=e[2].warning&&L(e);return{c(){t=c("div"),n=c("div"),r=c("div"),u=w(),p&&p.c(),d=w(),m&&m.c(),l(r,"class",a="progress-bar bg-"+e[2].bg+" svelte-7t3aq4"),l(r,"role","progressbar"),l(r,"aria-valuemin","0"),l(r,"aria-valuemax","100"),l(r,"aria-valuenow",s=e[2].progress),y(r,"width",e[2].progress+"%"),x(r,"progress-bar-striped",e[2].striped),x(r,"progress-bar-animated",e[2].animated),l(n,"class","progress bg-light svelte-7t3aq4")},m(e,l){f(e,t,l),o(t,n),o(n,r),o(t,u),p&&p.m(t,null),o(t,d),m&&m.m(t,null)},p(e,n){4&n&&a!==(a="progress-bar bg-"+e[2].bg+" svelte-7t3aq4")&&l(r,"class",a),4&n&&s!==(s=e[2].progress)&&l(r,"aria-valuenow",s),4&n&&y(r,"width",e[2].progress+"%"),4&n&&x(r,"progress-bar-striped",e[2].striped),4&n&&x(r,"progress-bar-animated",e[2].animated),e[2].error?p?p.p(e,n):((p=q(e)).c(),p.m(t,d)):p&&(p.d(1),p=null),e[2].warning?m?m.p(e,n):((m=L(e)).c(),m.m(t,null)):m&&(m.d(1),m=null)},d(e){e&&i(t),p&&p.d(),m&&m.d()}}}function q(e){let t,n,r,a,s=e[2].error+"",u=e[2].url&&P(e);return{c(){t=c("div"),n=v("Error downloading file: "),r=v(s),a=w(),u&&u.c(),l(t,"class","alert alert-danger")},m(e,l){f(e,t,l),o(t,n),o(t,r),o(t,a),u&&u.m(t,null)},p(e,n){4&n&&s!==(s=e[2].error+"")&&h(r,s),e[2].url?u?u.p(e,n):((u=P(e)).c(),u.m(t,null)):u&&(u.d(1),u=null)},d(e){e&&i(t),u&&u.d()}}}function P(e){let t,n,r,a,s=e[2].url+"";return{c(){t=v("from "),n=c("a"),r=v(s),l(n,"href",a=e[2].url),l(n,"target","_blank")},m(e,l){f(e,t,l),f(e,n,l),o(n,r)},p(e,t){4&t&&s!==(s=e[2].url+"")&&h(r,s),4&t&&a!==(a=e[2].url)&&l(n,"href",a)},d(e){e&&i(t),e&&i(n)}}}function L(e){let t,n,r,a,s,u,d,p,m,g,b,y=e[2].error+"",x=e[2].url+"";return{c(){t=c("div"),n=v("Error downloading file: "),r=v(y),a=c("br"),s=w(),(u=c("b")).textContent="It may require user engagement",d=v(", please visit\n            "),p=c("a"),m=v(x),b=v("\n          to download the example file for upload."),l(p,"href",g=e[2].url),l(p,"target","_blank"),l(t,"class","alert alert-warning")},m(e,l){f(e,t,l),o(t,n),o(t,r),o(t,a),o(t,s),o(t,u),o(t,d),o(t,p),o(p,m),o(t,b)},p(e,t){4&t&&y!==(y=e[2].error+"")&&h(r,y),4&t&&x!==(x=e[2].url+"")&&h(m,x),4&t&&g!==(g=e[2].url)&&l(p,"href",g)},d(e){e&&i(t)}}}function S(e){let t,n,r,a,u,d,p,m,g,h,b,x,_,$,k,C,E,q,P=Object.keys(e[0].examples).length>1,L=Object.keys(e[0].examples).length>1,S=P&&T(e),A=Object.keys(e[0].examples),F=[];for(let o=0;o<A.length;o+=1)F[o]=M(O(e,A,o));let z=L&&U(e),I=Object.keys(e[0].examples),H=[];for(let o=0;o<I.length;o+=1)H[o]=D(j(e,I,o));return{c(){t=c("div"),n=c("div"),r=c("span"),a=v("Load example"),S&&S.c(),u=w(),(d=c("sup")).innerHTML='<i class="far fa-question-circle"></i>',p=v(":"),m=w(),g=c("div");for(let e=0;e<F.length;e+=1)F[e].c();h=w(),b=c("div"),x=c("span"),_=v("Download example"),z&&z.c(),$=w(),(k=c("sup")).innerHTML='<i class="far fa-question-circle"></i>',C=v(":"),E=w(),q=c("div");for(let e=0;e<H.length;e+=1)H[e].c();l(d,"data-toggle","tooltip"),l(d,"title","Load the example file directly into the appyter"),l(r,"class","d-table-cell mr-1 my-1 p-1 text-right"),y(r,"white-space","nowrap"),l(g,"class","d-table-cell table-grow d-flex flex-wrap justify-content-start align-items-center"),l(n,"class","d-table-row"),l(k,"data-toggle","tooltip"),l(k,"title","Download the example file for inspection"),l(x,"class","d-table-cell mr-1 my-1 p-1 text-right"),y(x,"white-space","nowrap"),l(q,"class","d-table-cell table-grow d-flex flex-wrap justify-content-start align-items-center"),l(b,"class","d-table-row"),l(t,"class","d-table")},m(e,l){f(e,t,l),o(t,n),o(n,r),o(r,a),S&&S.m(r,null),o(r,u),o(r,d),o(r,p),o(n,m),o(n,g);for(let t=0;t<F.length;t+=1)F[t].m(g,null);o(t,h),o(t,b),o(b,x),o(x,_),z&&z.m(x,null),o(x,$),o(x,k),o(x,C),o(b,E),o(b,q);for(let t=0;t<H.length;t+=1)H[t].m(q,null)},p(e,t){if(1&t&&(P=Object.keys(e[0].examples).length>1),P?S||((S=T(e)).c(),S.m(r,u)):S&&(S.d(1),S=null),33&t){let n;for(A=Object.keys(e[0].examples),n=0;n<A.length;n+=1){const r=O(e,A,n);F[n]?F[n].p(r,t):(F[n]=M(r),F[n].c(),F[n].m(g,null))}for(;n<F.length;n+=1)F[n].d(1);F.length=A.length}if(1&t&&(L=Object.keys(e[0].examples).length>1),L?z||((z=U(e)).c(),z.m(x,$)):z&&(z.d(1),z=null),1&t){let n;for(I=Object.keys(e[0].examples),n=0;n<I.length;n+=1){const r=j(e,I,n);H[n]?H[n].p(r,t):(H[n]=D(r),H[n].c(),H[n].m(q,null))}for(;n<H.length;n+=1)H[n].d(1);H.length=I.length}},d(e){e&&i(t),S&&S.d(),s(F,e),z&&z.d(),s(H,e)}}}function T(e){let t;return{c(){t=v("s")},m(e,n){f(e,t,n)},d(e){e&&i(t)}}}function M(e){let t,n,r,a,s,u,d=e[12]+"";function m(){return e[9](e[12])}return{c(){t=c("span"),n=c("a"),r=v(d),a=w(),l(n,"href","javascript:"),l(t,"class","text-sm m-1 p-1"),y(t,"white-space","nowrap")},m(e,l){f(e,t,l),o(t,n),o(n,r),o(t,a),s||(u=p(n,"click",m),s=!0)},p(t,n){e=t,1&n&&d!==(d=e[12]+"")&&h(r,d)},d(e){e&&i(t),s=!1,u()}}}function U(e){let t;return{c(){t=v("s")},m(e,n){f(e,t,n)},d(e){e&&i(t)}}}function D(e){let t,n,r,a,s,u=e[12]+"";return{c(){t=c("span"),n=c("a"),r=v(u),s=w(),l(n,"href",a=e[0].examples[e[12]]),l(n,"target","_blank"),l(t,"class","text-sm m-1 p-1"),y(t,"white-space","nowrap")},m(e,l){f(e,t,l),o(t,n),o(n,r),o(t,s)},p(e,t){1&t&&u!==(u=e[12]+"")&&h(r,u),1&t&&a!==(a=e[0].examples[e[12]])&&l(n,"href",a)},d(e){e&&i(t)}}}function A(e){let t,n,r,a,s,u,d,g,y,x,_,$,k,j,O,q,P,L,T,M,U,D=e[0].label+"",A=(e[3]||"Choose file")+"",F=e[0].examples&&Object.keys(e[0].examples).length>0,z=e[0].description&&C(e),I=void 0!==e[2]&&E(e),H=F&&S(e);return{c(){t=c("div"),n=c("div"),r=v(D),a=w(),z&&z.c(),s=v(":"),u=w(),d=c("div"),g=c("div"),y=c("input"),_=w(),$=c("input"),j=w(),O=c("label"),q=v(A),L=w(),I&&I.c(),T=w(),H&&H.c(),l(n,"class","col-lg-3 bold text-lg-right my-auto"),l(y,"type","file"),l(y,"class","custom-file-input"),l(y,"id",x=e[0].name),l($,"type","text"),l($,"class","hidden"),l($,"name",k=e[0].name),l(O,"class","custom-file-label"),l(O,"for",P=e[0].name),l(g,"class","custom-file"),l(g,"dropzone","copy"),l(d,"class","col-lg-6 pt-2 pt-lg-0"),l(t,"class","row px-4 px-lg-3 pb-4")},m(l,i){f(l,t,i),o(t,n),o(n,r),o(n,a),z&&z.m(n,null),o(n,s),o(t,u),o(t,d),o(d,g),o(g,y),e[7](y),o(g,_),o(g,$),b($,e[4]),o(g,j),o(g,O),o(O,q),o(d,L),I&&I.m(d,null),o(d,T),H&&H.m(d,null),M||(U=p($,"input",e[8]),M=!0)},p(e,[t]){1&t&&D!==(D=e[0].label+"")&&h(r,D),e[0].description?z?z.p(e,t):((z=C(e)).c(),z.m(n,s)):z&&(z.d(1),z=null),1&t&&x!==(x=e[0].name)&&l(y,"id",x),1&t&&k!==(k=e[0].name)&&l($,"name",k),16&t&&$.value!==e[4]&&b($,e[4]),8&t&&A!==(A=(e[3]||"Choose file")+"")&&h(q,A),1&t&&P!==(P=e[0].name)&&l(O,"for",P),void 0!==e[2]?I?I.p(e,t):((I=E(e)).c(),I.m(d,T)):I&&(I.d(1),I=null),1&t&&(F=e[0].examples&&Object.keys(e[0].examples).length>0),F?H?H.p(e,t):((H=S(e)).c(),H.m(d,null)):H&&(H.d(1),H=null)},i:m,o:m,d(n){n&&i(t),z&&z.d(),e[7](null),I&&I.d(),H&&H.d(),M=!1,U()}}}function F(e,t,n){let r,o,l,s,{window:i}=t,{args:c}=t;async function u(e,t,n){-1===t.indexOf("://")&&(t=new URL(t,document.baseURI).href),(await k(i,"socket")).emit("download_start",{name:e,url:new URL(t).href,file:n})}return $(async()=>{i.require.config({paths:{"socketio-file-upload":i._config.STATIC_URL+"js/lib/socketio-file-upload/client.min"},shim:{"socketio-file-upload":{exports:"SocketIOFileUpload"}}});const[e,t]=await k(i,["socket","socketio-file-upload"]);await async function(e){e.on("download_queued",(function(e){e.name===c.name&&n(2,o={striped:!0,bg:"primary",progress:0})})),e.on("download_start",(function(e){e.name===c.name&&n(2,o={...o,animated:!0})})),e.on("download_progress",(function(e){e.name===c.name&&(e.total_size<0?n(2,o={...o,progress:25,bg:"warning"}):0===e.total_size?n(2,o={...o,progress:100}):n(2,o={...o,progress:e.chunk*e.chunk_size/e.total_size*100|0}))})),e.on("download_complete",(function(e){e.name===c.name&&(n(2,o={...o,bg:"success",animated:!1,striped:!1,progress:100}),n(3,l=e.filename),n(4,s=e.full_filename))})),e.on("download_error",(function(e){e.name===c.name&&("HTTP Error 404: Not Found"===e.error?n(2,o={progress:100,url:e.url,bg:"danger",error:e.error,striped:!1,animated:!1}):n(2,o={progress:100,url:e.url,bg:"warning",error:e.error,striped:!1,animated:!1}))}))}(e),await async function(e){e.listenOnInput(r),e.addEventListener("start",(function(e){n(2,o={striped:!0,bg:"primary",progress:0})})),e.addEventListener("progress",(function(e){n(2,o={...o,progress:e.bytesLoaded/e.file.size*100|0,animated:!0})})),e.addEventListener("complete",(function(e){n(2,o={progress:100,bg:"success",striped:!1,animated:!1}),n(3,l=e.file.name),n(4,s=e.detail.full_filename)})),e.addEventListener("error",(function(e){console.error(e),n(2,o={progress:100,bg:"danger",error:e.error,striped:!1,animated:!1})}))}(new t(e))}),e.$$set=e=>{"window"in e&&n(6,i=e.window),"args"in e&&n(0,c=e.args)},[c,r,o,l,s,u,i,function(e){a[e?"unshift":"push"](()=>{n(1,r=e)})},function(){s=this.value,n(4,s)},e=>u(c.name,c.examples[e],e)]}return class extends r{constructor(e){var t;super(),_.getElementById("svelte-7t3aq4-style")||((t=c("style")).id="svelte-7t3aq4-style",t.textContent=".progress.svelte-7t3aq4{height:25px;width:100%;background-color:grey}.progress-bar.svelte-7t3aq4{height:100%;background-color:blue}.progress-bar.bg-success.svelte-7t3aq4{height:100%;background-color:green}",o(_.head,t)),d(this,e,F,A,g,{window:6,args:0})}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,