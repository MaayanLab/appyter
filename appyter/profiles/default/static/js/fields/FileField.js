!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;((t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).FileField||(t.FileField={})).svelte=e()}}((function(){var e={};(function(t){"use strict";function n(){}Object.defineProperty(e,"__esModule",{value:!0});function r(e){return e()}function o(){return Object.create(null)}function l(e){e.forEach(r)}function a(e){return"function"==typeof e}function s(e){return 0===Object.keys(e).length}const i="undefined"!=typeof window;e.raf=i?e=>requestAnimationFrame(e):n;new Set;function c(e,t){e.appendChild(t)}function u(e,t,n){e.insertBefore(t,n||null)}function d(e){e.parentNode.removeChild(e)}function f(e){return document.createElement(e)}function p(e){return document.createTextNode(e)}function m(e,t,n,r){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n,r)}function g(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function b(e){return Array.from(e.childNodes)}function h(e,t){const n=document.createEvent("CustomEvent");return n.initCustomEvent(e,!1,!1,t),n}new Set;function y(t){e.current_component=t}function w(){if(!e.current_component)throw new Error("Function called outside component initialization");return e.current_component}const v=[],_=[],x=[],$=[],k=Promise.resolve();let j=!1;function O(){j||(j=!0,k.then(L))}function E(e){x.push(e)}let q=!1;const C=new Set;function L(){if(!q){q=!0;do{for(let e=0;e<v.length;e+=1){const t=v[e];y(t),P(t.$$)}for(v.length=0;_.length;)_.pop()();for(let e=0;e<x.length;e+=1){const t=x[e];C.has(t)||(C.add(t),t())}x.length=0}while(v.length);for(;$.length;)$.pop()();j=!1,q=!1,C.clear()}}function P(e){if(null!==e.fragment){e.update(),l(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(E)}}const S=new Set;function T(e,t){e&&e.i&&(S.delete(e),e.i(t))}const M="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:t;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);function U(e,t,n){const{fragment:o,on_mount:s,on_destroy:i,after_update:c}=e.$$;o&&o.m(t,n),E(()=>{const t=s.map(r).filter(a);i?i.push(...t):l(t),e.$$.on_mount=[]}),c.forEach(E)}function D(e,t){const n=e.$$;null!==n.fragment&&(l(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}"function"==typeof HTMLElement&&HTMLElement;class F{$destroy(){D(this,1),this.$destroy=n}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){this.$$set&&!s(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}e.SvelteComponent=F,e.SvelteComponentDev=class extends F{constructor(e){if(!e||!e.target&&!e.$$inline)throw new Error("'target' is a required option");super()}$destroy(){super.$destroy(),this.$destroy=()=>{console.warn("Component was already destroyed")}}$capture_state(){}$inject_state(){}},e.afterUpdate=function(e){w().$$.after_update.push(e)},e.append=c,e.attr=g,e.beforeUpdate=function(e){w().$$.before_update.push(e)},e.binding_callbacks=_,e.createEventDispatcher=function(){const e=w();return(t,n)=>{const r=e.$$.callbacks[t];if(r){const o=h(t,n);r.slice().forEach(t=>{t.call(e,o)})}}},e.destroy_each=function(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)},e.detach=d,e.element=f,e.getContext=function(e){return w().$$.context.get(e)},e.globals=M,e.init=function(t,r,a,s,i,c,u=[-1]){const f=e.current_component;y(t);const p=r.props||{},m=t.$$={fragment:null,ctx:null,props:c,update:n,not_equal:i,bound:o(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(f?f.$$.context:[]),callbacks:o(),dirty:u,skip_bound:!1};let g=!1;if(m.ctx=a?a(t,p,(e,n,...r)=>{const o=r.length?r[0]:n;return m.ctx&&i(m.ctx[e],m.ctx[e]=o)&&(!m.skip_bound&&m.bound[e]&&m.bound[e](o),g&&function(e,t){-1===e.$$.dirty[0]&&(v.push(e),O(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(t,e)),n}):[],m.update(),g=!0,l(m.before_update),m.fragment=!!s&&s(m.ctx),r.target){if(r.hydrate){const e=b(r.target);m.fragment&&m.fragment.l(e),e.forEach(d)}else m.fragment&&m.fragment.c();r.intro&&T(t.$$.fragment),U(t,r.target,r.anchor),L()}y(f)},e.insert=u,e.listen=m,e.noop=n,e.onDestroy=function(e){w().$$.on_destroy.push(e)},e.onMount=function(e){w().$$.on_mount.push(e)},e.safe_not_equal=function(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e},e.setContext=function(e,t){w().$$.context.set(e,t)},e.set_data=function(e,t){t=""+t,e.wholeText!==t&&(e.data=t)},e.set_input_value=function(e,t){e.value=null==t?"":t},e.set_style=function(e,t,n,r){e.style.setProperty(t,n,r?"important":"")},e.space=function(){return p(" ")},e.text=p,e.tick=function(){return O(),k},e.toggle_class=function(e,t,n){e.classList[n?"add":"remove"](t)}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var t={};Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"SvelteComponent",{enumerable:!0,get:function(){return e.SvelteComponentDev}}),Object.defineProperty(t,"afterUpdate",{enumerable:!0,get:function(){return e.afterUpdate}}),Object.defineProperty(t,"beforeUpdate",{enumerable:!0,get:function(){return e.beforeUpdate}}),Object.defineProperty(t,"createEventDispatcher",{enumerable:!0,get:function(){return e.createEventDispatcher}}),Object.defineProperty(t,"getContext",{enumerable:!0,get:function(){return e.getContext}}),Object.defineProperty(t,"onDestroy",{enumerable:!0,get:function(){return e.onDestroy}}),Object.defineProperty(t,"onMount",{enumerable:!0,get:function(){return e.onMount}}),Object.defineProperty(t,"setContext",{enumerable:!0,get:function(){return e.setContext}}),Object.defineProperty(t,"tick",{enumerable:!0,get:function(){return e.tick}});const{SvelteComponent:n,append:r,attr:o,binding_callbacks:l,destroy_each:a,detach:s,element:i,globals:c,init:u,insert:d,listen:f,noop:p,safe_not_equal:m,set_data:g,set_input_value:b,set_style:h,space:y,text:w,toggle_class:v}=e,{document:_}=c,{onMount:x}=t;function $(e,t,n){const r=e.slice();return r[16]=t[n],r}function k(e,t,n){const r=e.slice();return r[16]=t[n],r}function j(e){let t,n,l,a;return{c(){t=i("sup"),n=i("i"),a=y(),o(n,"class","far fa-question-circle"),o(t,"data-toggle","tooltip"),o(t,"title",l=e[0].description)},m(e,o){d(e,t,o),r(t,n),d(e,a,o)},p(e,n){1&n&&l!==(l=e[0].description)&&o(t,"title",l)},d(e){e&&s(t),e&&s(a)}}}function O(e){let t,n,l,a,c,u,f,p=e[2].error&&E(e),m=e[2].warning&&C(e);return{c(){t=i("div"),n=i("div"),l=i("div"),u=y(),p&&p.c(),f=y(),m&&m.c(),o(l,"class",a="progress-bar bg-"+e[2].bg+" svelte-7t3aq4"),o(l,"role","progressbar"),o(l,"aria-valuemin","0"),o(l,"aria-valuemax","100"),o(l,"aria-valuenow",c=e[2].progress),h(l,"width",e[2].progress+"%"),v(l,"progress-bar-striped",e[2].striped),v(l,"progress-bar-animated",e[2].animated),o(n,"class","progress bg-light svelte-7t3aq4")},m(e,o){d(e,t,o),r(t,n),r(n,l),r(t,u),p&&p.m(t,null),r(t,f),m&&m.m(t,null)},p(e,n){4&n&&a!==(a="progress-bar bg-"+e[2].bg+" svelte-7t3aq4")&&o(l,"class",a),4&n&&c!==(c=e[2].progress)&&o(l,"aria-valuenow",c),4&n&&h(l,"width",e[2].progress+"%"),4&n&&v(l,"progress-bar-striped",e[2].striped),4&n&&v(l,"progress-bar-animated",e[2].animated),e[2].error?p?p.p(e,n):((p=E(e)).c(),p.m(t,f)):p&&(p.d(1),p=null),e[2].warning?m?m.p(e,n):((m=C(e)).c(),m.m(t,null)):m&&(m.d(1),m=null)},d(e){e&&s(t),p&&p.d(),m&&m.d()}}}function E(e){let t,n,l,a,c=e[2].error+"",u=e[2].url&&q(e);return{c(){t=i("div"),n=w("Error downloading file: "),l=w(c),a=y(),u&&u.c(),o(t,"class","alert alert-danger")},m(e,o){d(e,t,o),r(t,n),r(t,l),r(t,a),u&&u.m(t,null)},p(e,n){4&n&&c!==(c=e[2].error+"")&&g(l,c),e[2].url?u?u.p(e,n):((u=q(e)).c(),u.m(t,null)):u&&(u.d(1),u=null)},d(e){e&&s(t),u&&u.d()}}}function q(e){let t,n,l,a,c=e[2].url+"";return{c(){t=w("from "),n=i("a"),l=w(c),o(n,"href",a=e[2].url),o(n,"target","_blank")},m(e,o){d(e,t,o),d(e,n,o),r(n,l)},p(e,t){4&t&&c!==(c=e[2].url+"")&&g(l,c),4&t&&a!==(a=e[2].url)&&o(n,"href",a)},d(e){e&&s(t),e&&s(n)}}}function C(e){let t,n,l,a,c,u,f,p,m,b,h,v=e[2].error+"",_=e[2].url+"";return{c(){t=i("div"),n=w("Error downloading file: "),l=w(v),a=i("br"),c=y(),(u=i("b")).textContent="It may require user engagement",f=w(", please visit\n            "),p=i("a"),m=w(_),h=w("\n          to download the example file for upload."),o(p,"href",b=e[2].url),o(p,"target","_blank"),o(t,"class","alert alert-warning")},m(e,o){d(e,t,o),r(t,n),r(t,l),r(t,a),r(t,c),r(t,u),r(t,f),r(t,p),r(p,m),r(t,h)},p(e,t){4&t&&v!==(v=e[2].error+"")&&g(l,v),4&t&&_!==(_=e[2].url+"")&&g(m,_),4&t&&b!==(b=e[2].url)&&o(p,"href",b)},d(e){e&&s(t)}}}function L(e){let t,n,l,c,u,f,p,m,g,b,v,_,x,j,O,E,q,C,L=Object.keys(e[0].examples).length>1,U=Object.keys(e[0].examples).length>1,D=L&&P(e),F=Object.keys(e[0].examples),z=[];for(let r=0;r<F.length;r+=1)z[r]=S(k(e,F,r));let A=U&&T(e),I=Object.keys(e[0].examples),H=[];for(let r=0;r<I.length;r+=1)H[r]=M($(e,I,r));return{c(){t=i("div"),n=i("div"),l=i("span"),c=w("Load example"),D&&D.c(),u=y(),(f=i("sup")).innerHTML='<i class="far fa-question-circle"></i>',p=w(":"),m=y(),g=i("div");for(let e=0;e<z.length;e+=1)z[e].c();b=y(),v=i("div"),_=i("span"),x=w("Download example"),A&&A.c(),j=y(),(O=i("sup")).innerHTML='<i class="far fa-question-circle"></i>',E=w(":"),q=y(),C=i("div");for(let e=0;e<H.length;e+=1)H[e].c();o(f,"data-toggle","tooltip"),o(f,"title","Load the example file directly into the appyter"),o(l,"class","d-table-cell mr-1 my-1 p-1 text-right"),h(l,"white-space","nowrap"),o(g,"class","d-table-cell table-grow d-flex flex-wrap justify-content-start align-items-center"),o(n,"class","d-table-row"),o(O,"data-toggle","tooltip"),o(O,"title","Download the example file for inspection"),o(_,"class","d-table-cell mr-1 my-1 p-1 text-right"),h(_,"white-space","nowrap"),o(C,"class","d-table-cell table-grow d-flex flex-wrap justify-content-start align-items-center"),o(v,"class","d-table-row"),o(t,"class","d-table")},m(e,o){d(e,t,o),r(t,n),r(n,l),r(l,c),D&&D.m(l,null),r(l,u),r(l,f),r(l,p),r(n,m),r(n,g);for(let t=0;t<z.length;t+=1)z[t].m(g,null);r(t,b),r(t,v),r(v,_),r(_,x),A&&A.m(_,null),r(_,j),r(_,O),r(_,E),r(v,q),r(v,C);for(let t=0;t<H.length;t+=1)H[t].m(C,null)},p(e,t){if(1&t&&(L=Object.keys(e[0].examples).length>1),L?D||((D=P(e)).c(),D.m(l,u)):D&&(D.d(1),D=null),33&t){let n;for(F=Object.keys(e[0].examples),n=0;n<F.length;n+=1){const r=k(e,F,n);z[n]?z[n].p(r,t):(z[n]=S(r),z[n].c(),z[n].m(g,null))}for(;n<z.length;n+=1)z[n].d(1);z.length=F.length}if(1&t&&(U=Object.keys(e[0].examples).length>1),U?A||((A=T(e)).c(),A.m(_,j)):A&&(A.d(1),A=null),1&t){let n;for(I=Object.keys(e[0].examples),n=0;n<I.length;n+=1){const r=$(e,I,n);H[n]?H[n].p(r,t):(H[n]=M(r),H[n].c(),H[n].m(C,null))}for(;n<H.length;n+=1)H[n].d(1);H.length=I.length}},d(e){e&&s(t),D&&D.d(),a(z,e),A&&A.d(),a(H,e)}}}function P(e){let t;return{c(){t=w("s")},m(e,n){d(e,t,n)},d(e){e&&s(t)}}}function S(e){let t,n,l,a,c,u,p=e[16]+"";function m(...t){return e[9](e[16],...t)}return{c(){t=i("span"),n=i("a"),l=w(p),a=y(),o(n,"href","javascript:"),o(t,"class","text-sm m-1 p-1"),h(t,"white-space","nowrap")},m(e,o){d(e,t,o),r(t,n),r(n,l),r(t,a),c||(u=f(n,"click",m),c=!0)},p(t,n){e=t,1&n&&p!==(p=e[16]+"")&&g(l,p)},d(e){e&&s(t),c=!1,u()}}}function T(e){let t;return{c(){t=w("s")},m(e,n){d(e,t,n)},d(e){e&&s(t)}}}function M(e){let t,n,l,a,c,u=e[16]+"";return{c(){t=i("span"),n=i("a"),l=w(u),c=y(),o(n,"href",a=e[0].examples[e[16]]),o(n,"target","_blank"),o(t,"class","text-sm m-1 p-1"),h(t,"white-space","nowrap")},m(e,o){d(e,t,o),r(t,n),r(n,l),r(t,c)},p(e,t){1&t&&u!==(u=e[16]+"")&&g(l,u),1&t&&a!==(a=e[0].examples[e[16]])&&o(n,"href",a)},d(e){e&&s(t)}}}function U(e){let t,n,l,a,c,u,m,h,v,_,x,$,k,E,q,C,P,S,T,M,U,D=e[0].label+"",F=(e[3]||"Choose file")+"",z=e[0].examples&&Object.keys(e[0].examples).length>0,A=e[0].description&&j(e),I=void 0!==e[2]&&O(e),H=z&&L(e);return{c(){t=i("div"),n=i("div"),l=w(D),a=y(),A&&A.c(),c=w(":"),u=y(),m=i("div"),h=i("div"),v=i("input"),x=y(),$=i("input"),E=y(),q=i("label"),C=w(F),S=y(),I&&I.c(),T=y(),H&&H.c(),o(n,"class","col-lg-3 bold text-lg-right my-auto"),o(v,"type","file"),o(v,"class","custom-file-input"),o(v,"id",_=e[0].name),o($,"type","text"),o($,"class","hidden"),o($,"name",k=e[0].name),o(q,"class","custom-file-label"),o(q,"for",P=e[0].name),o(h,"class","custom-file"),o(h,"dropzone","copy"),o(m,"class","col-lg-6 pt-2 pt-lg-0"),o(t,"class","row px-4 px-lg-3 pb-4")},m(o,s){d(o,t,s),r(t,n),r(n,l),r(n,a),A&&A.m(n,null),r(n,c),r(t,u),r(t,m),r(m,h),r(h,v),e[7](v),r(h,x),r(h,$),b($,e[4]),r(h,E),r(h,q),r(q,C),r(m,S),I&&I.m(m,null),r(m,T),H&&H.m(m,null),M||(U=f($,"input",e[8]),M=!0)},p(e,[t]){1&t&&D!==(D=e[0].label+"")&&g(l,D),e[0].description?A?A.p(e,t):((A=j(e)).c(),A.m(n,c)):A&&(A.d(1),A=null),1&t&&_!==(_=e[0].name)&&o(v,"id",_),1&t&&k!==(k=e[0].name)&&o($,"name",k),16&t&&$.value!==e[4]&&b($,e[4]),8&t&&F!==(F=(e[3]||"Choose file")+"")&&g(C,F),1&t&&P!==(P=e[0].name)&&o(q,"for",P),void 0!==e[2]?I?I.p(e,t):((I=O(e)).c(),I.m(m,T)):I&&(I.d(1),I=null),1&t&&(z=e[0].examples&&Object.keys(e[0].examples).length>0),z?H?H.p(e,t):((H=L(e)).c(),H.m(m,null)):H&&(H.d(1),H=null)},i:p,o:p,d(n){n&&s(t),A&&A.d(),e[7](null),I&&I.d(),H&&H.d(),M=!1,U()}}}function D(e,t,n){let r,o,{window:a}=t,{args:s}=t;a.require.config({paths:{"socketio-file-upload":a._config.STATIC_URL+"js/lib/socketio-file-upload/client.min"},shim:{"socketio-file-upload":{exports:"SocketIOFileUpload"}}});let i,c,u,d,f=void 0;async function p(){void 0===f&&(f=await new Promise((e,t)=>a.require(["socket","socketio-file-upload"],(function(t,n){e({socket:t,siofu:new n(t)})}),t)),r=f.socket,o=f.siofu)}async function m(e,t,n){-1===t.indexOf("://")&&(t=new URL(t,document.baseURI).href),await p(),r.emit("download_start",{name:e,url:new URL(t).href,file:n})}return x(async()=>{await p(),await async function(){r.on("download_queued",(function(e){e.name===s.name&&n(2,c={striped:!0,bg:"primary",progress:0})})),r.on("download_start",(function(e){e.name===s.name&&n(2,c={...c,animated:!0})})),r.on("download_progress",(function(e){e.name===s.name&&(e.total_size<0?n(2,c={...c,progress:25,bg:"warning"}):0===e.total_size?n(2,c={...c,progress:100}):n(2,c={...c,progress:e.chunk*e.chunk_size/e.total_size*100|0}))})),r.on("download_complete",(function(e){e.name===s.name&&(n(2,c={...c,bg:"success",animated:!1,progress:100}),n(3,u=e.filename),n(4,d=e.full_filename))})),r.on("download_error",(function(e){e.name===s.name&&("HTTP Error 404: Not Found"===e.error?n(2,c={progress:100,url:e.url,bg:"danger",error:e.error}):n(2,c={progress:100,url:e.url,bg:"warning",error:e.error}))}))}(),await async function(){o.listenOnInput(i),o.addEventListener("start",(function(e){n(2,c={striped:!0,animated:!0,bg:"primary",progress:0})})),o.addEventListener("progress",(function(e){n(2,c={...c,progress:e.bytesLoaded/e.file.size*100|0})})),o.addEventListener("complete",(function(e){n(2,c={progress:100,bg:"success"}),n(3,u=e.file.name),n(4,d=e.detail.full_filename)})),o.addEventListener("error",(function(e){console.error(e),n(2,c={progress:100,bg:"danger",error:e.error})}))}()}),e.$$set=e=>{"window"in e&&n(6,a=e.window),"args"in e&&n(0,s=e.args)},[s,i,c,u,d,m,a,function(e){l[e?"unshift":"push"](()=>{n(1,i=e)})},function(){d=this.value,n(4,d)},e=>m(s.name,s.examples[e],e)]}return class extends n{constructor(e){var t;super(),_.getElementById("svelte-7t3aq4-style")||((t=i("style")).id="svelte-7t3aq4-style",t.textContent=".progress.svelte-7t3aq4{height:25px;width:100%;background-color:grey}.progress-bar.svelte-7t3aq4{height:100%;background-color:blue}.progress-bar.bg-success.svelte-7t3aq4{height:100%;background-color:green}",r(_.head,t)),u(this,e,D,U,m,{window:6,args:0})}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2stZmxhdC9fcHJlbHVkZSIsIm5vZGVfbW9kdWxlcy9zdmVsdGUvaW50ZXJuYWwvaW5kZXguanMiLCJub2RlX21vZHVsZXMvc3ZlbHRlL2luZGV4LmpzIiwicHJvZmlsZXMvZGVmYXVsdC9zdGF0aWMvanMvZmllbGRzL0ZpbGVGaWVsZC5zdmVsdGUiXSwibmFtZXMiOlsiZiIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJnIiwid2luZG93IiwiZ2xvYmFsIiwic2VsZiIsInRoaXMiLCJGaWxlRmllbGQiLCJzdmVsdGUiLCJfJGludGVybmFsXzIiLCJub29wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInJ1biIsImZuIiwiYmxhbmtfb2JqZWN0IiwiY3JlYXRlIiwicnVuX2FsbCIsImZucyIsImZvckVhY2giLCJpc19mdW5jdGlvbiIsInRoaW5nIiwiaXNfZW1wdHkiLCJvYmoiLCJrZXlzIiwibGVuZ3RoIiwiaXNfY2xpZW50IiwicmFmIiwiY2IiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJTZXQiLCJhcHBlbmQiLCJ0YXJnZXQiLCJub2RlIiwiYXBwZW5kQ2hpbGQiLCJpbnNlcnQiLCJhbmNob3IiLCJpbnNlcnRCZWZvcmUiLCJkZXRhY2giLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJlbGVtZW50IiwibmFtZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJkYXRhIiwiY3JlYXRlVGV4dE5vZGUiLCJsaXN0ZW4iLCJldmVudCIsImhhbmRsZXIiLCJvcHRpb25zIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhdHRyIiwiYXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiY2hpbGRyZW4iLCJBcnJheSIsImZyb20iLCJjaGlsZE5vZGVzIiwiY3VzdG9tX2V2ZW50IiwidHlwZSIsImRldGFpbCIsImUiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsInNldF9jdXJyZW50X2NvbXBvbmVudCIsImNvbXBvbmVudCIsImN1cnJlbnRfY29tcG9uZW50IiwiZ2V0X2N1cnJlbnRfY29tcG9uZW50IiwiRXJyb3IiLCJkaXJ0eV9jb21wb25lbnRzIiwiYmluZGluZ19jYWxsYmFja3MiLCJyZW5kZXJfY2FsbGJhY2tzIiwiZmx1c2hfY2FsbGJhY2tzIiwicmVzb2x2ZWRfcHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwidXBkYXRlX3NjaGVkdWxlZCIsInNjaGVkdWxlX3VwZGF0ZSIsInRoZW4iLCJmbHVzaCIsImFkZF9yZW5kZXJfY2FsbGJhY2siLCJwdXNoIiwiZmx1c2hpbmciLCJzZWVuX2NhbGxiYWNrcyIsImkiLCJ1cGRhdGUiLCIkJCIsInBvcCIsImNhbGxiYWNrIiwiaGFzIiwiYWRkIiwiY2xlYXIiLCJmcmFnbWVudCIsImJlZm9yZV91cGRhdGUiLCJkaXJ0eSIsInAiLCJjdHgiLCJhZnRlcl91cGRhdGUiLCJvdXRyb2luZyIsInRyYW5zaXRpb25faW4iLCJibG9jayIsImxvY2FsIiwiZGVsZXRlIiwiZ2xvYmFscyIsImdsb2JhbFRoaXMiLCJtb3VudF9jb21wb25lbnQiLCJvbl9tb3VudCIsIm9uX2Rlc3Ryb3kiLCJtIiwibmV3X29uX2Rlc3Ryb3kiLCJtYXAiLCJmaWx0ZXIiLCJkZXN0cm95X2NvbXBvbmVudCIsImRldGFjaGluZyIsImQiLCJIVE1MRWxlbWVudCIsIlN2ZWx0ZUNvbXBvbmVudCIsIltvYmplY3QgT2JqZWN0XSIsIiRkZXN0cm95IiwiY2FsbGJhY2tzIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiJCRwcm9wcyIsIiQkc2V0Iiwic2tpcF9ib3VuZCIsIlN2ZWx0ZUNvbXBvbmVudERldiIsIiQkaW5saW5lIiwic3VwZXIiLCJjb25zb2xlIiwid2FybiIsImFmdGVyVXBkYXRlIiwiYmVmb3JlVXBkYXRlIiwiY3JlYXRlRXZlbnREaXNwYXRjaGVyIiwic2xpY2UiLCJjYWxsIiwiZGVzdHJveV9lYWNoIiwiaXRlcmF0aW9ucyIsImdldENvbnRleHQiLCJrZXkiLCJjb250ZXh0IiwiZ2V0IiwiaW5pdCIsImluc3RhbmNlIiwiY3JlYXRlX2ZyYWdtZW50Iiwibm90X2VxdWFsIiwicHJvcHMiLCJwYXJlbnRfY29tcG9uZW50IiwicHJvcF92YWx1ZXMiLCJib3VuZCIsIk1hcCIsInJlYWR5IiwicmV0IiwicmVzdCIsImZpbGwiLCJoeWRyYXRlIiwibm9kZXMiLCJsIiwiYyIsImludHJvIiwib25EZXN0cm95Iiwib25Nb3VudCIsInNhZmVfbm90X2VxdWFsIiwiYSIsImIiLCJzZXRDb250ZXh0Iiwic2V0Iiwic2V0X2RhdGEiLCJ3aG9sZVRleHQiLCJzZXRfaW5wdXRfdmFsdWUiLCJpbnB1dCIsInNldF9zdHlsZSIsImltcG9ydGFudCIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJzcGFjZSIsInRpY2siLCJ0b2dnbGVfY2xhc3MiLCJ0b2dnbGUiLCJjbGFzc0xpc3QiLCJfJHN2ZWx0ZV8xIiwiZW51bWVyYWJsZSIsImRvY3VtZW50XzEiLCJnZXRfZWFjaF9jb250ZXh0IiwibGlzdCIsImNoaWxkX2N0eCIsImdldF9lYWNoX2NvbnRleHRfMSIsImNyZWF0ZV9pZl9ibG9ja183Iiwic3VwIiwic3VwX3RpdGxlX3ZhbHVlIiwidCIsImRlc2NyaXB0aW9uIiwiY3JlYXRlX2lmX2Jsb2NrXzMiLCJkaXYyIiwiZGl2MSIsImRpdjAiLCJkaXYwX2NsYXNzX3ZhbHVlIiwiZGl2MF9hcmlhX3ZhbHVlbm93X3ZhbHVlIiwidDAiLCJ0MSIsImlmX2Jsb2NrMCIsImVycm9yIiwiY3JlYXRlX2lmX2Jsb2NrXzUiLCJpZl9ibG9jazEiLCJ3YXJuaW5nIiwiY3JlYXRlX2lmX2Jsb2NrXzQiLCJiZyIsInByb2dyZXNzIiwic3RyaXBlZCIsImFuaW1hdGVkIiwiZGl2IiwidDIiLCJ0MV92YWx1ZSIsImlmX2Jsb2NrIiwidXJsIiwiY3JlYXRlX2lmX2Jsb2NrXzYiLCJhX2hyZWZfdmFsdWUiLCJiciIsInQ0IiwidDUiLCJ0NiIsInQ1X3ZhbHVlIiwidGV4dENvbnRlbnQiLCJjcmVhdGVfaWZfYmxvY2siLCJkaXY0Iiwic3BhbjAiLCJzdXAwIiwidDMiLCJkaXYzIiwic3BhbjEiLCJzdXAxIiwidDciLCJ0OCIsInNob3dfaWZfMSIsImV4YW1wbGVzIiwic2hvd19pZiIsImNyZWF0ZV9pZl9ibG9ja18yIiwiZWFjaF92YWx1ZV8xIiwiZWFjaF9ibG9ja3NfMSIsImNyZWF0ZV9lYWNoX2Jsb2NrXzEiLCJjcmVhdGVfaWZfYmxvY2tfMSIsImVhY2hfdmFsdWUiLCJlYWNoX2Jsb2NrcyIsImNyZWF0ZV9lYWNoX2Jsb2NrIiwiaW5uZXJIVE1MIiwic3BhbiIsIm1vdW50ZWQiLCJkaXNwb3NlIiwidDBfdmFsdWUiLCJjbGlja19oYW5kbGVyIiwiYXJncyIsIm5ld19jdHgiLCJpbnB1dDAiLCJpbnB1dDBfaWRfdmFsdWUiLCJpbnB1dDEiLCJpbnB1dDFfbmFtZV92YWx1ZSIsImxhYmVsIiwibGFiZWxfZm9yX3ZhbHVlIiwidDZfdmFsdWUiLCJpZl9ibG9jazIiLCJvIiwiJCRzZWxmIiwiJCRpbnZhbGlkYXRlIiwic29ja2V0Iiwic2lvZnUiLCJyZXF1aXJlIiwiY29uZmlnIiwicGF0aHMiLCJzb2NrZXRpby1maWxlLXVwbG9hZCIsIl9jb25maWciLCJTVEFUSUNfVVJMIiwic2hpbSIsImZpbGVGaWVsZCIsInN0YXRlIiwiZmlsZW5hbWUiLCJmdWxsX2ZpbGVuYW1lIiwiX2RlcHMiLCJhc3luYyIsImVuc3VyZV9kZXBzIiwicmVqZWN0IiwiU29ja2V0SU9GaWxlVXBsb2FkIiwibG9hZF9maWxlIiwiZmlsZSIsIlVSTCIsImJhc2VVUkkiLCJocmVmIiwiZW1pdCIsIm9uIiwiZXZ0IiwidG90YWxfc2l6ZSIsImNodW5rIiwiY2h1bmtfc2l6ZSIsImxpc3Rlbk9uSW5wdXQiLCJieXRlc0xvYWRlZCIsInNpemUiLCIkJHZhbHVlIiwiZXhhbXBsZV9uYW1lIiwiZ2V0RWxlbWVudEJ5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dUIsTUFBQSxXQUFBcEIsRUFBQW5SLEtBQUFPLE1BQUErUCxFQUFBLEVBQUFhLElBQUFxQixHQUFBZixFQUFBL0IsRUFBQXJOLEtBQUFxTixFQUFBaEIsU0FBQThELEdBQUFBLElDREEsT0RDQSxjQUFBcEwsRUFBQUMsWUFBQXZFLEdBQUEsSUFBQStILEVBQUE3QyxRQUFBc0QsRUFBQW1ILGVBQUEsMEJBQUE1SCxFQUFBekksRUFBQSxVQUFBc1EsR0FBQSxzQkFBQTdILEVBQUFpRCxZQUFBLGdOQUFBcE0sRUFBQTRKLEVBQUFxSCxLQUFBOUgsSUFBQS9CLEVBQUE5SSxLQUFBOEMsRUFBQWlHLEVBQUFDLEVBQUFrQixFQUFBLENBQUFySyxPQUFBLEVBQUE2UCxLQUFBIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIiYmdHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIil7Zz1zZWxmfWVsc2V7Zz10aGlzfShnLkZpbGVGaWVsZCB8fCAoZy5GaWxlRmllbGQgPSB7fSkpLnN2ZWx0ZSA9IGYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7IH1cbmNvbnN0IGlkZW50aXR5ID0geCA9PiB4O1xuZnVuY3Rpb24gYXNzaWduKHRhciwgc3JjKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZvciAoY29uc3QgayBpbiBzcmMpXG4gICAgICAgIHRhcltrXSA9IHNyY1trXTtcbiAgICByZXR1cm4gdGFyO1xufVxuZnVuY3Rpb24gaXNfcHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gYWRkX2xvY2F0aW9uKGVsZW1lbnQsIGZpbGUsIGxpbmUsIGNvbHVtbiwgY2hhcikge1xuICAgIGVsZW1lbnQuX19zdmVsdGVfbWV0YSA9IHtcbiAgICAgICAgbG9jOiB7IGZpbGUsIGxpbmUsIGNvbHVtbiwgY2hhciB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJ1bihmbikge1xuICAgIHJldHVybiBmbigpO1xufVxuZnVuY3Rpb24gYmxhbmtfb2JqZWN0KCkge1xuICAgIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuZnVuY3Rpb24gcnVuX2FsbChmbnMpIHtcbiAgICBmbnMuZm9yRWFjaChydW4pO1xufVxuZnVuY3Rpb24gaXNfZnVuY3Rpb24odGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gc2FmZV9ub3RfZXF1YWwoYSwgYikge1xuICAgIHJldHVybiBhICE9IGEgPyBiID09IGIgOiBhICE9PSBiIHx8ICgoYSAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHx8IHR5cGVvZiBhID09PSAnZnVuY3Rpb24nKTtcbn1cbmZ1bmN0aW9uIG5vdF9lcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGI7XG59XG5mdW5jdGlvbiBpc19lbXB0eShvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9zdG9yZShzdG9yZSwgbmFtZSkge1xuICAgIGlmIChzdG9yZSAhPSBudWxsICYmIHR5cGVvZiBzdG9yZS5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHtuYW1lfScgaXMgbm90IGEgc3RvcmUgd2l0aCBhICdzdWJzY3JpYmUnIG1ldGhvZGApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN1YnNjcmliZShzdG9yZSwgLi4uY2FsbGJhY2tzKSB7XG4gICAgaWYgKHN0b3JlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfVxuICAgIGNvbnN0IHVuc3ViID0gc3RvcmUuc3Vic2NyaWJlKC4uLmNhbGxiYWNrcyk7XG4gICAgcmV0dXJuIHVuc3ViLnVuc3Vic2NyaWJlID8gKCkgPT4gdW5zdWIudW5zdWJzY3JpYmUoKSA6IHVuc3ViO1xufVxuZnVuY3Rpb24gZ2V0X3N0b3JlX3ZhbHVlKHN0b3JlKSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIHN1YnNjcmliZShzdG9yZSwgXyA9PiB2YWx1ZSA9IF8pKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY29tcG9uZW50X3N1YnNjcmliZShjb21wb25lbnQsIHN0b3JlLCBjYWxsYmFjaykge1xuICAgIGNvbXBvbmVudC4kJC5vbl9kZXN0cm95LnB1c2goc3Vic2NyaWJlKHN0b3JlLCBjYWxsYmFjaykpO1xufVxuZnVuY3Rpb24gY3JlYXRlX3Nsb3QoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuICAgIGlmIChkZWZpbml0aW9uKSB7XG4gICAgICAgIGNvbnN0IHNsb3RfY3R4ID0gZ2V0X3Nsb3RfY29udGV4dChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKTtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25bMF0oc2xvdF9jdHgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldF9zbG90X2NvbnRleHQoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuICAgIHJldHVybiBkZWZpbml0aW9uWzFdICYmIGZuXG4gICAgICAgID8gYXNzaWduKCQkc2NvcGUuY3R4LnNsaWNlKCksIGRlZmluaXRpb25bMV0oZm4oY3R4KSkpXG4gICAgICAgIDogJCRzY29wZS5jdHg7XG59XG5mdW5jdGlvbiBnZXRfc2xvdF9jaGFuZ2VzKGRlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBmbikge1xuICAgIGlmIChkZWZpbml0aW9uWzJdICYmIGZuKSB7XG4gICAgICAgIGNvbnN0IGxldHMgPSBkZWZpbml0aW9uWzJdKGZuKGRpcnR5KSk7XG4gICAgICAgIGlmICgkJHNjb3BlLmRpcnR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZXRzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbGV0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZCA9IFtdO1xuICAgICAgICAgICAgY29uc3QgbGVuID0gTWF0aC5tYXgoJCRzY29wZS5kaXJ0eS5sZW5ndGgsIGxldHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBtZXJnZWRbaV0gPSAkJHNjb3BlLmRpcnR5W2ldIHwgbGV0c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQkc2NvcGUuZGlydHkgfCBsZXRzO1xuICAgIH1cbiAgICByZXR1cm4gJCRzY29wZS5kaXJ0eTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9zbG90KHNsb3QsIHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBkaXJ0eSwgZ2V0X3Nsb3RfY2hhbmdlc19mbiwgZ2V0X3Nsb3RfY29udGV4dF9mbikge1xuICAgIGNvbnN0IHNsb3RfY2hhbmdlcyA9IGdldF9zbG90X2NoYW5nZXMoc2xvdF9kZWZpbml0aW9uLCAkJHNjb3BlLCBkaXJ0eSwgZ2V0X3Nsb3RfY2hhbmdlc19mbik7XG4gICAgaWYgKHNsb3RfY2hhbmdlcykge1xuICAgICAgICBjb25zdCBzbG90X2NvbnRleHQgPSBnZXRfc2xvdF9jb250ZXh0KHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBnZXRfc2xvdF9jb250ZXh0X2ZuKTtcbiAgICAgICAgc2xvdC5wKHNsb3RfY29udGV4dCwgc2xvdF9jaGFuZ2VzKTtcbiAgICB9XG59XG5mdW5jdGlvbiBleGNsdWRlX2ludGVybmFsX3Byb3BzKHByb3BzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrIGluIHByb3BzKVxuICAgICAgICBpZiAoa1swXSAhPT0gJyQnKVxuICAgICAgICAgICAgcmVzdWx0W2tdID0gcHJvcHNba107XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVfcmVzdF9wcm9wcyhwcm9wcywga2V5cykge1xuICAgIGNvbnN0IHJlc3QgPSB7fTtcbiAgICBrZXlzID0gbmV3IFNldChrZXlzKTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gcHJvcHMpXG4gICAgICAgIGlmICgha2V5cy5oYXMoaykgJiYga1swXSAhPT0gJyQnKVxuICAgICAgICAgICAgcmVzdFtrXSA9IHByb3BzW2tdO1xuICAgIHJldHVybiByZXN0O1xufVxuZnVuY3Rpb24gb25jZShmbikge1xuICAgIGxldCByYW4gPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHJhbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgICAgZm4uY2FsbCh0aGlzLCAuLi5hcmdzKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gbnVsbF90b19lbXB0eSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNldF9zdG9yZV92YWx1ZShzdG9yZSwgcmV0LCB2YWx1ZSA9IHJldCkge1xuICAgIHN0b3JlLnNldCh2YWx1ZSk7XG4gICAgcmV0dXJuIHJldDtcbn1cbmNvbnN0IGhhc19wcm9wID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG5mdW5jdGlvbiBhY3Rpb25fZGVzdHJveWVyKGFjdGlvbl9yZXN1bHQpIHtcbiAgICByZXR1cm4gYWN0aW9uX3Jlc3VsdCAmJiBpc19mdW5jdGlvbihhY3Rpb25fcmVzdWx0LmRlc3Ryb3kpID8gYWN0aW9uX3Jlc3VsdC5kZXN0cm95IDogbm9vcDtcbn1cblxuY29uc3QgaXNfY2xpZW50ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5leHBvcnRzLm5vdyA9IGlzX2NsaWVudFxuICAgID8gKCkgPT4gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpXG4gICAgOiAoKSA9PiBEYXRlLm5vdygpO1xuZXhwb3J0cy5yYWYgPSBpc19jbGllbnQgPyBjYiA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpIDogbm9vcDtcbi8vIHVzZWQgaW50ZXJuYWxseSBmb3IgdGVzdGluZ1xuZnVuY3Rpb24gc2V0X25vdyhmbikge1xuICAgIGV4cG9ydHMubm93ID0gZm47XG59XG5mdW5jdGlvbiBzZXRfcmFmKGZuKSB7XG4gICAgZXhwb3J0cy5yYWYgPSBmbjtcbn1cblxuY29uc3QgdGFza3MgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBydW5fdGFza3Mobm93KSB7XG4gICAgdGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgaWYgKCF0YXNrLmMobm93KSkge1xuICAgICAgICAgICAgdGFza3MuZGVsZXRlKHRhc2spO1xuICAgICAgICAgICAgdGFzay5mKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodGFza3Muc2l6ZSAhPT0gMClcbiAgICAgICAgZXhwb3J0cy5yYWYocnVuX3Rhc2tzKTtcbn1cbi8qKlxuICogRm9yIHRlc3RpbmcgcHVycG9zZXMgb25seSFcbiAqL1xuZnVuY3Rpb24gY2xlYXJfbG9vcHMoKSB7XG4gICAgdGFza3MuY2xlYXIoKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB0YXNrIHRoYXQgcnVucyBvbiBlYWNoIHJhZiBmcmFtZVxuICogdW50aWwgaXQgcmV0dXJucyBhIGZhbHN5IHZhbHVlIG9yIGlzIGFib3J0ZWRcbiAqL1xuZnVuY3Rpb24gbG9vcChjYWxsYmFjaykge1xuICAgIGxldCB0YXNrO1xuICAgIGlmICh0YXNrcy5zaXplID09PSAwKVxuICAgICAgICBleHBvcnRzLnJhZihydW5fdGFza3MpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByb21pc2U6IG5ldyBQcm9taXNlKGZ1bGZpbGwgPT4ge1xuICAgICAgICAgICAgdGFza3MuYWRkKHRhc2sgPSB7IGM6IGNhbGxiYWNrLCBmOiBmdWxmaWxsIH0pO1xuICAgICAgICB9KSxcbiAgICAgICAgYWJvcnQoKSB7XG4gICAgICAgICAgICB0YXNrcy5kZWxldGUodGFzayk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBhcHBlbmQodGFyZ2V0LCBub2RlKSB7XG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xufVxuZnVuY3Rpb24gaW5zZXJ0KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgdGFyZ2V0Lmluc2VydEJlZm9yZShub2RlLCBhbmNob3IgfHwgbnVsbCk7XG59XG5mdW5jdGlvbiBkZXRhY2gobm9kZSkge1xuICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfZWFjaChpdGVyYXRpb25zLCBkZXRhY2hpbmcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGl0ZXJhdGlvbnNbaV0pXG4gICAgICAgICAgICBpdGVyYXRpb25zW2ldLmQoZGV0YWNoaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRfaXMobmFtZSwgaXMpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lLCB7IGlzIH0pO1xufVxuZnVuY3Rpb24gb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcyhvYmosIGV4Y2x1ZGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG4gICAgICAgIGlmIChoYXNfcHJvcChvYmosIGspXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAmJiBleGNsdWRlLmluZGV4T2YoaykgPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0YXJnZXRba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIHN2Z19lbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIG5hbWUpO1xufVxuZnVuY3Rpb24gdGV4dChkYXRhKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRhdGEpO1xufVxuZnVuY3Rpb24gc3BhY2UoKSB7XG4gICAgcmV0dXJuIHRleHQoJyAnKTtcbn1cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICAgIHJldHVybiB0ZXh0KCcnKTtcbn1cbmZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBwcmV2ZW50X2RlZmF1bHQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzdG9wX3Byb3BhZ2F0aW9uKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNlbGYoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcylcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBhdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICBlbHNlIGlmIChub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpICE9PSB2YWx1ZSlcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBzZXRfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMobm9kZS5fX3Byb3RvX18pO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgbm9kZS5zdHlsZS5jc3NUZXh0ID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ19fdmFsdWUnKSB7XG4gICAgICAgICAgICBub2RlLnZhbHVlID0gbm9kZVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlc2NyaXB0b3JzW2tleV0gJiYgZGVzY3JpcHRvcnNba2V5XS5zZXQpIHtcbiAgICAgICAgICAgIG5vZGVba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N2Z19hdHRyaWJ1dGVzKG5vZGUsIGF0dHJpYnV0ZXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9jdXN0b21fZWxlbWVudF9kYXRhKG5vZGUsIHByb3AsIHZhbHVlKSB7XG4gICAgaWYgKHByb3AgaW4gbm9kZSkge1xuICAgICAgICBub2RlW3Byb3BdID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhdHRyKG5vZGUsIHByb3AsIHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiB4bGlua19hdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRfYmluZGluZ19ncm91cF92YWx1ZShncm91cCwgX192YWx1ZSwgY2hlY2tlZCkge1xuICAgIGNvbnN0IHZhbHVlID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGdyb3VwW2ldLmNoZWNrZWQpXG4gICAgICAgICAgICB2YWx1ZS5hZGQoZ3JvdXBbaV0uX192YWx1ZSk7XG4gICAgfVxuICAgIGlmICghY2hlY2tlZCkge1xuICAgICAgICB2YWx1ZS5kZWxldGUoX192YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHRvX251bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gJycgPyB1bmRlZmluZWQgOiArdmFsdWU7XG59XG5mdW5jdGlvbiB0aW1lX3Jhbmdlc190b19hcnJheShyYW5nZXMpIHtcbiAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFycmF5LnB1c2goeyBzdGFydDogcmFuZ2VzLnN0YXJ0KGkpLCBlbmQ6IHJhbmdlcy5lbmQoaSkgfSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cbmZ1bmN0aW9uIGNoaWxkcmVuKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShlbGVtZW50LmNoaWxkTm9kZXMpO1xufVxuZnVuY3Rpb24gY2xhaW1fZWxlbWVudChub2RlcywgbmFtZSwgYXR0cmlidXRlcywgc3ZnKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLm5vZGVOYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgICBsZXQgaiA9IDA7XG4gICAgICAgICAgICBjb25zdCByZW1vdmUgPSBbXTtcbiAgICAgICAgICAgIHdoaWxlIChqIDwgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IG5vZGUuYXR0cmlidXRlc1tqKytdO1xuICAgICAgICAgICAgICAgIGlmICghYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlLnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgcmVtb3ZlLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUocmVtb3ZlW2tdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub2Rlcy5zcGxpY2UoaSwgMSlbMF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN2ZyA/IHN2Z19lbGVtZW50KG5hbWUpIDogZWxlbWVudChuYW1lKTtcbn1cbmZ1bmN0aW9uIGNsYWltX3RleHQobm9kZXMsIGRhdGEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgICAgIG5vZGUuZGF0YSA9ICcnICsgZGF0YTtcbiAgICAgICAgICAgIHJldHVybiBub2Rlcy5zcGxpY2UoaSwgMSlbMF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRleHQoZGF0YSk7XG59XG5mdW5jdGlvbiBjbGFpbV9zcGFjZShub2Rlcykge1xuICAgIHJldHVybiBjbGFpbV90ZXh0KG5vZGVzLCAnICcpO1xufVxuZnVuY3Rpb24gc2V0X2RhdGEodGV4dCwgZGF0YSkge1xuICAgIGRhdGEgPSAnJyArIGRhdGE7XG4gICAgaWYgKHRleHQud2hvbGVUZXh0ICE9PSBkYXRhKVxuICAgICAgICB0ZXh0LmRhdGEgPSBkYXRhO1xufVxuZnVuY3Rpb24gc2V0X2lucHV0X3ZhbHVlKGlucHV0LCB2YWx1ZSkge1xuICAgIGlucHV0LnZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdHlwZShpbnB1dCwgdHlwZSkge1xuICAgIHRyeSB7XG4gICAgICAgIGlucHV0LnR5cGUgPSB0eXBlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N0eWxlKG5vZGUsIGtleSwgdmFsdWUsIGltcG9ydGFudCkge1xuICAgIG5vZGUuc3R5bGUuc2V0UHJvcGVydHkoa2V5LCB2YWx1ZSwgaW1wb3J0YW50ID8gJ2ltcG9ydGFudCcgOiAnJyk7XG59XG5mdW5jdGlvbiBzZWxlY3Rfb3B0aW9uKHNlbGVjdCwgdmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHNlbGVjdC5vcHRpb25zW2ldO1xuICAgICAgICBpZiAob3B0aW9uLl9fdmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2VsZWN0X29wdGlvbnMoc2VsZWN0LCB2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0Lm9wdGlvbnNbaV07XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IH52YWx1ZS5pbmRleE9mKG9wdGlvbi5fX3ZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZWxlY3RfdmFsdWUoc2VsZWN0KSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRfb3B0aW9uID0gc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJzpjaGVja2VkJykgfHwgc2VsZWN0Lm9wdGlvbnNbMF07XG4gICAgcmV0dXJuIHNlbGVjdGVkX29wdGlvbiAmJiBzZWxlY3RlZF9vcHRpb24uX192YWx1ZTtcbn1cbmZ1bmN0aW9uIHNlbGVjdF9tdWx0aXBsZV92YWx1ZShzZWxlY3QpIHtcbiAgICByZXR1cm4gW10ubWFwLmNhbGwoc2VsZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoJzpjaGVja2VkJyksIG9wdGlvbiA9PiBvcHRpb24uX192YWx1ZSk7XG59XG4vLyB1bmZvcnR1bmF0ZWx5IHRoaXMgY2FuJ3QgYmUgYSBjb25zdGFudCBhcyB0aGF0IHdvdWxkbid0IGJlIHRyZWUtc2hha2VhYmxlXG4vLyBzbyB3ZSBjYWNoZSB0aGUgcmVzdWx0IGluc3RlYWRcbmxldCBjcm9zc29yaWdpbjtcbmZ1bmN0aW9uIGlzX2Nyb3Nzb3JpZ2luKCkge1xuICAgIGlmIChjcm9zc29yaWdpbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNyb3Nzb3JpZ2luID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHZvaWQgd2luZG93LnBhcmVudC5kb2N1bWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNyb3Nzb3JpZ2luID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3Jvc3NvcmlnaW47XG59XG5mdW5jdGlvbiBhZGRfcmVzaXplX2xpc3RlbmVyKG5vZGUsIGZuKSB7XG4gICAgY29uc3QgY29tcHV0ZWRfc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGNvbnN0IHpfaW5kZXggPSAocGFyc2VJbnQoY29tcHV0ZWRfc3R5bGUuekluZGV4KSB8fCAwKSAtIDE7XG4gICAgaWYgKGNvbXB1dGVkX3N0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICB9XG4gICAgY29uc3QgaWZyYW1lID0gZWxlbWVudCgnaWZyYW1lJyk7XG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgZGlzcGxheTogYmxvY2s7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyBgICtcbiAgICAgICAgYG92ZXJmbG93OiBoaWRkZW47IGJvcmRlcjogMDsgb3BhY2l0eTogMDsgcG9pbnRlci1ldmVudHM6IG5vbmU7IHotaW5kZXg6ICR7el9pbmRleH07YCk7XG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgIGlmcmFtZS50YWJJbmRleCA9IC0xO1xuICAgIGNvbnN0IGNyb3Nzb3JpZ2luID0gaXNfY3Jvc3NvcmlnaW4oKTtcbiAgICBsZXQgdW5zdWJzY3JpYmU7XG4gICAgaWYgKGNyb3Nzb3JpZ2luKSB7XG4gICAgICAgIGlmcmFtZS5zcmMgPSBgZGF0YTp0ZXh0L2h0bWwsPHNjcmlwdD5vbnJlc2l6ZT1mdW5jdGlvbigpe3BhcmVudC5wb3N0TWVzc2FnZSgwLCcqJyl9PC9zY3JpcHQ+YDtcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBsaXN0ZW4od2luZG93LCAnbWVzc2FnZScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gaWZyYW1lLmNvbnRlbnRXaW5kb3cpXG4gICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZnJhbWUuc3JjID0gJ2Fib3V0OmJsYW5rJztcbiAgICAgICAgaWZyYW1lLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gbGlzdGVuKGlmcmFtZS5jb250ZW50V2luZG93LCAncmVzaXplJywgZm4pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBhcHBlbmQobm9kZSwgaWZyYW1lKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoY3Jvc3NvcmlnaW4pIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodW5zdWJzY3JpYmUgJiYgaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZGV0YWNoKGlmcmFtZSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvZ2dsZV9jbGFzcyhlbGVtZW50LCBuYW1lLCB0b2dnbGUpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdFt0b2dnbGUgPyAnYWRkJyA6ICdyZW1vdmUnXShuYW1lKTtcbn1cbmZ1bmN0aW9uIGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwpIHtcbiAgICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgZS5pbml0Q3VzdG9tRXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlLCBkZXRhaWwpO1xuICAgIHJldHVybiBlO1xufVxuZnVuY3Rpb24gcXVlcnlfc2VsZWN0b3JfYWxsKHNlbGVjdG9yLCBwYXJlbnQgPSBkb2N1bWVudC5ib2R5KSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbn1cbmNsYXNzIEh0bWxUYWcge1xuICAgIGNvbnN0cnVjdG9yKGFuY2hvciA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5hID0gYW5jaG9yO1xuICAgICAgICB0aGlzLmUgPSB0aGlzLm4gPSBudWxsO1xuICAgIH1cbiAgICBtKGh0bWwsIHRhcmdldCwgYW5jaG9yID0gbnVsbCkge1xuICAgICAgICBpZiAoIXRoaXMuZSkge1xuICAgICAgICAgICAgdGhpcy5lID0gZWxlbWVudCh0YXJnZXQubm9kZU5hbWUpO1xuICAgICAgICAgICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgICAgICAgICAgdGhpcy5oKGh0bWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaShhbmNob3IpO1xuICAgIH1cbiAgICBoKGh0bWwpIHtcbiAgICAgICAgdGhpcy5lLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHRoaXMubiA9IEFycmF5LmZyb20odGhpcy5lLmNoaWxkTm9kZXMpO1xuICAgIH1cbiAgICBpKGFuY2hvcikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaW5zZXJ0KHRoaXMudCwgdGhpcy5uW2ldLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHAoaHRtbCkge1xuICAgICAgICB0aGlzLmQoKTtcbiAgICAgICAgdGhpcy5oKGh0bWwpO1xuICAgICAgICB0aGlzLmkodGhpcy5hKTtcbiAgICB9XG4gICAgZCgpIHtcbiAgICAgICAgdGhpcy5uLmZvckVhY2goZGV0YWNoKTtcbiAgICB9XG59XG5cbmNvbnN0IGFjdGl2ZV9kb2NzID0gbmV3IFNldCgpO1xubGV0IGFjdGl2ZSA9IDA7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZGFya3NreWFwcC9zdHJpbmctaGFzaC9ibG9iL21hc3Rlci9pbmRleC5qc1xuZnVuY3Rpb24gaGFzaChzdHIpIHtcbiAgICBsZXQgaGFzaCA9IDUzODE7XG4gICAgbGV0IGkgPSBzdHIubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pXG4gICAgICAgIGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSBeIHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBoYXNoID4+PiAwO1xufVxuZnVuY3Rpb24gY3JlYXRlX3J1bGUobm9kZSwgYSwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNlLCBmbiwgdWlkID0gMCkge1xuICAgIGNvbnN0IHN0ZXAgPSAxNi42NjYgLyBkdXJhdGlvbjtcbiAgICBsZXQga2V5ZnJhbWVzID0gJ3tcXG4nO1xuICAgIGZvciAobGV0IHAgPSAwOyBwIDw9IDE7IHAgKz0gc3RlcCkge1xuICAgICAgICBjb25zdCB0ID0gYSArIChiIC0gYSkgKiBlYXNlKHApO1xuICAgICAgICBrZXlmcmFtZXMgKz0gcCAqIDEwMCArIGAleyR7Zm4odCwgMSAtIHQpfX1cXG5gO1xuICAgIH1cbiAgICBjb25zdCBydWxlID0ga2V5ZnJhbWVzICsgYDEwMCUgeyR7Zm4oYiwgMSAtIGIpfX1cXG59YDtcbiAgICBjb25zdCBuYW1lID0gYF9fc3ZlbHRlXyR7aGFzaChydWxlKX1fJHt1aWR9YDtcbiAgICBjb25zdCBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgYWN0aXZlX2RvY3MuYWRkKGRvYyk7XG4gICAgY29uc3Qgc3R5bGVzaGVldCA9IGRvYy5fX3N2ZWx0ZV9zdHlsZXNoZWV0IHx8IChkb2MuX19zdmVsdGVfc3R5bGVzaGVldCA9IGRvYy5oZWFkLmFwcGVuZENoaWxkKGVsZW1lbnQoJ3N0eWxlJykpLnNoZWV0KTtcbiAgICBjb25zdCBjdXJyZW50X3J1bGVzID0gZG9jLl9fc3ZlbHRlX3J1bGVzIHx8IChkb2MuX19zdmVsdGVfcnVsZXMgPSB7fSk7XG4gICAgaWYgKCFjdXJyZW50X3J1bGVzW25hbWVdKSB7XG4gICAgICAgIGN1cnJlbnRfcnVsZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgICBzdHlsZXNoZWV0Lmluc2VydFJ1bGUoYEBrZXlmcmFtZXMgJHtuYW1lfSAke3J1bGV9YCwgc3R5bGVzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgIH1cbiAgICBjb25zdCBhbmltYXRpb24gPSBub2RlLnN0eWxlLmFuaW1hdGlvbiB8fCAnJztcbiAgICBub2RlLnN0eWxlLmFuaW1hdGlvbiA9IGAke2FuaW1hdGlvbiA/IGAke2FuaW1hdGlvbn0sIGAgOiBgYH0ke25hbWV9ICR7ZHVyYXRpb259bXMgbGluZWFyICR7ZGVsYXl9bXMgMSBib3RoYDtcbiAgICBhY3RpdmUgKz0gMTtcbiAgICByZXR1cm4gbmFtZTtcbn1cbmZ1bmN0aW9uIGRlbGV0ZV9ydWxlKG5vZGUsIG5hbWUpIHtcbiAgICBjb25zdCBwcmV2aW91cyA9IChub2RlLnN0eWxlLmFuaW1hdGlvbiB8fCAnJykuc3BsaXQoJywgJyk7XG4gICAgY29uc3QgbmV4dCA9IHByZXZpb3VzLmZpbHRlcihuYW1lXG4gICAgICAgID8gYW5pbSA9PiBhbmltLmluZGV4T2YobmFtZSkgPCAwIC8vIHJlbW92ZSBzcGVjaWZpYyBhbmltYXRpb25cbiAgICAgICAgOiBhbmltID0+IGFuaW0uaW5kZXhPZignX19zdmVsdGUnKSA9PT0gLTEgLy8gcmVtb3ZlIGFsbCBTdmVsdGUgYW5pbWF0aW9uc1xuICAgICk7XG4gICAgY29uc3QgZGVsZXRlZCA9IHByZXZpb3VzLmxlbmd0aCAtIG5leHQubGVuZ3RoO1xuICAgIGlmIChkZWxldGVkKSB7XG4gICAgICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gbmV4dC5qb2luKCcsICcpO1xuICAgICAgICBhY3RpdmUgLT0gZGVsZXRlZDtcbiAgICAgICAgaWYgKCFhY3RpdmUpXG4gICAgICAgICAgICBjbGVhcl9ydWxlcygpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsZWFyX3J1bGVzKCkge1xuICAgIGV4cG9ydHMucmFmKCgpID0+IHtcbiAgICAgICAgaWYgKGFjdGl2ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgYWN0aXZlX2RvY3MuZm9yRWFjaChkb2MgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3R5bGVzaGVldCA9IGRvYy5fX3N2ZWx0ZV9zdHlsZXNoZWV0O1xuICAgICAgICAgICAgbGV0IGkgPSBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pXG4gICAgICAgICAgICAgICAgc3R5bGVzaGVldC5kZWxldGVSdWxlKGkpO1xuICAgICAgICAgICAgZG9jLl9fc3ZlbHRlX3J1bGVzID0ge307XG4gICAgICAgIH0pO1xuICAgICAgICBhY3RpdmVfZG9jcy5jbGVhcigpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVfYW5pbWF0aW9uKG5vZGUsIGZyb20sIGZuLCBwYXJhbXMpIHtcbiAgICBpZiAoIWZyb20pXG4gICAgICAgIHJldHVybiBub29wO1xuICAgIGNvbnN0IHRvID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoZnJvbS5sZWZ0ID09PSB0by5sZWZ0ICYmIGZyb20ucmlnaHQgPT09IHRvLnJpZ2h0ICYmIGZyb20udG9wID09PSB0by50b3AgJiYgZnJvbS5ib3R0b20gPT09IHRvLmJvdHRvbSlcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgXG4gICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBzaG91bGQgdGhpcyBiZSBzZXBhcmF0ZWQgZnJvbSBkZXN0cnVjdHVyaW5nPyBPciBzdGFydC9lbmQgYWRkZWQgdG8gcHVibGljIGFwaSBhbmQgZG9jdW1lbnRhdGlvbj9cbiAgICBzdGFydDogc3RhcnRfdGltZSA9IGV4cG9ydHMubm93KCkgKyBkZWxheSwgXG4gICAgLy8gQHRzLWlnbm9yZSB0b2RvOlxuICAgIGVuZCA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbiwgdGljayA9IG5vb3AsIGNzcyB9ID0gZm4obm9kZSwgeyBmcm9tLCB0byB9LCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gdHJ1ZTtcbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIGxldCBuYW1lO1xuICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICBuYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWxheSkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIG5hbWUpO1xuICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgaWYgKCFzdGFydGVkICYmIG5vdyA+PSBzdGFydF90aW1lKSB7XG4gICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRlZCAmJiBub3cgPj0gZW5kKSB7XG4gICAgICAgICAgICB0aWNrKDEsIDApO1xuICAgICAgICAgICAgc3RvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydGVkKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gbm93IC0gc3RhcnRfdGltZTtcbiAgICAgICAgICAgIGNvbnN0IHQgPSAwICsgMSAqIGVhc2luZyhwIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgc3RhcnQoKTtcbiAgICB0aWNrKDAsIDEpO1xuICAgIHJldHVybiBzdG9wO1xufVxuZnVuY3Rpb24gZml4X3Bvc2l0aW9uKG5vZGUpIHtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgaWYgKHN0eWxlLnBvc2l0aW9uICE9PSAnYWJzb2x1dGUnICYmIHN0eWxlLnBvc2l0aW9uICE9PSAnZml4ZWQnKSB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gc3R5bGU7XG4gICAgICAgIGNvbnN0IGEgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgbm9kZS5zdHlsZS53aWR0aCA9IHdpZHRoO1xuICAgICAgICBub2RlLnN0eWxlLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgYWRkX3RyYW5zZm9ybShub2RlLCBhKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhZGRfdHJhbnNmb3JtKG5vZGUsIGEpIHtcbiAgICBjb25zdCBiID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoYS5sZWZ0ICE9PSBiLmxlZnQgfHwgYS50b3AgIT09IGIudG9wKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcbiAgICAgICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSBgJHt0cmFuc2Zvcm19IHRyYW5zbGF0ZSgke2EubGVmdCAtIGIubGVmdH1weCwgJHthLnRvcCAtIGIudG9wfXB4KWA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgZXhwb3J0cy5jdXJyZW50X2NvbXBvbmVudCA9IGNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGdldF9jdXJyZW50X2NvbXBvbmVudCgpIHtcbiAgICBpZiAoIWV4cG9ydHMuY3VycmVudF9jb21wb25lbnQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRnVuY3Rpb24gY2FsbGVkIG91dHNpZGUgY29tcG9uZW50IGluaXRpYWxpemF0aW9uYCk7XG4gICAgcmV0dXJuIGV4cG9ydHMuY3VycmVudF9jb21wb25lbnQ7XG59XG5mdW5jdGlvbiBiZWZvcmVVcGRhdGUoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5iZWZvcmVfdXBkYXRlLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gb25Nb3VudChmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX21vdW50LnB1c2goZm4pO1xufVxuZnVuY3Rpb24gYWZ0ZXJVcGRhdGUoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5hZnRlcl91cGRhdGUucHVzaChmbik7XG59XG5mdW5jdGlvbiBvbkRlc3Ryb3koZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5vbl9kZXN0cm95LnB1c2goZm4pO1xufVxuZnVuY3Rpb24gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCkge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudCgpO1xuICAgIHJldHVybiAodHlwZSwgZGV0YWlsKSA9PiB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IGNvbXBvbmVudC4kJC5jYWxsYmFja3NbdHlwZV07XG4gICAgICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gYXJlIHRoZXJlIHNpdHVhdGlvbnMgd2hlcmUgZXZlbnRzIGNvdWxkIGJlIGRpc3BhdGNoZWRcbiAgICAgICAgICAgIC8vIGluIGEgc2VydmVyIChub24tRE9NKSBlbnZpcm9ubWVudD9cbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gY3VzdG9tX2V2ZW50KHR5cGUsIGRldGFpbCk7XG4gICAgICAgICAgICBjYWxsYmFja3Muc2xpY2UoKS5mb3JFYWNoKGZuID0+IHtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKGNvbXBvbmVudCwgZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gc2V0Q29udGV4dChrZXksIGNvbnRleHQpIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5jb250ZXh0LnNldChrZXksIGNvbnRleHQpO1xufVxuZnVuY3Rpb24gZ2V0Q29udGV4dChrZXkpIHtcbiAgICByZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5nZXQoa2V5KTtcbn1cbi8vIFRPRE8gZmlndXJlIG91dCBpZiB3ZSBzdGlsbCB3YW50IHRvIHN1cHBvcnRcbi8vIHNob3J0aGFuZCBldmVudHMsIG9yIGlmIHdlIHdhbnQgdG8gaW1wbGVtZW50XG4vLyBhIHJlYWwgYnViYmxpbmcgbWVjaGFuaXNtXG5mdW5jdGlvbiBidWJibGUoY29tcG9uZW50LCBldmVudCkge1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IGNvbXBvbmVudC4kJC5jYWxsYmFja3NbZXZlbnQudHlwZV07XG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICBjYWxsYmFja3Muc2xpY2UoKS5mb3JFYWNoKGZuID0+IGZuKGV2ZW50KSk7XG4gICAgfVxufVxuXG5jb25zdCBkaXJ0eV9jb21wb25lbnRzID0gW107XG5jb25zdCBpbnRyb3MgPSB7IGVuYWJsZWQ6IGZhbHNlIH07XG5jb25zdCBiaW5kaW5nX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgcmVuZGVyX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgZmx1c2hfY2FsbGJhY2tzID0gW107XG5jb25zdCByZXNvbHZlZF9wcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5sZXQgdXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gc2NoZWR1bGVfdXBkYXRlKCkge1xuICAgIGlmICghdXBkYXRlX3NjaGVkdWxlZCkge1xuICAgICAgICB1cGRhdGVfc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgcmVzb2x2ZWRfcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0aWNrKCkge1xuICAgIHNjaGVkdWxlX3VwZGF0ZSgpO1xuICAgIHJldHVybiByZXNvbHZlZF9wcm9taXNlO1xufVxuZnVuY3Rpb24gYWRkX3JlbmRlcl9jYWxsYmFjayhmbikge1xuICAgIHJlbmRlcl9jYWxsYmFja3MucHVzaChmbik7XG59XG5mdW5jdGlvbiBhZGRfZmx1c2hfY2FsbGJhY2soZm4pIHtcbiAgICBmbHVzaF9jYWxsYmFja3MucHVzaChmbik7XG59XG5sZXQgZmx1c2hpbmcgPSBmYWxzZTtcbmNvbnN0IHNlZW5fY2FsbGJhY2tzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgaWYgKGZsdXNoaW5nKVxuICAgICAgICByZXR1cm47XG4gICAgZmx1c2hpbmcgPSB0cnVlO1xuICAgIGRvIHtcbiAgICAgICAgLy8gZmlyc3QsIGNhbGwgYmVmb3JlVXBkYXRlIGZ1bmN0aW9uc1xuICAgICAgICAvLyBhbmQgdXBkYXRlIGNvbXBvbmVudHNcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJ0eV9jb21wb25lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBkaXJ0eV9jb21wb25lbnRzW2ldO1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoY29tcG9uZW50LiQkKTtcbiAgICAgICAgfVxuICAgICAgICBkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIHdoaWxlIChiaW5kaW5nX2NhbGxiYWNrcy5sZW5ndGgpXG4gICAgICAgICAgICBiaW5kaW5nX2NhbGxiYWNrcy5wb3AoKSgpO1xuICAgICAgICAvLyB0aGVuLCBvbmNlIGNvbXBvbmVudHMgYXJlIHVwZGF0ZWQsIGNhbGxcbiAgICAgICAgLy8gYWZ0ZXJVcGRhdGUgZnVuY3Rpb25zLiBUaGlzIG1heSBjYXVzZVxuICAgICAgICAvLyBzdWJzZXF1ZW50IHVwZGF0ZXMuLi5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW5kZXJfY2FsbGJhY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IHJlbmRlcl9jYWxsYmFja3NbaV07XG4gICAgICAgICAgICBpZiAoIXNlZW5fY2FsbGJhY2tzLmhhcyhjYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICAvLyAuLi5zbyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGxvb3BzXG4gICAgICAgICAgICAgICAgc2Vlbl9jYWxsYmFja3MuYWRkKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlbmRlcl9jYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICB9IHdoaWxlIChkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCk7XG4gICAgd2hpbGUgKGZsdXNoX2NhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgZmx1c2hfY2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgfVxuICAgIHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBmbHVzaGluZyA9IGZhbHNlO1xuICAgIHNlZW5fY2FsbGJhY2tzLmNsZWFyKCk7XG59XG5mdW5jdGlvbiB1cGRhdGUoJCQpIHtcbiAgICBpZiAoJCQuZnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgJCQudXBkYXRlKCk7XG4gICAgICAgIHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG4gICAgICAgIGNvbnN0IGRpcnR5ID0gJCQuZGlydHk7XG4gICAgICAgICQkLmRpcnR5ID0gWy0xXTtcbiAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQucCgkJC5jdHgsIGRpcnR5KTtcbiAgICAgICAgJCQuYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG4gICAgfVxufVxuXG5sZXQgcHJvbWlzZTtcbmZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgaWYgKCFwcm9taXNlKSB7XG4gICAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBkaXNwYXRjaChub2RlLCBkaXJlY3Rpb24sIGtpbmQpIHtcbiAgICBub2RlLmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KGAke2RpcmVjdGlvbiA/ICdpbnRybycgOiAnb3V0cm8nfSR7a2luZH1gKSk7XG59XG5jb25zdCBvdXRyb2luZyA9IG5ldyBTZXQoKTtcbmxldCBvdXRyb3M7XG5mdW5jdGlvbiBncm91cF9vdXRyb3MoKSB7XG4gICAgb3V0cm9zID0ge1xuICAgICAgICByOiAwLFxuICAgICAgICBjOiBbXSxcbiAgICAgICAgcDogb3V0cm9zIC8vIHBhcmVudCBncm91cFxuICAgIH07XG59XG5mdW5jdGlvbiBjaGVja19vdXRyb3MoKSB7XG4gICAgaWYgKCFvdXRyb3Mucikge1xuICAgICAgICBydW5fYWxsKG91dHJvcy5jKTtcbiAgICB9XG4gICAgb3V0cm9zID0gb3V0cm9zLnA7XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX2luKGJsb2NrLCBsb2NhbCkge1xuICAgIGlmIChibG9jayAmJiBibG9jay5pKSB7XG4gICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgIGJsb2NrLmkobG9jYWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb25fb3V0KGJsb2NrLCBsb2NhbCwgZGV0YWNoLCBjYWxsYmFjaykge1xuICAgIGlmIChibG9jayAmJiBibG9jay5vKSB7XG4gICAgICAgIGlmIChvdXRyb2luZy5oYXMoYmxvY2spKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBvdXRyb2luZy5hZGQoYmxvY2spO1xuICAgICAgICBvdXRyb3MuYy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoZGV0YWNoKVxuICAgICAgICAgICAgICAgICAgICBibG9jay5kKDEpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBibG9jay5vKGxvY2FsKTtcbiAgICB9XG59XG5jb25zdCBudWxsX3RyYW5zaXRpb24gPSB7IGR1cmF0aW9uOiAwIH07XG5mdW5jdGlvbiBjcmVhdGVfaW5fdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSBmYWxzZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgbGV0IHRhc2s7XG4gICAgbGV0IHVpZCA9IDA7XG4gICAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbygpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcywgdWlkKyspO1xuICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICBjb25zdCBzdGFydF90aW1lID0gZXhwb3J0cy5ub3coKSArIGRlbGF5O1xuICAgICAgICBjb25zdCBlbmRfdGltZSA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbjtcbiAgICAgICAgaWYgKHRhc2spXG4gICAgICAgICAgICB0YXNrLmFib3J0KCk7XG4gICAgICAgIHJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIHRydWUsICdzdGFydCcpKTtcbiAgICAgICAgdGFzayA9IGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBlbmRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDEsIDApO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCB0cnVlLCAnZW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBzdGFydF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlYXNpbmcoKG5vdyAtIHN0YXJ0X3RpbWUpIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnVubmluZztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBzdGFydGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQoKSB7XG4gICAgICAgICAgICBpZiAoc3RhcnRlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlKTtcbiAgICAgICAgICAgIGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICAgICAgd2FpdCgpLnRoZW4oZ28pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ28oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW52YWxpZGF0ZSgpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW5kKCkge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9vdXRfdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSB0cnVlO1xuICAgIGxldCBhbmltYXRpb25fbmFtZTtcbiAgICBjb25zdCBncm91cCA9IG91dHJvcztcbiAgICBncm91cC5yICs9IDE7XG4gICAgZnVuY3Rpb24gZ28oKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDEsIDAsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICBjb25zdCBzdGFydF90aW1lID0gZXhwb3J0cy5ub3coKSArIGRlbGF5O1xuICAgICAgICBjb25zdCBlbmRfdGltZSA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbjtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ3N0YXJ0JykpO1xuICAgICAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gZW5kX3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgZmFsc2UsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEtLWdyb3VwLnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCByZXN1bHQgaW4gYGVuZCgpYCBiZWluZyBjYWxsZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzbyB3ZSBkb24ndCBuZWVkIHRvIGNsZWFuIHVwIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bl9hbGwoZ3JvdXAuYyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGVhc2luZygobm93IC0gc3RhcnRfdGltZSkgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMSAtIHQsIHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydW5uaW5nO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgd2FpdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICBnbygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdvKCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGVuZChyZXNldCkge1xuICAgICAgICAgICAgaWYgKHJlc2V0ICYmIGNvbmZpZy50aWNrKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLnRpY2soMSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMsIGludHJvKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHQgPSBpbnRybyA/IDAgOiAxO1xuICAgIGxldCBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgIGxldCBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgIGxldCBhbmltYXRpb25fbmFtZSA9IG51bGw7XG4gICAgZnVuY3Rpb24gY2xlYXJfYW5pbWF0aW9uKCkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uX25hbWUpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGluaXQocHJvZ3JhbSwgZHVyYXRpb24pIHtcbiAgICAgICAgY29uc3QgZCA9IHByb2dyYW0uYiAtIHQ7XG4gICAgICAgIGR1cmF0aW9uICo9IE1hdGguYWJzKGQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYTogdCxcbiAgICAgICAgICAgIGI6IHByb2dyYW0uYixcbiAgICAgICAgICAgIGQsXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgIHN0YXJ0OiBwcm9ncmFtLnN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBwcm9ncmFtLnN0YXJ0ICsgZHVyYXRpb24sXG4gICAgICAgICAgICBncm91cDogcHJvZ3JhbS5ncm91cFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbyhiKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGNvbnN0IHByb2dyYW0gPSB7XG4gICAgICAgICAgICBzdGFydDogZXhwb3J0cy5ub3coKSArIGRlbGF5LFxuICAgICAgICAgICAgYlxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWIpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICBwcm9ncmFtLmdyb3VwID0gb3V0cm9zO1xuICAgICAgICAgICAgb3V0cm9zLnIgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocnVubmluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhbiBpbnRybywgYW5kIHRoZXJlJ3MgYSBkZWxheSwgd2UgbmVlZCB0byBkb1xuICAgICAgICAgICAgLy8gYW4gaW5pdGlhbCB0aWNrIGFuZC9vciBhcHBseSBDU1MgYW5pbWF0aW9uIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiKVxuICAgICAgICAgICAgICAgIHRpY2soMCwgMSk7XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0KHByb2dyYW0sIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgYiwgJ3N0YXJ0JykpO1xuICAgICAgICAgICAgbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nX3Byb2dyYW0gJiYgbm93ID4gcGVuZGluZ19wcm9ncmFtLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IGluaXQocGVuZGluZ19wcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCAnc3RhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIHQsIHJ1bm5pbmdfcHJvZ3JhbS5iLCBydW5uaW5nX3Byb2dyYW0uZHVyYXRpb24sIDAsIGVhc2luZywgY29uZmlnLmNzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm93ID49IHJ1bm5pbmdfcHJvZ3JhbS5lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCA9IHJ1bm5pbmdfcHJvZ3JhbS5iLCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwZW5kaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSdyZSBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbS5iKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludHJvIOKAlCB3ZSBjYW4gdGlkeSB1cCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG91dHJvIOKAlCBuZWVkcyB0byBiZSBjb29yZGluYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tcnVubmluZ19wcm9ncmFtLmdyb3VwLnIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5fYWxsKHJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5jKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBub3cgLSBydW5uaW5nX3Byb2dyYW0uc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gcnVubmluZ19wcm9ncmFtLmEgKyBydW5uaW5nX3Byb2dyYW0uZCAqIGVhc2luZyhwIC8gcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhIShydW5uaW5nX3Byb2dyYW0gfHwgcGVuZGluZ19wcm9ncmFtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJ1bihiKSB7XG4gICAgICAgICAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHdhaXQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgICAgICAgICAgZ28oYik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnbyhiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW5kKCkge1xuICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlX3Byb21pc2UocHJvbWlzZSwgaW5mbykge1xuICAgIGNvbnN0IHRva2VuID0gaW5mby50b2tlbiA9IHt9O1xuICAgIGZ1bmN0aW9uIHVwZGF0ZSh0eXBlLCBpbmRleCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaW5mby50b2tlbiAhPT0gdG9rZW4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGluZm8ucmVzb2x2ZWQgPSB2YWx1ZTtcbiAgICAgICAgbGV0IGNoaWxkX2N0eCA9IGluZm8uY3R4O1xuICAgICAgICBpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNoaWxkX2N0eCA9IGNoaWxkX2N0eC5zbGljZSgpO1xuICAgICAgICAgICAgY2hpbGRfY3R4W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBibG9jayA9IHR5cGUgJiYgKGluZm8uY3VycmVudCA9IHR5cGUpKGNoaWxkX2N0eCk7XG4gICAgICAgIGxldCBuZWVkc19mbHVzaCA9IGZhbHNlO1xuICAgICAgICBpZiAoaW5mby5ibG9jaykge1xuICAgICAgICAgICAgaWYgKGluZm8uYmxvY2tzKSB7XG4gICAgICAgICAgICAgICAgaW5mby5ibG9ja3MuZm9yRWFjaCgoYmxvY2ssIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IGluZGV4ICYmIGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25fb3V0KGJsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5ibG9ja3NbaV0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5mby5ibG9jay5kKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvY2suYygpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihibG9jaywgMSk7XG4gICAgICAgICAgICBibG9jay5tKGluZm8ubW91bnQoKSwgaW5mby5hbmNob3IpO1xuICAgICAgICAgICAgbmVlZHNfZmx1c2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGluZm8uYmxvY2sgPSBibG9jaztcbiAgICAgICAgaWYgKGluZm8uYmxvY2tzKVxuICAgICAgICAgICAgaW5mby5ibG9ja3NbaW5kZXhdID0gYmxvY2s7XG4gICAgICAgIGlmIChuZWVkc19mbHVzaCkge1xuICAgICAgICAgICAgZmx1c2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNfcHJvbWlzZShwcm9taXNlKSkge1xuICAgICAgICBjb25zdCBjdXJyZW50X2NvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudCgpO1xuICAgICAgICBwcm9taXNlLnRoZW4odmFsdWUgPT4ge1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnRoZW4sIDEsIGluZm8udmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLmNhdGNoLCAyLCBpbmZvLmVycm9yLCBlcnJvcik7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBpZiB3ZSBwcmV2aW91c2x5IGhhZCBhIHRoZW4vY2F0Y2ggYmxvY2ssIGRlc3Ryb3kgaXRcbiAgICAgICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby5wZW5kaW5nKSB7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby5wZW5kaW5nLCAwKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoaW5mby5jdXJyZW50ICE9PSBpbmZvLnRoZW4pIHtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnRoZW4sIDEsIGluZm8udmFsdWUsIHByb21pc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaW5mby5yZXNvbHZlZCA9IHByb21pc2U7XG4gICAgfVxufVxuXG5jb25zdCBnbG9iYWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGdsb2JhbFRoaXNcbiAgICAgICAgOiBnbG9iYWwpO1xuXG5mdW5jdGlvbiBkZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5kKDEpO1xuICAgIGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcbn1cbmZ1bmN0aW9uIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICB0cmFuc2l0aW9uX291dChibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICBsb29rdXAuZGVsZXRlKGJsb2NrLmtleSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBmaXhfYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmYoKTtcbiAgICBkZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApO1xufVxuZnVuY3Rpb24gZml4X2FuZF9vdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZigpO1xuICAgIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApO1xufVxuZnVuY3Rpb24gdXBkYXRlX2tleWVkX2VhY2gob2xkX2Jsb2NrcywgZGlydHksIGdldF9rZXksIGR5bmFtaWMsIGN0eCwgbGlzdCwgbG9va3VwLCBub2RlLCBkZXN0cm95LCBjcmVhdGVfZWFjaF9ibG9jaywgbmV4dCwgZ2V0X2NvbnRleHQpIHtcbiAgICBsZXQgbyA9IG9sZF9ibG9ja3MubGVuZ3RoO1xuICAgIGxldCBuID0gbGlzdC5sZW5ndGg7XG4gICAgbGV0IGkgPSBvO1xuICAgIGNvbnN0IG9sZF9pbmRleGVzID0ge307XG4gICAgd2hpbGUgKGktLSlcbiAgICAgICAgb2xkX2luZGV4ZXNbb2xkX2Jsb2Nrc1tpXS5rZXldID0gaTtcbiAgICBjb25zdCBuZXdfYmxvY2tzID0gW107XG4gICAgY29uc3QgbmV3X2xvb2t1cCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBkZWx0YXMgPSBuZXcgTWFwKCk7XG4gICAgaSA9IG47XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb25zdCBjaGlsZF9jdHggPSBnZXRfY29udGV4dChjdHgsIGxpc3QsIGkpO1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRfa2V5KGNoaWxkX2N0eCk7XG4gICAgICAgIGxldCBibG9jayA9IGxvb2t1cC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFibG9jaykge1xuICAgICAgICAgICAgYmxvY2sgPSBjcmVhdGVfZWFjaF9ibG9jayhrZXksIGNoaWxkX2N0eCk7XG4gICAgICAgICAgICBibG9jay5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZHluYW1pYykge1xuICAgICAgICAgICAgYmxvY2sucChjaGlsZF9jdHgsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgICBuZXdfbG9va3VwLnNldChrZXksIG5ld19ibG9ja3NbaV0gPSBibG9jayk7XG4gICAgICAgIGlmIChrZXkgaW4gb2xkX2luZGV4ZXMpXG4gICAgICAgICAgICBkZWx0YXMuc2V0KGtleSwgTWF0aC5hYnMoaSAtIG9sZF9pbmRleGVzW2tleV0pKTtcbiAgICB9XG4gICAgY29uc3Qgd2lsbF9tb3ZlID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IGRpZF9tb3ZlID0gbmV3IFNldCgpO1xuICAgIGZ1bmN0aW9uIGluc2VydChibG9jaykge1xuICAgICAgICB0cmFuc2l0aW9uX2luKGJsb2NrLCAxKTtcbiAgICAgICAgYmxvY2subShub2RlLCBuZXh0KTtcbiAgICAgICAgbG9va3VwLnNldChibG9jay5rZXksIGJsb2NrKTtcbiAgICAgICAgbmV4dCA9IGJsb2NrLmZpcnN0O1xuICAgICAgICBuLS07XG4gICAgfVxuICAgIHdoaWxlIChvICYmIG4pIHtcbiAgICAgICAgY29uc3QgbmV3X2Jsb2NrID0gbmV3X2Jsb2Nrc1tuIC0gMV07XG4gICAgICAgIGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3NbbyAtIDFdO1xuICAgICAgICBjb25zdCBuZXdfa2V5ID0gbmV3X2Jsb2NrLmtleTtcbiAgICAgICAgY29uc3Qgb2xkX2tleSA9IG9sZF9ibG9jay5rZXk7XG4gICAgICAgIGlmIChuZXdfYmxvY2sgPT09IG9sZF9ibG9jaykge1xuICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgICAgICAgbmV4dCA9IG5ld19ibG9jay5maXJzdDtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgICAgIG4tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2tleSkpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBvbGQgYmxvY2tcbiAgICAgICAgICAgIGRlc3Ryb3kob2xkX2Jsb2NrLCBsb29rdXApO1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFsb29rdXAuaGFzKG5ld19rZXkpIHx8IHdpbGxfbW92ZS5oYXMobmV3X2tleSkpIHtcbiAgICAgICAgICAgIGluc2VydChuZXdfYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRpZF9tb3ZlLmhhcyhvbGRfa2V5KSkge1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlbHRhcy5nZXQobmV3X2tleSkgPiBkZWx0YXMuZ2V0KG9sZF9rZXkpKSB7XG4gICAgICAgICAgICBkaWRfbW92ZS5hZGQobmV3X2tleSk7XG4gICAgICAgICAgICBpbnNlcnQobmV3X2Jsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdpbGxfbW92ZS5hZGQob2xkX2tleSk7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKG8tLSkge1xuICAgICAgICBjb25zdCBvbGRfYmxvY2sgPSBvbGRfYmxvY2tzW29dO1xuICAgICAgICBpZiAoIW5ld19sb29rdXAuaGFzKG9sZF9ibG9jay5rZXkpKVxuICAgICAgICAgICAgZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG4gICAgfVxuICAgIHdoaWxlIChuKVxuICAgICAgICBpbnNlcnQobmV3X2Jsb2Nrc1tuIC0gMV0pO1xuICAgIHJldHVybiBuZXdfYmxvY2tzO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfZWFjaF9rZXlzKGN0eCwgbGlzdCwgZ2V0X2NvbnRleHQsIGdldF9rZXkpIHtcbiAgICBjb25zdCBrZXlzID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRfa2V5KGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSkpO1xuICAgICAgICBpZiAoa2V5cy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgaGF2ZSBkdXBsaWNhdGUga2V5cyBpbiBhIGtleWVkIGVhY2hgKTtcbiAgICAgICAgfVxuICAgICAgICBrZXlzLmFkZChrZXkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0X3NwcmVhZF91cGRhdGUobGV2ZWxzLCB1cGRhdGVzKSB7XG4gICAgY29uc3QgdXBkYXRlID0ge307XG4gICAgY29uc3QgdG9fbnVsbF9vdXQgPSB7fTtcbiAgICBjb25zdCBhY2NvdW50ZWRfZm9yID0geyAkJHNjb3BlOiAxIH07XG4gICAgbGV0IGkgPSBsZXZlbHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29uc3QgbyA9IGxldmVsc1tpXTtcbiAgICAgICAgY29uc3QgbiA9IHVwZGF0ZXNbaV07XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIG4pKVxuICAgICAgICAgICAgICAgICAgICB0b19udWxsX291dFtrZXldID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFjY291bnRlZF9mb3Jba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVba2V5XSA9IG5ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudGVkX2ZvcltrZXldID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXZlbHNbaV0gPSBuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbykge1xuICAgICAgICAgICAgICAgIGFjY291bnRlZF9mb3Jba2V5XSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdG9fbnVsbF9vdXQpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIHVwZGF0ZSkpXG4gICAgICAgICAgICB1cGRhdGVba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZTtcbn1cbmZ1bmN0aW9uIGdldF9zcHJlYWRfb2JqZWN0KHNwcmVhZF9wcm9wcykge1xuICAgIHJldHVybiB0eXBlb2Ygc3ByZWFkX3Byb3BzID09PSAnb2JqZWN0JyAmJiBzcHJlYWRfcHJvcHMgIT09IG51bGwgPyBzcHJlYWRfcHJvcHMgOiB7fTtcbn1cblxuLy8gc291cmNlOiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWxcbmNvbnN0IGJvb2xlYW5fYXR0cmlidXRlcyA9IG5ldyBTZXQoW1xuICAgICdhbGxvd2Z1bGxzY3JlZW4nLFxuICAgICdhbGxvd3BheW1lbnRyZXF1ZXN0JyxcbiAgICAnYXN5bmMnLFxuICAgICdhdXRvZm9jdXMnLFxuICAgICdhdXRvcGxheScsXG4gICAgJ2NoZWNrZWQnLFxuICAgICdjb250cm9scycsXG4gICAgJ2RlZmF1bHQnLFxuICAgICdkZWZlcicsXG4gICAgJ2Rpc2FibGVkJyxcbiAgICAnZm9ybW5vdmFsaWRhdGUnLFxuICAgICdoaWRkZW4nLFxuICAgICdpc21hcCcsXG4gICAgJ2xvb3AnLFxuICAgICdtdWx0aXBsZScsXG4gICAgJ211dGVkJyxcbiAgICAnbm9tb2R1bGUnLFxuICAgICdub3ZhbGlkYXRlJyxcbiAgICAnb3BlbicsXG4gICAgJ3BsYXlzaW5saW5lJyxcbiAgICAncmVhZG9ubHknLFxuICAgICdyZXF1aXJlZCcsXG4gICAgJ3JldmVyc2VkJyxcbiAgICAnc2VsZWN0ZWQnXG5dKTtcblxuY29uc3QgaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIgPSAvW1xccydcIj4vPVxcdXtGREQwfS1cXHV7RkRFRn1cXHV7RkZGRX1cXHV7RkZGRn1cXHV7MUZGRkV9XFx1ezFGRkZGfVxcdXsyRkZGRX1cXHV7MkZGRkZ9XFx1ezNGRkZFfVxcdXszRkZGRn1cXHV7NEZGRkV9XFx1ezRGRkZGfVxcdXs1RkZGRX1cXHV7NUZGRkZ9XFx1ezZGRkZFfVxcdXs2RkZGRn1cXHV7N0ZGRkV9XFx1ezdGRkZGfVxcdXs4RkZGRX1cXHV7OEZGRkZ9XFx1ezlGRkZFfVxcdXs5RkZGRn1cXHV7QUZGRkV9XFx1e0FGRkZGfVxcdXtCRkZGRX1cXHV7QkZGRkZ9XFx1e0NGRkZFfVxcdXtDRkZGRn1cXHV7REZGRkV9XFx1e0RGRkZGfVxcdXtFRkZGRX1cXHV7RUZGRkZ9XFx1e0ZGRkZFfVxcdXtGRkZGRn1cXHV7MTBGRkZFfVxcdXsxMEZGRkZ9XS91O1xuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG4vLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jbm9uY2hhcmFjdGVyXG5mdW5jdGlvbiBzcHJlYWQoYXJncywgY2xhc3Nlc190b19hZGQpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbih7fSwgLi4uYXJncyk7XG4gICAgaWYgKGNsYXNzZXNfdG9fYWRkKSB7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzLmNsYXNzID09IG51bGwpIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMuY2xhc3MgPSBjbGFzc2VzX3RvX2FkZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMuY2xhc3MgKz0gJyAnICsgY2xhc3Nlc190b19hZGQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgIGlmIChpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3Rlci50ZXN0KG5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIHN0ciArPSBcIiBcIiArIG5hbWU7XG4gICAgICAgIGVsc2UgaWYgKGJvb2xlYW5fYXR0cmlidXRlcy5oYXMobmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKVxuICAgICAgICAgICAgICAgIHN0ciArPSBcIiBcIiArIG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc3RyICs9IGAgJHtuYW1lfT1cIiR7U3RyaW5nKHZhbHVlKS5yZXBsYWNlKC9cIi9nLCAnJiMzNDsnKS5yZXBsYWNlKC8nL2csICcmIzM5OycpfVwiYDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzdHI7XG59XG5jb25zdCBlc2NhcGVkID0ge1xuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnLFxuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7J1xufTtcbmZ1bmN0aW9uIGVzY2FwZShodG1sKSB7XG4gICAgcmV0dXJuIFN0cmluZyhodG1sKS5yZXBsYWNlKC9bXCInJjw+XS9nLCBtYXRjaCA9PiBlc2NhcGVkW21hdGNoXSk7XG59XG5mdW5jdGlvbiBlYWNoKGl0ZW1zLCBmbikge1xuICAgIGxldCBzdHIgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0ciArPSBmbihpdGVtc1tpXSwgaSk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5jb25zdCBtaXNzaW5nX2NvbXBvbmVudCA9IHtcbiAgICAkJHJlbmRlcjogKCkgPT4gJydcbn07XG5mdW5jdGlvbiB2YWxpZGF0ZV9jb21wb25lbnQoY29tcG9uZW50LCBuYW1lKSB7XG4gICAgaWYgKCFjb21wb25lbnQgfHwgIWNvbXBvbmVudC4kJHJlbmRlcikge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ3N2ZWx0ZTpjb21wb25lbnQnKVxuICAgICAgICAgICAgbmFtZSArPSAnIHRoaXM9ey4uLn0nO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYDwke25hbWV9PiBpcyBub3QgYSB2YWxpZCBTU1IgY29tcG9uZW50LiBZb3UgbWF5IG5lZWQgdG8gcmV2aWV3IHlvdXIgYnVpbGQgY29uZmlnIHRvIGVuc3VyZSB0aGF0IGRlcGVuZGVuY2llcyBhcmUgY29tcGlsZWQsIHJhdGhlciB0aGFuIGltcG9ydGVkIGFzIHByZS1jb21waWxlZCBtb2R1bGVzYCk7XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiBkZWJ1ZyhmaWxlLCBsaW5lLCBjb2x1bW4sIHZhbHVlcykge1xuICAgIGNvbnNvbGUubG9nKGB7QGRlYnVnfSAke2ZpbGUgPyBmaWxlICsgJyAnIDogJyd9KCR7bGluZX06JHtjb2x1bW59KWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyh2YWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICByZXR1cm4gJyc7XG59XG5sZXQgb25fZGVzdHJveTtcbmZ1bmN0aW9uIGNyZWF0ZV9zc3JfY29tcG9uZW50KGZuKSB7XG4gICAgZnVuY3Rpb24gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBleHBvcnRzLmN1cnJlbnRfY29tcG9uZW50O1xuICAgICAgICBjb25zdCAkJCA9IHtcbiAgICAgICAgICAgIG9uX2Rlc3Ryb3ksXG4gICAgICAgICAgICBjb250ZXh0OiBuZXcgTWFwKHBhcmVudF9jb21wb25lbnQgPyBwYXJlbnRfY29tcG9uZW50LiQkLmNvbnRleHQgOiBbXSksXG4gICAgICAgICAgICAvLyB0aGVzZSB3aWxsIGJlIGltbWVkaWF0ZWx5IGRpc2NhcmRlZFxuICAgICAgICAgICAgb25fbW91bnQ6IFtdLFxuICAgICAgICAgICAgYmVmb3JlX3VwZGF0ZTogW10sXG4gICAgICAgICAgICBhZnRlcl91cGRhdGU6IFtdLFxuICAgICAgICAgICAgY2FsbGJhY2tzOiBibGFua19vYmplY3QoKVxuICAgICAgICB9O1xuICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoeyAkJCB9KTtcbiAgICAgICAgY29uc3QgaHRtbCA9IGZuKHJlc3VsdCwgcHJvcHMsIGJpbmRpbmdzLCBzbG90cyk7XG4gICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChwYXJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJlbmRlcjogKHByb3BzID0ge30sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICAgICAgb25fZGVzdHJveSA9IFtdO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geyB0aXRsZTogJycsIGhlYWQ6ICcnLCBjc3M6IG5ldyBTZXQoKSB9O1xuICAgICAgICAgICAgY29uc3QgaHRtbCA9ICQkcmVuZGVyKHJlc3VsdCwgcHJvcHMsIHt9LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJ1bl9hbGwob25fZGVzdHJveSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGh0bWwsXG4gICAgICAgICAgICAgICAgY3NzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IEFycmF5LmZyb20ocmVzdWx0LmNzcykubWFwKGNzcyA9PiBjc3MuY29kZSkuam9pbignXFxuJyksXG4gICAgICAgICAgICAgICAgICAgIG1hcDogbnVsbCAvLyBUT0RPXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoZWFkOiByZXN1bHQudGl0bGUgKyByZXN1bHQuaGVhZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgJCRyZW5kZXJcbiAgICB9O1xufVxuZnVuY3Rpb24gYWRkX2F0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgYm9vbGVhbikge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IChib29sZWFuICYmICF2YWx1ZSkpXG4gICAgICAgIHJldHVybiAnJztcbiAgICByZXR1cm4gYCAke25hbWV9JHt2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogYD0ke3R5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBKU09OLnN0cmluZ2lmeShlc2NhcGUodmFsdWUpKSA6IGBcIiR7dmFsdWV9XCJgfWB9YDtcbn1cbmZ1bmN0aW9uIGFkZF9jbGFzc2VzKGNsYXNzZXMpIHtcbiAgICByZXR1cm4gY2xhc3NlcyA/IGAgY2xhc3M9XCIke2NsYXNzZXN9XCJgIDogYGA7XG59XG5cbmZ1bmN0aW9uIGJpbmQoY29tcG9uZW50LCBuYW1lLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGluZGV4ID0gY29tcG9uZW50LiQkLnByb3BzW25hbWVdO1xuICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbXBvbmVudC4kJC5ib3VuZFtpbmRleF0gPSBjYWxsYmFjaztcbiAgICAgICAgY2FsbGJhY2soY29tcG9uZW50LiQkLmN0eFtpbmRleF0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZV9jb21wb25lbnQoYmxvY2spIHtcbiAgICBibG9jayAmJiBibG9jay5jKCk7XG59XG5mdW5jdGlvbiBjbGFpbV9jb21wb25lbnQoYmxvY2ssIHBhcmVudF9ub2Rlcykge1xuICAgIGJsb2NrICYmIGJsb2NrLmwocGFyZW50X25vZGVzKTtcbn1cbmZ1bmN0aW9uIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIHRhcmdldCwgYW5jaG9yKSB7XG4gICAgY29uc3QgeyBmcmFnbWVudCwgb25fbW91bnQsIG9uX2Rlc3Ryb3ksIGFmdGVyX3VwZGF0ZSB9ID0gY29tcG9uZW50LiQkO1xuICAgIGZyYWdtZW50ICYmIGZyYWdtZW50Lm0odGFyZ2V0LCBhbmNob3IpO1xuICAgIC8vIG9uTW91bnQgaGFwcGVucyBiZWZvcmUgdGhlIGluaXRpYWwgYWZ0ZXJVcGRhdGVcbiAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgY29uc3QgbmV3X29uX2Rlc3Ryb3kgPSBvbl9tb3VudC5tYXAocnVuKS5maWx0ZXIoaXNfZnVuY3Rpb24pO1xuICAgICAgICBpZiAob25fZGVzdHJveSkge1xuICAgICAgICAgICAgb25fZGVzdHJveS5wdXNoKC4uLm5ld19vbl9kZXN0cm95KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEVkZ2UgY2FzZSAtIGNvbXBvbmVudCB3YXMgZGVzdHJveWVkIGltbWVkaWF0ZWx5LFxuICAgICAgICAgICAgLy8gbW9zdCBsaWtlbHkgYXMgYSByZXN1bHQgb2YgYSBiaW5kaW5nIGluaXRpYWxpc2luZ1xuICAgICAgICAgICAgcnVuX2FsbChuZXdfb25fZGVzdHJveSk7XG4gICAgICAgIH1cbiAgICAgICAgY29tcG9uZW50LiQkLm9uX21vdW50ID0gW107XG4gICAgfSk7XG4gICAgYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG59XG5mdW5jdGlvbiBkZXN0cm95X2NvbXBvbmVudChjb21wb25lbnQsIGRldGFjaGluZykge1xuICAgIGNvbnN0ICQkID0gY29tcG9uZW50LiQkO1xuICAgIGlmICgkJC5mcmFnbWVudCAhPT0gbnVsbCkge1xuICAgICAgICBydW5fYWxsKCQkLm9uX2Rlc3Ryb3kpO1xuICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5kKGRldGFjaGluZyk7XG4gICAgICAgIC8vIFRPRE8gbnVsbCBvdXQgb3RoZXIgcmVmcywgaW5jbHVkaW5nIGNvbXBvbmVudC4kJCAoYnV0IG5lZWQgdG9cbiAgICAgICAgLy8gcHJlc2VydmUgZmluYWwgc3RhdGU/KVxuICAgICAgICAkJC5vbl9kZXN0cm95ID0gJCQuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgICAkJC5jdHggPSBbXTtcbiAgICB9XG59XG5mdW5jdGlvbiBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSkge1xuICAgIGlmIChjb21wb25lbnQuJCQuZGlydHlbMF0gPT09IC0xKSB7XG4gICAgICAgIGRpcnR5X2NvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgICAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICAgICAgY29tcG9uZW50LiQkLmRpcnR5LmZpbGwoMCk7XG4gICAgfVxuICAgIGNvbXBvbmVudC4kJC5kaXJ0eVsoaSAvIDMxKSB8IDBdIHw9ICgxIDw8IChpICUgMzEpKTtcbn1cbmZ1bmN0aW9uIGluaXQoY29tcG9uZW50LCBvcHRpb25zLCBpbnN0YW5jZSwgY3JlYXRlX2ZyYWdtZW50LCBub3RfZXF1YWwsIHByb3BzLCBkaXJ0eSA9IFstMV0pIHtcbiAgICBjb25zdCBwYXJlbnRfY29tcG9uZW50ID0gZXhwb3J0cy5jdXJyZW50X2NvbXBvbmVudDtcbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KTtcbiAgICBjb25zdCBwcm9wX3ZhbHVlcyA9IG9wdGlvbnMucHJvcHMgfHwge307XG4gICAgY29uc3QgJCQgPSBjb21wb25lbnQuJCQgPSB7XG4gICAgICAgIGZyYWdtZW50OiBudWxsLFxuICAgICAgICBjdHg6IG51bGwsXG4gICAgICAgIC8vIHN0YXRlXG4gICAgICAgIHByb3BzLFxuICAgICAgICB1cGRhdGU6IG5vb3AsXG4gICAgICAgIG5vdF9lcXVhbCxcbiAgICAgICAgYm91bmQ6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICAvLyBsaWZlY3ljbGVcbiAgICAgICAgb25fbW91bnQ6IFtdLFxuICAgICAgICBvbl9kZXN0cm95OiBbXSxcbiAgICAgICAgYmVmb3JlX3VwZGF0ZTogW10sXG4gICAgICAgIGFmdGVyX3VwZGF0ZTogW10sXG4gICAgICAgIGNvbnRleHQ6IG5ldyBNYXAocGFyZW50X2NvbXBvbmVudCA/IHBhcmVudF9jb21wb25lbnQuJCQuY29udGV4dCA6IFtdKSxcbiAgICAgICAgLy8gZXZlcnl0aGluZyBlbHNlXG4gICAgICAgIGNhbGxiYWNrczogYmxhbmtfb2JqZWN0KCksXG4gICAgICAgIGRpcnR5LFxuICAgICAgICBza2lwX2JvdW5kOiBmYWxzZVxuICAgIH07XG4gICAgbGV0IHJlYWR5ID0gZmFsc2U7XG4gICAgJCQuY3R4ID0gaW5zdGFuY2VcbiAgICAgICAgPyBpbnN0YW5jZShjb21wb25lbnQsIHByb3BfdmFsdWVzLCAoaSwgcmV0LCAuLi5yZXN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJlc3QubGVuZ3RoID8gcmVzdFswXSA6IHJldDtcbiAgICAgICAgICAgIGlmICgkJC5jdHggJiYgbm90X2VxdWFsKCQkLmN0eFtpXSwgJCQuY3R4W2ldID0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEkJC5za2lwX2JvdW5kICYmICQkLmJvdW5kW2ldKVxuICAgICAgICAgICAgICAgICAgICAkJC5ib3VuZFtpXSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlYWR5KVxuICAgICAgICAgICAgICAgICAgICBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9KVxuICAgICAgICA6IFtdO1xuICAgICQkLnVwZGF0ZSgpO1xuICAgIHJlYWR5ID0gdHJ1ZTtcbiAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgIC8vIGBmYWxzZWAgYXMgYSBzcGVjaWFsIGNhc2Ugb2Ygbm8gRE9NIGNvbXBvbmVudFxuICAgICQkLmZyYWdtZW50ID0gY3JlYXRlX2ZyYWdtZW50ID8gY3JlYXRlX2ZyYWdtZW50KCQkLmN0eCkgOiBmYWxzZTtcbiAgICBpZiAob3B0aW9ucy50YXJnZXQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaHlkcmF0ZSkge1xuICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSBjaGlsZHJlbihvcHRpb25zLnRhcmdldCk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQubChub2Rlcyk7XG4gICAgICAgICAgICBub2Rlcy5mb3JFYWNoKGRldGFjaCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQuYygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmludHJvKVxuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihjb21wb25lbnQuJCQuZnJhZ21lbnQpO1xuICAgICAgICBtb3VudF9jb21wb25lbnQoY29tcG9uZW50LCBvcHRpb25zLnRhcmdldCwgb3B0aW9ucy5hbmNob3IpO1xuICAgICAgICBmbHVzaCgpO1xuICAgIH1cbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG59XG5pZiAodHlwZW9mIEhUTUxFbGVtZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXhwb3J0cy5TdmVsdGVFbGVtZW50ID0gY2xhc3MgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuJCQuc2xvdHRlZCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLiQkLnNsb3R0ZWRba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHIsIF9vbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXNbYXR0cl0gPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICAgICAgdGhpcy4kZGVzdHJveSA9IG5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBUT0RPIHNob3VsZCB0aGlzIGRlbGVnYXRlIHRvIGFkZEV2ZW50TGlzdGVuZXI/XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja3MgPSAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gfHwgKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdID0gW10pKTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgICRzZXQoJCRwcm9wcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuJCRzZXQgJiYgIWlzX2VtcHR5KCQkcHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkc2V0KCQkcHJvcHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICB9XG4gICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgICRzZXQoJCRwcm9wcykge1xuICAgICAgICBpZiAodGhpcy4kJHNldCAmJiAhaXNfZW1wdHkoJCRwcm9wcykpIHtcbiAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiQkc2V0KCQkcHJvcHMpO1xuICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoX2Rldih0eXBlLCBkZXRhaWwpIHtcbiAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudCh0eXBlLCBPYmplY3QuYXNzaWduKHsgdmVyc2lvbjogJzMuMjQuMScgfSwgZGV0YWlsKSkpO1xufVxuZnVuY3Rpb24gYXBwZW5kX2Rldih0YXJnZXQsIG5vZGUpIHtcbiAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01JbnNlcnRcIiwgeyB0YXJnZXQsIG5vZGUgfSk7XG4gICAgYXBwZW5kKHRhcmdldCwgbm9kZSk7XG59XG5mdW5jdGlvbiBpbnNlcnRfZGV2KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NSW5zZXJ0XCIsIHsgdGFyZ2V0LCBub2RlLCBhbmNob3IgfSk7XG4gICAgaW5zZXJ0KHRhcmdldCwgbm9kZSwgYW5jaG9yKTtcbn1cbmZ1bmN0aW9uIGRldGFjaF9kZXYobm9kZSkge1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVJlbW92ZVwiLCB7IG5vZGUgfSk7XG4gICAgZGV0YWNoKG5vZGUpO1xufVxuZnVuY3Rpb24gZGV0YWNoX2JldHdlZW5fZGV2KGJlZm9yZSwgYWZ0ZXIpIHtcbiAgICB3aGlsZSAoYmVmb3JlLm5leHRTaWJsaW5nICYmIGJlZm9yZS5uZXh0U2libGluZyAhPT0gYWZ0ZXIpIHtcbiAgICAgICAgZGV0YWNoX2RldihiZWZvcmUubmV4dFNpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGFjaF9iZWZvcmVfZGV2KGFmdGVyKSB7XG4gICAgd2hpbGUgKGFmdGVyLnByZXZpb3VzU2libGluZykge1xuICAgICAgICBkZXRhY2hfZGV2KGFmdGVyLnByZXZpb3VzU2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoX2FmdGVyX2RldihiZWZvcmUpIHtcbiAgICB3aGlsZSAoYmVmb3JlLm5leHRTaWJsaW5nKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYmVmb3JlLm5leHRTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBsaXN0ZW5fZGV2KG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zLCBoYXNfcHJldmVudF9kZWZhdWx0LCBoYXNfc3RvcF9wcm9wYWdhdGlvbikge1xuICAgIGNvbnN0IG1vZGlmaWVycyA9IG9wdGlvbnMgPT09IHRydWUgPyBbXCJjYXB0dXJlXCJdIDogb3B0aW9ucyA/IEFycmF5LmZyb20oT2JqZWN0LmtleXMob3B0aW9ucykpIDogW107XG4gICAgaWYgKGhhc19wcmV2ZW50X2RlZmF1bHQpXG4gICAgICAgIG1vZGlmaWVycy5wdXNoKCdwcmV2ZW50RGVmYXVsdCcpO1xuICAgIGlmIChoYXNfc3RvcF9wcm9wYWdhdGlvbilcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3N0b3BQcm9wYWdhdGlvbicpO1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTUFkZEV2ZW50TGlzdGVuZXJcIiwgeyBub2RlLCBldmVudCwgaGFuZGxlciwgbW9kaWZpZXJzIH0pO1xuICAgIGNvbnN0IGRpc3Bvc2UgPSBsaXN0ZW4obm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVJlbW92ZUV2ZW50TGlzdGVuZXJcIiwgeyBub2RlLCBldmVudCwgaGFuZGxlciwgbW9kaWZpZXJzIH0pO1xuICAgICAgICBkaXNwb3NlKCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGF0dHJfZGV2KG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBhdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKVxuICAgICAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01SZW1vdmVBdHRyaWJ1dGVcIiwgeyBub2RlLCBhdHRyaWJ1dGUgfSk7XG4gICAgZWxzZVxuICAgICAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01TZXRBdHRyaWJ1dGVcIiwgeyBub2RlLCBhdHRyaWJ1dGUsIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gcHJvcF9kZXYobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgbm9kZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01TZXRQcm9wZXJ0eVwiLCB7IG5vZGUsIHByb3BlcnR5LCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIGRhdGFzZXRfZGV2KG5vZGUsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIG5vZGUuZGF0YXNldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01TZXREYXRhc2V0XCIsIHsgbm9kZSwgcHJvcGVydHksIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gc2V0X2RhdGFfZGV2KHRleHQsIGRhdGEpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICAgIGlmICh0ZXh0Lndob2xlVGV4dCA9PT0gZGF0YSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVNldERhdGFcIiwgeyBub2RlOiB0ZXh0LCBkYXRhIH0pO1xuICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9lYWNoX2FyZ3VtZW50KGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnc3RyaW5nJyAmJiAhKGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBhcmcpKSB7XG4gICAgICAgIGxldCBtc2cgPSAneyNlYWNofSBvbmx5IGl0ZXJhdGVzIG92ZXIgYXJyYXktbGlrZSBvYmplY3RzLic7XG4gICAgICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIGFyZyAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gYXJnKSB7XG4gICAgICAgICAgICBtc2cgKz0gJyBZb3UgY2FuIHVzZSBhIHNwcmVhZCB0byBjb252ZXJ0IHRoaXMgaXRlcmFibGUgaW50byBhbiBhcnJheS4nO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3Nsb3RzKG5hbWUsIHNsb3QsIGtleXMpIHtcbiAgICBmb3IgKGNvbnN0IHNsb3Rfa2V5IG9mIE9iamVjdC5rZXlzKHNsb3QpKSB7XG4gICAgICAgIGlmICghfmtleXMuaW5kZXhPZihzbG90X2tleSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgPCR7bmFtZX0+IHJlY2VpdmVkIGFuIHVuZXhwZWN0ZWQgc2xvdCBcIiR7c2xvdF9rZXl9XCIuYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5jbGFzcyBTdmVsdGVDb21wb25lbnREZXYgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICghb3B0aW9ucy50YXJnZXQgJiYgIW9wdGlvbnMuJCRpbmxpbmUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCd0YXJnZXQnIGlzIGEgcmVxdWlyZWQgb3B0aW9uYCk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLiRkZXN0cm95KCk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYENvbXBvbmVudCB3YXMgYWxyZWFkeSBkZXN0cm95ZWRgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIH07XG4gICAgfVxuICAgICRjYXB0dXJlX3N0YXRlKCkgeyB9XG4gICAgJGluamVjdF9zdGF0ZSgpIHsgfVxufVxuZnVuY3Rpb24gbG9vcF9ndWFyZCh0aW1lb3V0KSB7XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gc3RhcnQgPiB0aW1lb3V0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluZmluaXRlIGxvb3AgZGV0ZWN0ZWRgKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydHMuSHRtbFRhZyA9IEh0bWxUYWc7XG5leHBvcnRzLlN2ZWx0ZUNvbXBvbmVudCA9IFN2ZWx0ZUNvbXBvbmVudDtcbmV4cG9ydHMuU3ZlbHRlQ29tcG9uZW50RGV2ID0gU3ZlbHRlQ29tcG9uZW50RGV2O1xuZXhwb3J0cy5hY3Rpb25fZGVzdHJveWVyID0gYWN0aW9uX2Rlc3Ryb3llcjtcbmV4cG9ydHMuYWRkX2F0dHJpYnV0ZSA9IGFkZF9hdHRyaWJ1dGU7XG5leHBvcnRzLmFkZF9jbGFzc2VzID0gYWRkX2NsYXNzZXM7XG5leHBvcnRzLmFkZF9mbHVzaF9jYWxsYmFjayA9IGFkZF9mbHVzaF9jYWxsYmFjaztcbmV4cG9ydHMuYWRkX2xvY2F0aW9uID0gYWRkX2xvY2F0aW9uO1xuZXhwb3J0cy5hZGRfcmVuZGVyX2NhbGxiYWNrID0gYWRkX3JlbmRlcl9jYWxsYmFjaztcbmV4cG9ydHMuYWRkX3Jlc2l6ZV9saXN0ZW5lciA9IGFkZF9yZXNpemVfbGlzdGVuZXI7XG5leHBvcnRzLmFkZF90cmFuc2Zvcm0gPSBhZGRfdHJhbnNmb3JtO1xuZXhwb3J0cy5hZnRlclVwZGF0ZSA9IGFmdGVyVXBkYXRlO1xuZXhwb3J0cy5hcHBlbmQgPSBhcHBlbmQ7XG5leHBvcnRzLmFwcGVuZF9kZXYgPSBhcHBlbmRfZGV2O1xuZXhwb3J0cy5hc3NpZ24gPSBhc3NpZ247XG5leHBvcnRzLmF0dHIgPSBhdHRyO1xuZXhwb3J0cy5hdHRyX2RldiA9IGF0dHJfZGV2O1xuZXhwb3J0cy5iZWZvcmVVcGRhdGUgPSBiZWZvcmVVcGRhdGU7XG5leHBvcnRzLmJpbmQgPSBiaW5kO1xuZXhwb3J0cy5iaW5kaW5nX2NhbGxiYWNrcyA9IGJpbmRpbmdfY2FsbGJhY2tzO1xuZXhwb3J0cy5ibGFua19vYmplY3QgPSBibGFua19vYmplY3Q7XG5leHBvcnRzLmJ1YmJsZSA9IGJ1YmJsZTtcbmV4cG9ydHMuY2hlY2tfb3V0cm9zID0gY2hlY2tfb3V0cm9zO1xuZXhwb3J0cy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuZXhwb3J0cy5jbGFpbV9jb21wb25lbnQgPSBjbGFpbV9jb21wb25lbnQ7XG5leHBvcnRzLmNsYWltX2VsZW1lbnQgPSBjbGFpbV9lbGVtZW50O1xuZXhwb3J0cy5jbGFpbV9zcGFjZSA9IGNsYWltX3NwYWNlO1xuZXhwb3J0cy5jbGFpbV90ZXh0ID0gY2xhaW1fdGV4dDtcbmV4cG9ydHMuY2xlYXJfbG9vcHMgPSBjbGVhcl9sb29wcztcbmV4cG9ydHMuY29tcG9uZW50X3N1YnNjcmliZSA9IGNvbXBvbmVudF9zdWJzY3JpYmU7XG5leHBvcnRzLmNvbXB1dGVfcmVzdF9wcm9wcyA9IGNvbXB1dGVfcmVzdF9wcm9wcztcbmV4cG9ydHMuY3JlYXRlRXZlbnREaXNwYXRjaGVyID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyO1xuZXhwb3J0cy5jcmVhdGVfYW5pbWF0aW9uID0gY3JlYXRlX2FuaW1hdGlvbjtcbmV4cG9ydHMuY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbiA9IGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb247XG5leHBvcnRzLmNyZWF0ZV9jb21wb25lbnQgPSBjcmVhdGVfY29tcG9uZW50O1xuZXhwb3J0cy5jcmVhdGVfaW5fdHJhbnNpdGlvbiA9IGNyZWF0ZV9pbl90cmFuc2l0aW9uO1xuZXhwb3J0cy5jcmVhdGVfb3V0X3RyYW5zaXRpb24gPSBjcmVhdGVfb3V0X3RyYW5zaXRpb247XG5leHBvcnRzLmNyZWF0ZV9zbG90ID0gY3JlYXRlX3Nsb3Q7XG5leHBvcnRzLmNyZWF0ZV9zc3JfY29tcG9uZW50ID0gY3JlYXRlX3Nzcl9jb21wb25lbnQ7XG5leHBvcnRzLmN1c3RvbV9ldmVudCA9IGN1c3RvbV9ldmVudDtcbmV4cG9ydHMuZGF0YXNldF9kZXYgPSBkYXRhc2V0X2RldjtcbmV4cG9ydHMuZGVidWcgPSBkZWJ1ZztcbmV4cG9ydHMuZGVzdHJveV9ibG9jayA9IGRlc3Ryb3lfYmxvY2s7XG5leHBvcnRzLmRlc3Ryb3lfY29tcG9uZW50ID0gZGVzdHJveV9jb21wb25lbnQ7XG5leHBvcnRzLmRlc3Ryb3lfZWFjaCA9IGRlc3Ryb3lfZWFjaDtcbmV4cG9ydHMuZGV0YWNoID0gZGV0YWNoO1xuZXhwb3J0cy5kZXRhY2hfYWZ0ZXJfZGV2ID0gZGV0YWNoX2FmdGVyX2RldjtcbmV4cG9ydHMuZGV0YWNoX2JlZm9yZV9kZXYgPSBkZXRhY2hfYmVmb3JlX2RldjtcbmV4cG9ydHMuZGV0YWNoX2JldHdlZW5fZGV2ID0gZGV0YWNoX2JldHdlZW5fZGV2O1xuZXhwb3J0cy5kZXRhY2hfZGV2ID0gZGV0YWNoX2RldjtcbmV4cG9ydHMuZGlydHlfY29tcG9uZW50cyA9IGRpcnR5X2NvbXBvbmVudHM7XG5leHBvcnRzLmRpc3BhdGNoX2RldiA9IGRpc3BhdGNoX2RldjtcbmV4cG9ydHMuZWFjaCA9IGVhY2g7XG5leHBvcnRzLmVsZW1lbnQgPSBlbGVtZW50O1xuZXhwb3J0cy5lbGVtZW50X2lzID0gZWxlbWVudF9pcztcbmV4cG9ydHMuZW1wdHkgPSBlbXB0eTtcbmV4cG9ydHMuZXNjYXBlID0gZXNjYXBlO1xuZXhwb3J0cy5lc2NhcGVkID0gZXNjYXBlZDtcbmV4cG9ydHMuZXhjbHVkZV9pbnRlcm5hbF9wcm9wcyA9IGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHM7XG5leHBvcnRzLmZpeF9hbmRfZGVzdHJveV9ibG9jayA9IGZpeF9hbmRfZGVzdHJveV9ibG9jaztcbmV4cG9ydHMuZml4X2FuZF9vdXRyb19hbmRfZGVzdHJveV9ibG9jayA9IGZpeF9hbmRfb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2s7XG5leHBvcnRzLmZpeF9wb3NpdGlvbiA9IGZpeF9wb3NpdGlvbjtcbmV4cG9ydHMuZmx1c2ggPSBmbHVzaDtcbmV4cG9ydHMuZ2V0Q29udGV4dCA9IGdldENvbnRleHQ7XG5leHBvcnRzLmdldF9iaW5kaW5nX2dyb3VwX3ZhbHVlID0gZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWU7XG5leHBvcnRzLmdldF9jdXJyZW50X2NvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudDtcbmV4cG9ydHMuZ2V0X3Nsb3RfY2hhbmdlcyA9IGdldF9zbG90X2NoYW5nZXM7XG5leHBvcnRzLmdldF9zbG90X2NvbnRleHQgPSBnZXRfc2xvdF9jb250ZXh0O1xuZXhwb3J0cy5nZXRfc3ByZWFkX29iamVjdCA9IGdldF9zcHJlYWRfb2JqZWN0O1xuZXhwb3J0cy5nZXRfc3ByZWFkX3VwZGF0ZSA9IGdldF9zcHJlYWRfdXBkYXRlO1xuZXhwb3J0cy5nZXRfc3RvcmVfdmFsdWUgPSBnZXRfc3RvcmVfdmFsdWU7XG5leHBvcnRzLmdsb2JhbHMgPSBnbG9iYWxzO1xuZXhwb3J0cy5ncm91cF9vdXRyb3MgPSBncm91cF9vdXRyb3M7XG5leHBvcnRzLmhhbmRsZV9wcm9taXNlID0gaGFuZGxlX3Byb21pc2U7XG5leHBvcnRzLmhhc19wcm9wID0gaGFzX3Byb3A7XG5leHBvcnRzLmlkZW50aXR5ID0gaWRlbnRpdHk7XG5leHBvcnRzLmluaXQgPSBpbml0O1xuZXhwb3J0cy5pbnNlcnQgPSBpbnNlcnQ7XG5leHBvcnRzLmluc2VydF9kZXYgPSBpbnNlcnRfZGV2O1xuZXhwb3J0cy5pbnRyb3MgPSBpbnRyb3M7XG5leHBvcnRzLmludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyID0gaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXI7XG5leHBvcnRzLmlzX2NsaWVudCA9IGlzX2NsaWVudDtcbmV4cG9ydHMuaXNfY3Jvc3NvcmlnaW4gPSBpc19jcm9zc29yaWdpbjtcbmV4cG9ydHMuaXNfZW1wdHkgPSBpc19lbXB0eTtcbmV4cG9ydHMuaXNfZnVuY3Rpb24gPSBpc19mdW5jdGlvbjtcbmV4cG9ydHMuaXNfcHJvbWlzZSA9IGlzX3Byb21pc2U7XG5leHBvcnRzLmxpc3RlbiA9IGxpc3RlbjtcbmV4cG9ydHMubGlzdGVuX2RldiA9IGxpc3Rlbl9kZXY7XG5leHBvcnRzLmxvb3AgPSBsb29wO1xuZXhwb3J0cy5sb29wX2d1YXJkID0gbG9vcF9ndWFyZDtcbmV4cG9ydHMubWlzc2luZ19jb21wb25lbnQgPSBtaXNzaW5nX2NvbXBvbmVudDtcbmV4cG9ydHMubW91bnRfY29tcG9uZW50ID0gbW91bnRfY29tcG9uZW50O1xuZXhwb3J0cy5ub29wID0gbm9vcDtcbmV4cG9ydHMubm90X2VxdWFsID0gbm90X2VxdWFsO1xuZXhwb3J0cy5udWxsX3RvX2VtcHR5ID0gbnVsbF90b19lbXB0eTtcbmV4cG9ydHMub2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcyA9IG9iamVjdF93aXRob3V0X3Byb3BlcnRpZXM7XG5leHBvcnRzLm9uRGVzdHJveSA9IG9uRGVzdHJveTtcbmV4cG9ydHMub25Nb3VudCA9IG9uTW91bnQ7XG5leHBvcnRzLm9uY2UgPSBvbmNlO1xuZXhwb3J0cy5vdXRyb19hbmRfZGVzdHJveV9ibG9jayA9IG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrO1xuZXhwb3J0cy5wcmV2ZW50X2RlZmF1bHQgPSBwcmV2ZW50X2RlZmF1bHQ7XG5leHBvcnRzLnByb3BfZGV2ID0gcHJvcF9kZXY7XG5leHBvcnRzLnF1ZXJ5X3NlbGVjdG9yX2FsbCA9IHF1ZXJ5X3NlbGVjdG9yX2FsbDtcbmV4cG9ydHMucnVuID0gcnVuO1xuZXhwb3J0cy5ydW5fYWxsID0gcnVuX2FsbDtcbmV4cG9ydHMuc2FmZV9ub3RfZXF1YWwgPSBzYWZlX25vdF9lcXVhbDtcbmV4cG9ydHMuc2NoZWR1bGVfdXBkYXRlID0gc2NoZWR1bGVfdXBkYXRlO1xuZXhwb3J0cy5zZWxlY3RfbXVsdGlwbGVfdmFsdWUgPSBzZWxlY3RfbXVsdGlwbGVfdmFsdWU7XG5leHBvcnRzLnNlbGVjdF9vcHRpb24gPSBzZWxlY3Rfb3B0aW9uO1xuZXhwb3J0cy5zZWxlY3Rfb3B0aW9ucyA9IHNlbGVjdF9vcHRpb25zO1xuZXhwb3J0cy5zZWxlY3RfdmFsdWUgPSBzZWxlY3RfdmFsdWU7XG5leHBvcnRzLnNlbGYgPSBzZWxmO1xuZXhwb3J0cy5zZXRDb250ZXh0ID0gc2V0Q29udGV4dDtcbmV4cG9ydHMuc2V0X2F0dHJpYnV0ZXMgPSBzZXRfYXR0cmlidXRlcztcbmV4cG9ydHMuc2V0X2N1cnJlbnRfY29tcG9uZW50ID0gc2V0X2N1cnJlbnRfY29tcG9uZW50O1xuZXhwb3J0cy5zZXRfY3VzdG9tX2VsZW1lbnRfZGF0YSA9IHNldF9jdXN0b21fZWxlbWVudF9kYXRhO1xuZXhwb3J0cy5zZXRfZGF0YSA9IHNldF9kYXRhO1xuZXhwb3J0cy5zZXRfZGF0YV9kZXYgPSBzZXRfZGF0YV9kZXY7XG5leHBvcnRzLnNldF9pbnB1dF90eXBlID0gc2V0X2lucHV0X3R5cGU7XG5leHBvcnRzLnNldF9pbnB1dF92YWx1ZSA9IHNldF9pbnB1dF92YWx1ZTtcbmV4cG9ydHMuc2V0X25vdyA9IHNldF9ub3c7XG5leHBvcnRzLnNldF9yYWYgPSBzZXRfcmFmO1xuZXhwb3J0cy5zZXRfc3RvcmVfdmFsdWUgPSBzZXRfc3RvcmVfdmFsdWU7XG5leHBvcnRzLnNldF9zdHlsZSA9IHNldF9zdHlsZTtcbmV4cG9ydHMuc2V0X3N2Z19hdHRyaWJ1dGVzID0gc2V0X3N2Z19hdHRyaWJ1dGVzO1xuZXhwb3J0cy5zcGFjZSA9IHNwYWNlO1xuZXhwb3J0cy5zcHJlYWQgPSBzcHJlYWQ7XG5leHBvcnRzLnN0b3BfcHJvcGFnYXRpb24gPSBzdG9wX3Byb3BhZ2F0aW9uO1xuZXhwb3J0cy5zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG5leHBvcnRzLnN2Z19lbGVtZW50ID0gc3ZnX2VsZW1lbnQ7XG5leHBvcnRzLnRleHQgPSB0ZXh0O1xuZXhwb3J0cy50aWNrID0gdGljaztcbmV4cG9ydHMudGltZV9yYW5nZXNfdG9fYXJyYXkgPSB0aW1lX3Jhbmdlc190b19hcnJheTtcbmV4cG9ydHMudG9fbnVtYmVyID0gdG9fbnVtYmVyO1xuZXhwb3J0cy50b2dnbGVfY2xhc3MgPSB0b2dnbGVfY2xhc3M7XG5leHBvcnRzLnRyYW5zaXRpb25faW4gPSB0cmFuc2l0aW9uX2luO1xuZXhwb3J0cy50cmFuc2l0aW9uX291dCA9IHRyYW5zaXRpb25fb3V0O1xuZXhwb3J0cy51cGRhdGVfa2V5ZWRfZWFjaCA9IHVwZGF0ZV9rZXllZF9lYWNoO1xuZXhwb3J0cy51cGRhdGVfc2xvdCA9IHVwZGF0ZV9zbG90O1xuZXhwb3J0cy52YWxpZGF0ZV9jb21wb25lbnQgPSB2YWxpZGF0ZV9jb21wb25lbnQ7XG5leHBvcnRzLnZhbGlkYXRlX2VhY2hfYXJndW1lbnQgPSB2YWxpZGF0ZV9lYWNoX2FyZ3VtZW50O1xuZXhwb3J0cy52YWxpZGF0ZV9lYWNoX2tleXMgPSB2YWxpZGF0ZV9lYWNoX2tleXM7XG5leHBvcnRzLnZhbGlkYXRlX3Nsb3RzID0gdmFsaWRhdGVfc2xvdHM7XG5leHBvcnRzLnZhbGlkYXRlX3N0b3JlID0gdmFsaWRhdGVfc3RvcmU7XG5leHBvcnRzLnhsaW5rX2F0dHIgPSB4bGlua19hdHRyO1xuIiwidmFyIF8kc3ZlbHRlXzEgPSB7fTtcblwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShfJHN2ZWx0ZV8xLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pOy8qIHJlbW92ZWQ6IHZhciBfJGludGVybmFsXzI9cmVxdWlyZShcIi4vaW50ZXJuYWxcIik7ICovO09iamVjdC5kZWZpbmVQcm9wZXJ0eShfJHN2ZWx0ZV8xLFwiU3ZlbHRlQ29tcG9uZW50XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIF8kaW50ZXJuYWxfMi5TdmVsdGVDb21wb25lbnREZXZ9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KF8kc3ZlbHRlXzEsXCJhZnRlclVwZGF0ZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfJGludGVybmFsXzIuYWZ0ZXJVcGRhdGV9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KF8kc3ZlbHRlXzEsXCJiZWZvcmVVcGRhdGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gXyRpbnRlcm5hbF8yLmJlZm9yZVVwZGF0ZX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoXyRzdmVsdGVfMSxcImNyZWF0ZUV2ZW50RGlzcGF0Y2hlclwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfJGludGVybmFsXzIuY3JlYXRlRXZlbnREaXNwYXRjaGVyfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfJHN2ZWx0ZV8xLFwiZ2V0Q29udGV4dFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfJGludGVybmFsXzIuZ2V0Q29udGV4dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoXyRzdmVsdGVfMSxcIm9uRGVzdHJveVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfJGludGVybmFsXzIub25EZXN0cm95fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfJHN2ZWx0ZV8xLFwib25Nb3VudFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBfJGludGVybmFsXzIub25Nb3VudH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoXyRzdmVsdGVfMSxcInNldENvbnRleHRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gXyRpbnRlcm5hbF8yLnNldENvbnRleHR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KF8kc3ZlbHRlXzEsXCJ0aWNrXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIF8kaW50ZXJuYWxfMi50aWNrfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiSWs5aWFtVmpkQ0lzSW1SbFptbHVaVkJ5YjNCbGNuUjVJaXdpWlhod2IzSjBjeUlzSW5aaGJIVmxJaXdpWlc1MWJXVnlZV0pzWlNJc0ltZGxkQ0lzSW1sdWRHVnlibUZzSWl3aVUzWmxiSFJsUTI5dGNHOXVaVzUwUkdWMklpd2lZV1owWlhKVmNHUmhkR1VpTENKaVpXWnZjbVZWY0dSaGRHVWlMQ0pqY21WaGRHVkZkbVZ1ZEVScGMzQmhkR05vWlhJaUxDSm5aWFJEYjI1MFpYaDBJaXdpYjI1RVpYTjBjbTk1SWl3aWIyNU5iM1Z1ZENJc0luTmxkRU52Ym5SbGVIUWlMQ0owYVdOcklsMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRXNXVUZCUVN4RFFVVkJRU3hOUVVGQlFTeERRVUZQUXl4alFVRkJRU3hEUVVGbFF5eFZRVUZCUVN4RFFVRlRMRmxCUVVFc1EwRkJZeXhEUVVGRlF5eExRVUZCUVN4RFFVRkJRU3hEUVVGUExFTkJRVUVzUTBGQlFTeERRVUZCTEVOQlJYUkVMSFZFUVVsQlNDeE5RVUZCUVN4RFFVRlBReXhqUVVGQlFTeERRVUZsUXl4VlFVRkJRU3hEUVVGVExHbENRVUZCTEVOQlFXMUNMRU5CUTJwRVJTeFZRVUZCUVN4RFFVRkJRU3hEUVVGWkxFTkJRVUVzUTBGRFdrTXNSMEZCUVVFc1EwRkJTeXhWUVVGQkxFTkJRMG9zVDBGQlQwTXNXVUZCUVVFc1EwRkJVME1zYTBKQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUjJ4Q1VDeE5RVUZCUVN4RFFVRlBReXhqUVVGQlFTeERRVUZsUXl4VlFVRkJRU3hEUVVGVExHRkJRVUVzUTBGQlpTeERRVU0zUTBVc1ZVRkJRVUVzUTBGQlFVRXNRMEZCV1N4RFFVRkJMRU5CUTFwRExFZEJRVUZCTEVOQlFVc3NWVUZCUVN4RFFVTktMRTlCUVU5RExGbEJRVUZCTEVOQlFWTkZMRmRCUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJSMnhDVWl4TlFVRkJRU3hEUVVGUFF5eGpRVUZCUVN4RFFVRmxReXhWUVVGQlFTeERRVUZUTEdOQlFVRXNRMEZCWjBJc1EwRkRPVU5GTEZWQlFVRkJMRU5CUVVGQkxFTkJRVmtzUTBGQlFTeERRVU5hUXl4SFFVRkJRU3hEUVVGTExGVkJRVUVzUTBGRFNpeFBRVUZQUXl4WlFVRkJRU3hEUVVGVFJ5eFpRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVZHNRbFFzVFVGQlFVRXNRMEZCVDBNc1kwRkJRVUVzUTBGQlpVTXNWVUZCUVVFc1EwRkJVeXgxUWtGQlFTeERRVUY1UWl4RFFVTjJSRVVzVlVGQlFVRXNRMEZCUVVFc1EwRkJXU3hEUVVGQkxFTkJRMXBETEVkQlFVRkJMRU5CUVVzc1ZVRkJRU3hEUVVOS0xFOUJRVTlETEZsQlFVRkJMRU5CUVZOSkxIRkNRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVZHNRbFlzVFVGQlFVRXNRMEZCVDBNc1kwRkJRVUVzUTBGQlpVTXNWVUZCUVVFc1EwRkJVeXhaUVVGQkxFTkJRV01zUTBGRE5VTkZMRlZCUVVGQkxFTkJRVUZCTEVOQlFWa3NRMEZCUVN4RFFVTmFReXhIUVVGQlFTeERRVUZMTEZWQlFVRXNRMEZEU2l4UFFVRlBReXhaUVVGQlFTeERRVUZUU3l4VlFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVkc1FsZ3NUVUZCUVVFc1EwRkJUME1zWTBGQlFVRXNRMEZCWlVNc1ZVRkJRVUVzUTBGQlV5eFhRVUZCTEVOQlFXRXNRMEZETTBORkxGVkJRVUZCTEVOQlFVRkJMRU5CUVZrc1EwRkJRU3hEUVVOYVF5eEhRVUZCUVN4RFFVRkxMRlZCUVVFc1EwRkRTaXhQUVVGUFF5eFpRVUZCUVN4RFFVRlRUU3hUUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVWRzUWxvc1RVRkJRVUVzUTBGQlQwTXNZMEZCUVVFc1EwRkJaVU1zVlVGQlFVRXNRMEZCVXl4VFFVRkJMRU5CUVZjc1EwRkRla05GTEZWQlFVRkJMRU5CUVVGQkxFTkJRVmtzUTBGQlFTeERRVU5hUXl4SFFVRkJRU3hEUVVGTExGVkJRVUVzUTBGRFNpeFBRVUZQUXl4WlFVRkJRU3hEUVVGVFR5eFBRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVZHNRbUlzVFVGQlFVRXNRMEZCVDBNc1kwRkJRVUVzUTBGQlpVTXNWVUZCUVVFc1EwRkJVeXhaUVVGQkxFTkJRV01zUTBGRE5VTkZMRlZCUVVGQkxFTkJRVUZCTEVOQlFWa3NRMEZCUVN4RFFVTmFReXhIUVVGQlFTeERRVUZMTEZWQlFVRXNRMEZEU2l4UFFVRlBReXhaUVVGQlFTeERRVUZUVVN4VlFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVkc1FtUXNUVUZCUVVFc1EwRkJUME1zWTBGQlFVRXNRMEZCWlVNc1ZVRkJRVUVzUTBGQlV5eE5RVUZCTEVOQlFWRXNRMEZEZEVORkxGVkJRVUZCTEVOQlFVRkJMRU5CUVZrc1EwRkJRU3hEUVVOYVF5eEhRVUZCUVN4RFFVRkxMRlZCUVVFc1EwRkRTaXhQUVVGUFF5eFpRVUZCUVN4RFFVRlRVeXhKUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYmJuVnNiRjE5IiwiXCJ1c2Ugc3RyaWN0XCI7Y29uc3R7U3ZlbHRlQ29tcG9uZW50OlN2ZWx0ZUNvbXBvbmVudCxhcHBlbmQ6YXBwZW5kLGF0dHI6YXR0cixiaW5kaW5nX2NhbGxiYWNrczpiaW5kaW5nX2NhbGxiYWNrcyxkZXN0cm95X2VhY2g6ZGVzdHJveV9lYWNoLGRldGFjaDpkZXRhY2gsZWxlbWVudDplbGVtZW50LGdsb2JhbHM6Z2xvYmFscyxpbml0OmluaXQsaW5zZXJ0Omluc2VydCxsaXN0ZW46bGlzdGVuLG5vb3A6bm9vcCxzYWZlX25vdF9lcXVhbDpzYWZlX25vdF9lcXVhbCxzZXRfZGF0YTpzZXRfZGF0YSxzZXRfaW5wdXRfdmFsdWU6c2V0X2lucHV0X3ZhbHVlLHNldF9zdHlsZTpzZXRfc3R5bGUsc3BhY2U6c3BhY2UsdGV4dDp0ZXh0LHRvZ2dsZV9jbGFzczp0b2dnbGVfY2xhc3N9PV8kaW50ZXJuYWxfMix7ZG9jdW1lbnQ6ZG9jdW1lbnRfMX09Z2xvYmFscyx7b25Nb3VudDpvbk1vdW50fT1fJHN2ZWx0ZV8xO2Z1bmN0aW9uIGdldF9lYWNoX2NvbnRleHQoY3R4LGxpc3QsaSl7Y29uc3QgY2hpbGRfY3R4PWN0eC5zbGljZSgpO3JldHVybiBjaGlsZF9jdHhbMTZdPWxpc3RbaV0sY2hpbGRfY3R4fWZ1bmN0aW9uIGdldF9lYWNoX2NvbnRleHRfMShjdHgsbGlzdCxpKXtjb25zdCBjaGlsZF9jdHg9Y3R4LnNsaWNlKCk7cmV0dXJuIGNoaWxkX2N0eFsxNl09bGlzdFtpXSxjaGlsZF9jdHh9ZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzcoY3R4KXtsZXQgc3VwLGksc3VwX3RpdGxlX3ZhbHVlLHQ7cmV0dXJue2MoKXtzdXA9ZWxlbWVudChcInN1cFwiKSxpPWVsZW1lbnQoXCJpXCIpLHQ9c3BhY2UoKSxhdHRyKGksXCJjbGFzc1wiLFwiZmFyIGZhLXF1ZXN0aW9uLWNpcmNsZVwiKSxhdHRyKHN1cCxcImRhdGEtdG9nZ2xlXCIsXCJ0b29sdGlwXCIpLGF0dHIoc3VwLFwidGl0bGVcIixzdXBfdGl0bGVfdmFsdWU9Y3R4WzBdLmRlc2NyaXB0aW9uKX0sbSh0YXJnZXQsYW5jaG9yKXtpbnNlcnQodGFyZ2V0LHN1cCxhbmNob3IpLGFwcGVuZChzdXAsaSksaW5zZXJ0KHRhcmdldCx0LGFuY2hvcil9LHAoY3R4LGRpcnR5KXsxJmRpcnR5JiZzdXBfdGl0bGVfdmFsdWUhPT0oc3VwX3RpdGxlX3ZhbHVlPWN0eFswXS5kZXNjcmlwdGlvbikmJmF0dHIoc3VwLFwidGl0bGVcIixzdXBfdGl0bGVfdmFsdWUpfSxkKGRldGFjaGluZyl7ZGV0YWNoaW5nJiZkZXRhY2goc3VwKSxkZXRhY2hpbmcmJmRldGFjaCh0KX19fWZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18zKGN0eCl7bGV0IGRpdjIsZGl2MSxkaXYwLGRpdjBfY2xhc3NfdmFsdWUsZGl2MF9hcmlhX3ZhbHVlbm93X3ZhbHVlLHQwLHQxLGlmX2Jsb2NrMD1jdHhbMl0uZXJyb3ImJmNyZWF0ZV9pZl9ibG9ja181KGN0eCksaWZfYmxvY2sxPWN0eFsyXS53YXJuaW5nJiZjcmVhdGVfaWZfYmxvY2tfNChjdHgpO3JldHVybntjKCl7ZGl2Mj1lbGVtZW50KFwiZGl2XCIpLGRpdjE9ZWxlbWVudChcImRpdlwiKSxkaXYwPWVsZW1lbnQoXCJkaXZcIiksdDA9c3BhY2UoKSxpZl9ibG9jazAmJmlmX2Jsb2NrMC5jKCksdDE9c3BhY2UoKSxpZl9ibG9jazEmJmlmX2Jsb2NrMS5jKCksYXR0cihkaXYwLFwiY2xhc3NcIixkaXYwX2NsYXNzX3ZhbHVlPVwicHJvZ3Jlc3MtYmFyIGJnLVwiK2N0eFsyXS5iZytcIiBzdmVsdGUtN3QzYXE0XCIpLGF0dHIoZGl2MCxcInJvbGVcIixcInByb2dyZXNzYmFyXCIpLGF0dHIoZGl2MCxcImFyaWEtdmFsdWVtaW5cIixcIjBcIiksYXR0cihkaXYwLFwiYXJpYS12YWx1ZW1heFwiLFwiMTAwXCIpLGF0dHIoZGl2MCxcImFyaWEtdmFsdWVub3dcIixkaXYwX2FyaWFfdmFsdWVub3dfdmFsdWU9Y3R4WzJdLnByb2dyZXNzKSxzZXRfc3R5bGUoZGl2MCxcIndpZHRoXCIsY3R4WzJdLnByb2dyZXNzK1wiJVwiKSx0b2dnbGVfY2xhc3MoZGl2MCxcInByb2dyZXNzLWJhci1zdHJpcGVkXCIsY3R4WzJdLnN0cmlwZWQpLHRvZ2dsZV9jbGFzcyhkaXYwLFwicHJvZ3Jlc3MtYmFyLWFuaW1hdGVkXCIsY3R4WzJdLmFuaW1hdGVkKSxhdHRyKGRpdjEsXCJjbGFzc1wiLFwicHJvZ3Jlc3MgYmctbGlnaHQgc3ZlbHRlLTd0M2FxNFwiKX0sbSh0YXJnZXQsYW5jaG9yKXtpbnNlcnQodGFyZ2V0LGRpdjIsYW5jaG9yKSxhcHBlbmQoZGl2MixkaXYxKSxhcHBlbmQoZGl2MSxkaXYwKSxhcHBlbmQoZGl2Mix0MCksaWZfYmxvY2swJiZpZl9ibG9jazAubShkaXYyLG51bGwpLGFwcGVuZChkaXYyLHQxKSxpZl9ibG9jazEmJmlmX2Jsb2NrMS5tKGRpdjIsbnVsbCl9LHAoY3R4LGRpcnR5KXs0JmRpcnR5JiZkaXYwX2NsYXNzX3ZhbHVlIT09KGRpdjBfY2xhc3NfdmFsdWU9XCJwcm9ncmVzcy1iYXIgYmctXCIrY3R4WzJdLmJnK1wiIHN2ZWx0ZS03dDNhcTRcIikmJmF0dHIoZGl2MCxcImNsYXNzXCIsZGl2MF9jbGFzc192YWx1ZSksNCZkaXJ0eSYmZGl2MF9hcmlhX3ZhbHVlbm93X3ZhbHVlIT09KGRpdjBfYXJpYV92YWx1ZW5vd192YWx1ZT1jdHhbMl0ucHJvZ3Jlc3MpJiZhdHRyKGRpdjAsXCJhcmlhLXZhbHVlbm93XCIsZGl2MF9hcmlhX3ZhbHVlbm93X3ZhbHVlKSw0JmRpcnR5JiZzZXRfc3R5bGUoZGl2MCxcIndpZHRoXCIsY3R4WzJdLnByb2dyZXNzK1wiJVwiKSw0JmRpcnR5JiZ0b2dnbGVfY2xhc3MoZGl2MCxcInByb2dyZXNzLWJhci1zdHJpcGVkXCIsY3R4WzJdLnN0cmlwZWQpLDQmZGlydHkmJnRvZ2dsZV9jbGFzcyhkaXYwLFwicHJvZ3Jlc3MtYmFyLWFuaW1hdGVkXCIsY3R4WzJdLmFuaW1hdGVkKSxjdHhbMl0uZXJyb3I/aWZfYmxvY2swP2lmX2Jsb2NrMC5wKGN0eCxkaXJ0eSk6KChpZl9ibG9jazA9Y3JlYXRlX2lmX2Jsb2NrXzUoY3R4KSkuYygpLGlmX2Jsb2NrMC5tKGRpdjIsdDEpKTppZl9ibG9jazAmJihpZl9ibG9jazAuZCgxKSxpZl9ibG9jazA9bnVsbCksY3R4WzJdLndhcm5pbmc/aWZfYmxvY2sxP2lmX2Jsb2NrMS5wKGN0eCxkaXJ0eSk6KChpZl9ibG9jazE9Y3JlYXRlX2lmX2Jsb2NrXzQoY3R4KSkuYygpLGlmX2Jsb2NrMS5tKGRpdjIsbnVsbCkpOmlmX2Jsb2NrMSYmKGlmX2Jsb2NrMS5kKDEpLGlmX2Jsb2NrMT1udWxsKX0sZChkZXRhY2hpbmcpe2RldGFjaGluZyYmZGV0YWNoKGRpdjIpLGlmX2Jsb2NrMCYmaWZfYmxvY2swLmQoKSxpZl9ibG9jazEmJmlmX2Jsb2NrMS5kKCl9fX1mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfNShjdHgpe2xldCBkaXYsdDAsdDEsdDIsdDFfdmFsdWU9Y3R4WzJdLmVycm9yK1wiXCIsaWZfYmxvY2s9Y3R4WzJdLnVybCYmY3JlYXRlX2lmX2Jsb2NrXzYoY3R4KTtyZXR1cm57Yygpe2Rpdj1lbGVtZW50KFwiZGl2XCIpLHQwPXRleHQoXCJFcnJvciBkb3dubG9hZGluZyBmaWxlOiBcIiksdDE9dGV4dCh0MV92YWx1ZSksdDI9c3BhY2UoKSxpZl9ibG9jayYmaWZfYmxvY2suYygpLGF0dHIoZGl2LFwiY2xhc3NcIixcImFsZXJ0IGFsZXJ0LWRhbmdlclwiKX0sbSh0YXJnZXQsYW5jaG9yKXtpbnNlcnQodGFyZ2V0LGRpdixhbmNob3IpLGFwcGVuZChkaXYsdDApLGFwcGVuZChkaXYsdDEpLGFwcGVuZChkaXYsdDIpLGlmX2Jsb2NrJiZpZl9ibG9jay5tKGRpdixudWxsKX0scChjdHgsZGlydHkpezQmZGlydHkmJnQxX3ZhbHVlIT09KHQxX3ZhbHVlPWN0eFsyXS5lcnJvcitcIlwiKSYmc2V0X2RhdGEodDEsdDFfdmFsdWUpLGN0eFsyXS51cmw/aWZfYmxvY2s/aWZfYmxvY2sucChjdHgsZGlydHkpOigoaWZfYmxvY2s9Y3JlYXRlX2lmX2Jsb2NrXzYoY3R4KSkuYygpLGlmX2Jsb2NrLm0oZGl2LG51bGwpKTppZl9ibG9jayYmKGlmX2Jsb2NrLmQoMSksaWZfYmxvY2s9bnVsbCl9LGQoZGV0YWNoaW5nKXtkZXRhY2hpbmcmJmRldGFjaChkaXYpLGlmX2Jsb2NrJiZpZl9ibG9jay5kKCl9fX1mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfNihjdHgpe2xldCB0MCxhLHQxLGFfaHJlZl92YWx1ZSx0MV92YWx1ZT1jdHhbMl0udXJsK1wiXCI7cmV0dXJue2MoKXt0MD10ZXh0KFwiZnJvbSBcIiksYT1lbGVtZW50KFwiYVwiKSx0MT10ZXh0KHQxX3ZhbHVlKSxhdHRyKGEsXCJocmVmXCIsYV9ocmVmX3ZhbHVlPWN0eFsyXS51cmwpLGF0dHIoYSxcInRhcmdldFwiLFwiX2JsYW5rXCIpfSxtKHRhcmdldCxhbmNob3Ipe2luc2VydCh0YXJnZXQsdDAsYW5jaG9yKSxpbnNlcnQodGFyZ2V0LGEsYW5jaG9yKSxhcHBlbmQoYSx0MSl9LHAoY3R4LGRpcnR5KXs0JmRpcnR5JiZ0MV92YWx1ZSE9PSh0MV92YWx1ZT1jdHhbMl0udXJsK1wiXCIpJiZzZXRfZGF0YSh0MSx0MV92YWx1ZSksNCZkaXJ0eSYmYV9ocmVmX3ZhbHVlIT09KGFfaHJlZl92YWx1ZT1jdHhbMl0udXJsKSYmYXR0cihhLFwiaHJlZlwiLGFfaHJlZl92YWx1ZSl9LGQoZGV0YWNoaW5nKXtkZXRhY2hpbmcmJmRldGFjaCh0MCksZGV0YWNoaW5nJiZkZXRhY2goYSl9fX1mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfNChjdHgpe2xldCBkaXYsdDAsdDEsYnIsdDIsYix0NCxhLHQ1LGFfaHJlZl92YWx1ZSx0Nix0MV92YWx1ZT1jdHhbMl0uZXJyb3IrXCJcIix0NV92YWx1ZT1jdHhbMl0udXJsK1wiXCI7cmV0dXJue2MoKXtkaXY9ZWxlbWVudChcImRpdlwiKSx0MD10ZXh0KFwiRXJyb3IgZG93bmxvYWRpbmcgZmlsZTogXCIpLHQxPXRleHQodDFfdmFsdWUpLGJyPWVsZW1lbnQoXCJiclwiKSx0Mj1zcGFjZSgpLChiPWVsZW1lbnQoXCJiXCIpKS50ZXh0Q29udGVudD1cIkl0IG1heSByZXF1aXJlIHVzZXIgZW5nYWdlbWVudFwiLHQ0PXRleHQoXCIsIHBsZWFzZSB2aXNpdFxcbiAgICAgICAgICAgIFwiKSxhPWVsZW1lbnQoXCJhXCIpLHQ1PXRleHQodDVfdmFsdWUpLHQ2PXRleHQoXCJcXG4gICAgICAgICAgdG8gZG93bmxvYWQgdGhlIGV4YW1wbGUgZmlsZSBmb3IgdXBsb2FkLlwiKSxhdHRyKGEsXCJocmVmXCIsYV9ocmVmX3ZhbHVlPWN0eFsyXS51cmwpLGF0dHIoYSxcInRhcmdldFwiLFwiX2JsYW5rXCIpLGF0dHIoZGl2LFwiY2xhc3NcIixcImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIil9LG0odGFyZ2V0LGFuY2hvcil7aW5zZXJ0KHRhcmdldCxkaXYsYW5jaG9yKSxhcHBlbmQoZGl2LHQwKSxhcHBlbmQoZGl2LHQxKSxhcHBlbmQoZGl2LGJyKSxhcHBlbmQoZGl2LHQyKSxhcHBlbmQoZGl2LGIpLGFwcGVuZChkaXYsdDQpLGFwcGVuZChkaXYsYSksYXBwZW5kKGEsdDUpLGFwcGVuZChkaXYsdDYpfSxwKGN0eCxkaXJ0eSl7NCZkaXJ0eSYmdDFfdmFsdWUhPT0odDFfdmFsdWU9Y3R4WzJdLmVycm9yK1wiXCIpJiZzZXRfZGF0YSh0MSx0MV92YWx1ZSksNCZkaXJ0eSYmdDVfdmFsdWUhPT0odDVfdmFsdWU9Y3R4WzJdLnVybCtcIlwiKSYmc2V0X2RhdGEodDUsdDVfdmFsdWUpLDQmZGlydHkmJmFfaHJlZl92YWx1ZSE9PShhX2hyZWZfdmFsdWU9Y3R4WzJdLnVybCkmJmF0dHIoYSxcImhyZWZcIixhX2hyZWZfdmFsdWUpfSxkKGRldGFjaGluZyl7ZGV0YWNoaW5nJiZkZXRhY2goZGl2KX19fWZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayhjdHgpe2xldCBkaXY0LGRpdjEsc3BhbjAsdDAsdDEsc3VwMCx0Mix0MyxkaXYwLHQ0LGRpdjMsc3BhbjEsdDUsdDYsc3VwMSx0Nyx0OCxkaXYyLHNob3dfaWZfMT1PYmplY3Qua2V5cyhjdHhbMF0uZXhhbXBsZXMpLmxlbmd0aD4xLHNob3dfaWY9T2JqZWN0LmtleXMoY3R4WzBdLmV4YW1wbGVzKS5sZW5ndGg+MSxpZl9ibG9jazA9c2hvd19pZl8xJiZjcmVhdGVfaWZfYmxvY2tfMihjdHgpLGVhY2hfdmFsdWVfMT1PYmplY3Qua2V5cyhjdHhbMF0uZXhhbXBsZXMpLGVhY2hfYmxvY2tzXzE9W107Zm9yKGxldCBpPTA7aTxlYWNoX3ZhbHVlXzEubGVuZ3RoO2krPTEpZWFjaF9ibG9ja3NfMVtpXT1jcmVhdGVfZWFjaF9ibG9ja18xKGdldF9lYWNoX2NvbnRleHRfMShjdHgsZWFjaF92YWx1ZV8xLGkpKTtsZXQgaWZfYmxvY2sxPXNob3dfaWYmJmNyZWF0ZV9pZl9ibG9ja18xKGN0eCksZWFjaF92YWx1ZT1PYmplY3Qua2V5cyhjdHhbMF0uZXhhbXBsZXMpLGVhY2hfYmxvY2tzPVtdO2ZvcihsZXQgaT0wO2k8ZWFjaF92YWx1ZS5sZW5ndGg7aSs9MSllYWNoX2Jsb2Nrc1tpXT1jcmVhdGVfZWFjaF9ibG9jayhnZXRfZWFjaF9jb250ZXh0KGN0eCxlYWNoX3ZhbHVlLGkpKTtyZXR1cm57Yygpe2RpdjQ9ZWxlbWVudChcImRpdlwiKSxkaXYxPWVsZW1lbnQoXCJkaXZcIiksc3BhbjA9ZWxlbWVudChcInNwYW5cIiksdDA9dGV4dChcIkxvYWQgZXhhbXBsZVwiKSxpZl9ibG9jazAmJmlmX2Jsb2NrMC5jKCksdDE9c3BhY2UoKSwoc3VwMD1lbGVtZW50KFwic3VwXCIpKS5pbm5lckhUTUw9JzxpIGNsYXNzPVwiZmFyIGZhLXF1ZXN0aW9uLWNpcmNsZVwiPjwvaT4nLHQyPXRleHQoXCI6XCIpLHQzPXNwYWNlKCksZGl2MD1lbGVtZW50KFwiZGl2XCIpO2ZvcihsZXQgaT0wO2k8ZWFjaF9ibG9ja3NfMS5sZW5ndGg7aSs9MSllYWNoX2Jsb2Nrc18xW2ldLmMoKTt0ND1zcGFjZSgpLGRpdjM9ZWxlbWVudChcImRpdlwiKSxzcGFuMT1lbGVtZW50KFwic3BhblwiKSx0NT10ZXh0KFwiRG93bmxvYWQgZXhhbXBsZVwiKSxpZl9ibG9jazEmJmlmX2Jsb2NrMS5jKCksdDY9c3BhY2UoKSwoc3VwMT1lbGVtZW50KFwic3VwXCIpKS5pbm5lckhUTUw9JzxpIGNsYXNzPVwiZmFyIGZhLXF1ZXN0aW9uLWNpcmNsZVwiPjwvaT4nLHQ3PXRleHQoXCI6XCIpLHQ4PXNwYWNlKCksZGl2Mj1lbGVtZW50KFwiZGl2XCIpO2ZvcihsZXQgaT0wO2k8ZWFjaF9ibG9ja3MubGVuZ3RoO2krPTEpZWFjaF9ibG9ja3NbaV0uYygpO2F0dHIoc3VwMCxcImRhdGEtdG9nZ2xlXCIsXCJ0b29sdGlwXCIpLGF0dHIoc3VwMCxcInRpdGxlXCIsXCJMb2FkIHRoZSBleGFtcGxlIGZpbGUgZGlyZWN0bHkgaW50byB0aGUgYXBweXRlclwiKSxhdHRyKHNwYW4wLFwiY2xhc3NcIixcImQtdGFibGUtY2VsbCBtci0xIG15LTEgcC0xIHRleHQtcmlnaHRcIiksc2V0X3N0eWxlKHNwYW4wLFwid2hpdGUtc3BhY2VcIixcIm5vd3JhcFwiKSxhdHRyKGRpdjAsXCJjbGFzc1wiLFwiZC10YWJsZS1jZWxsIHRhYmxlLWdyb3cgZC1mbGV4IGZsZXgtd3JhcCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnQgYWxpZ24taXRlbXMtY2VudGVyXCIpLGF0dHIoZGl2MSxcImNsYXNzXCIsXCJkLXRhYmxlLXJvd1wiKSxhdHRyKHN1cDEsXCJkYXRhLXRvZ2dsZVwiLFwidG9vbHRpcFwiKSxhdHRyKHN1cDEsXCJ0aXRsZVwiLFwiRG93bmxvYWQgdGhlIGV4YW1wbGUgZmlsZSBmb3IgaW5zcGVjdGlvblwiKSxhdHRyKHNwYW4xLFwiY2xhc3NcIixcImQtdGFibGUtY2VsbCBtci0xIG15LTEgcC0xIHRleHQtcmlnaHRcIiksc2V0X3N0eWxlKHNwYW4xLFwid2hpdGUtc3BhY2VcIixcIm5vd3JhcFwiKSxhdHRyKGRpdjIsXCJjbGFzc1wiLFwiZC10YWJsZS1jZWxsIHRhYmxlLWdyb3cgZC1mbGV4IGZsZXgtd3JhcCBqdXN0aWZ5LWNvbnRlbnQtc3RhcnQgYWxpZ24taXRlbXMtY2VudGVyXCIpLGF0dHIoZGl2MyxcImNsYXNzXCIsXCJkLXRhYmxlLXJvd1wiKSxhdHRyKGRpdjQsXCJjbGFzc1wiLFwiZC10YWJsZVwiKX0sbSh0YXJnZXQsYW5jaG9yKXtpbnNlcnQodGFyZ2V0LGRpdjQsYW5jaG9yKSxhcHBlbmQoZGl2NCxkaXYxKSxhcHBlbmQoZGl2MSxzcGFuMCksYXBwZW5kKHNwYW4wLHQwKSxpZl9ibG9jazAmJmlmX2Jsb2NrMC5tKHNwYW4wLG51bGwpLGFwcGVuZChzcGFuMCx0MSksYXBwZW5kKHNwYW4wLHN1cDApLGFwcGVuZChzcGFuMCx0MiksYXBwZW5kKGRpdjEsdDMpLGFwcGVuZChkaXYxLGRpdjApO2ZvcihsZXQgaT0wO2k8ZWFjaF9ibG9ja3NfMS5sZW5ndGg7aSs9MSllYWNoX2Jsb2Nrc18xW2ldLm0oZGl2MCxudWxsKTthcHBlbmQoZGl2NCx0NCksYXBwZW5kKGRpdjQsZGl2MyksYXBwZW5kKGRpdjMsc3BhbjEpLGFwcGVuZChzcGFuMSx0NSksaWZfYmxvY2sxJiZpZl9ibG9jazEubShzcGFuMSxudWxsKSxhcHBlbmQoc3BhbjEsdDYpLGFwcGVuZChzcGFuMSxzdXAxKSxhcHBlbmQoc3BhbjEsdDcpLGFwcGVuZChkaXYzLHQ4KSxhcHBlbmQoZGl2MyxkaXYyKTtmb3IobGV0IGk9MDtpPGVhY2hfYmxvY2tzLmxlbmd0aDtpKz0xKWVhY2hfYmxvY2tzW2ldLm0oZGl2MixudWxsKX0scChjdHgsZGlydHkpe2lmKDEmZGlydHkmJihzaG93X2lmXzE9T2JqZWN0LmtleXMoY3R4WzBdLmV4YW1wbGVzKS5sZW5ndGg+MSksc2hvd19pZl8xP2lmX2Jsb2NrMHx8KChpZl9ibG9jazA9Y3JlYXRlX2lmX2Jsb2NrXzIoY3R4KSkuYygpLGlmX2Jsb2NrMC5tKHNwYW4wLHQxKSk6aWZfYmxvY2swJiYoaWZfYmxvY2swLmQoMSksaWZfYmxvY2swPW51bGwpLDMzJmRpcnR5KXtsZXQgaTtmb3IoZWFjaF92YWx1ZV8xPU9iamVjdC5rZXlzKGN0eFswXS5leGFtcGxlcyksaT0wO2k8ZWFjaF92YWx1ZV8xLmxlbmd0aDtpKz0xKXtjb25zdCBjaGlsZF9jdHg9Z2V0X2VhY2hfY29udGV4dF8xKGN0eCxlYWNoX3ZhbHVlXzEsaSk7ZWFjaF9ibG9ja3NfMVtpXT9lYWNoX2Jsb2Nrc18xW2ldLnAoY2hpbGRfY3R4LGRpcnR5KTooZWFjaF9ibG9ja3NfMVtpXT1jcmVhdGVfZWFjaF9ibG9ja18xKGNoaWxkX2N0eCksZWFjaF9ibG9ja3NfMVtpXS5jKCksZWFjaF9ibG9ja3NfMVtpXS5tKGRpdjAsbnVsbCkpfWZvcig7aTxlYWNoX2Jsb2Nrc18xLmxlbmd0aDtpKz0xKWVhY2hfYmxvY2tzXzFbaV0uZCgxKTtlYWNoX2Jsb2Nrc18xLmxlbmd0aD1lYWNoX3ZhbHVlXzEubGVuZ3RofWlmKDEmZGlydHkmJihzaG93X2lmPU9iamVjdC5rZXlzKGN0eFswXS5leGFtcGxlcykubGVuZ3RoPjEpLHNob3dfaWY/aWZfYmxvY2sxfHwoKGlmX2Jsb2NrMT1jcmVhdGVfaWZfYmxvY2tfMShjdHgpKS5jKCksaWZfYmxvY2sxLm0oc3BhbjEsdDYpKTppZl9ibG9jazEmJihpZl9ibG9jazEuZCgxKSxpZl9ibG9jazE9bnVsbCksMSZkaXJ0eSl7bGV0IGk7Zm9yKGVhY2hfdmFsdWU9T2JqZWN0LmtleXMoY3R4WzBdLmV4YW1wbGVzKSxpPTA7aTxlYWNoX3ZhbHVlLmxlbmd0aDtpKz0xKXtjb25zdCBjaGlsZF9jdHg9Z2V0X2VhY2hfY29udGV4dChjdHgsZWFjaF92YWx1ZSxpKTtlYWNoX2Jsb2Nrc1tpXT9lYWNoX2Jsb2Nrc1tpXS5wKGNoaWxkX2N0eCxkaXJ0eSk6KGVhY2hfYmxvY2tzW2ldPWNyZWF0ZV9lYWNoX2Jsb2NrKGNoaWxkX2N0eCksZWFjaF9ibG9ja3NbaV0uYygpLGVhY2hfYmxvY2tzW2ldLm0oZGl2MixudWxsKSl9Zm9yKDtpPGVhY2hfYmxvY2tzLmxlbmd0aDtpKz0xKWVhY2hfYmxvY2tzW2ldLmQoMSk7ZWFjaF9ibG9ja3MubGVuZ3RoPWVhY2hfdmFsdWUubGVuZ3RofX0sZChkZXRhY2hpbmcpe2RldGFjaGluZyYmZGV0YWNoKGRpdjQpLGlmX2Jsb2NrMCYmaWZfYmxvY2swLmQoKSxkZXN0cm95X2VhY2goZWFjaF9ibG9ja3NfMSxkZXRhY2hpbmcpLGlmX2Jsb2NrMSYmaWZfYmxvY2sxLmQoKSxkZXN0cm95X2VhY2goZWFjaF9ibG9ja3MsZGV0YWNoaW5nKX19fWZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18yKGN0eCl7bGV0IHQ7cmV0dXJue2MoKXt0PXRleHQoXCJzXCIpfSxtKHRhcmdldCxhbmNob3Ipe2luc2VydCh0YXJnZXQsdCxhbmNob3IpfSxkKGRldGFjaGluZyl7ZGV0YWNoaW5nJiZkZXRhY2godCl9fX1mdW5jdGlvbiBjcmVhdGVfZWFjaF9ibG9ja18xKGN0eCl7bGV0IHNwYW4sYSx0MCx0MSxtb3VudGVkLGRpc3Bvc2UsdDBfdmFsdWU9Y3R4WzE2XStcIlwiO2Z1bmN0aW9uIGNsaWNrX2hhbmRsZXIoLi4uYXJncyl7cmV0dXJuIGN0eFs5XShjdHhbMTZdLC4uLmFyZ3MpfXJldHVybntjKCl7c3Bhbj1lbGVtZW50KFwic3BhblwiKSxhPWVsZW1lbnQoXCJhXCIpLHQwPXRleHQodDBfdmFsdWUpLHQxPXNwYWNlKCksYXR0cihhLFwiaHJlZlwiLFwiamF2YXNjcmlwdDpcIiksYXR0cihzcGFuLFwiY2xhc3NcIixcInRleHQtc20gbS0xIHAtMVwiKSxzZXRfc3R5bGUoc3BhbixcIndoaXRlLXNwYWNlXCIsXCJub3dyYXBcIil9LG0odGFyZ2V0LGFuY2hvcil7aW5zZXJ0KHRhcmdldCxzcGFuLGFuY2hvciksYXBwZW5kKHNwYW4sYSksYXBwZW5kKGEsdDApLGFwcGVuZChzcGFuLHQxKSxtb3VudGVkfHwoZGlzcG9zZT1saXN0ZW4oYSxcImNsaWNrXCIsY2xpY2tfaGFuZGxlciksbW91bnRlZD0hMCl9LHAobmV3X2N0eCxkaXJ0eSl7Y3R4PW5ld19jdHgsMSZkaXJ0eSYmdDBfdmFsdWUhPT0odDBfdmFsdWU9Y3R4WzE2XStcIlwiKSYmc2V0X2RhdGEodDAsdDBfdmFsdWUpfSxkKGRldGFjaGluZyl7ZGV0YWNoaW5nJiZkZXRhY2goc3BhbiksbW91bnRlZD0hMSxkaXNwb3NlKCl9fX1mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMShjdHgpe2xldCB0O3JldHVybntjKCl7dD10ZXh0KFwic1wiKX0sbSh0YXJnZXQsYW5jaG9yKXtpbnNlcnQodGFyZ2V0LHQsYW5jaG9yKX0sZChkZXRhY2hpbmcpe2RldGFjaGluZyYmZGV0YWNoKHQpfX19ZnVuY3Rpb24gY3JlYXRlX2VhY2hfYmxvY2soY3R4KXtsZXQgc3BhbixhLHQwLGFfaHJlZl92YWx1ZSx0MSx0MF92YWx1ZT1jdHhbMTZdK1wiXCI7cmV0dXJue2MoKXtzcGFuPWVsZW1lbnQoXCJzcGFuXCIpLGE9ZWxlbWVudChcImFcIiksdDA9dGV4dCh0MF92YWx1ZSksdDE9c3BhY2UoKSxhdHRyKGEsXCJocmVmXCIsYV9ocmVmX3ZhbHVlPWN0eFswXS5leGFtcGxlc1tjdHhbMTZdXSksYXR0cihhLFwidGFyZ2V0XCIsXCJfYmxhbmtcIiksYXR0cihzcGFuLFwiY2xhc3NcIixcInRleHQtc20gbS0xIHAtMVwiKSxzZXRfc3R5bGUoc3BhbixcIndoaXRlLXNwYWNlXCIsXCJub3dyYXBcIil9LG0odGFyZ2V0LGFuY2hvcil7aW5zZXJ0KHRhcmdldCxzcGFuLGFuY2hvciksYXBwZW5kKHNwYW4sYSksYXBwZW5kKGEsdDApLGFwcGVuZChzcGFuLHQxKX0scChjdHgsZGlydHkpezEmZGlydHkmJnQwX3ZhbHVlIT09KHQwX3ZhbHVlPWN0eFsxNl0rXCJcIikmJnNldF9kYXRhKHQwLHQwX3ZhbHVlKSwxJmRpcnR5JiZhX2hyZWZfdmFsdWUhPT0oYV9ocmVmX3ZhbHVlPWN0eFswXS5leGFtcGxlc1tjdHhbMTZdXSkmJmF0dHIoYSxcImhyZWZcIixhX2hyZWZfdmFsdWUpfSxkKGRldGFjaGluZyl7ZGV0YWNoaW5nJiZkZXRhY2goc3Bhbil9fX1mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQoY3R4KXtsZXQgZGl2MyxkaXYwLHQwLHQxLHQyLHQzLGRpdjIsZGl2MSxpbnB1dDAsaW5wdXQwX2lkX3ZhbHVlLHQ0LGlucHV0MSxpbnB1dDFfbmFtZV92YWx1ZSx0NSxsYWJlbCx0NixsYWJlbF9mb3JfdmFsdWUsdDcsdDgsbW91bnRlZCxkaXNwb3NlLHQwX3ZhbHVlPWN0eFswXS5sYWJlbCtcIlwiLHQ2X3ZhbHVlPShjdHhbM118fFwiQ2hvb3NlIGZpbGVcIikrXCJcIixzaG93X2lmPWN0eFswXS5leGFtcGxlcyYmT2JqZWN0LmtleXMoY3R4WzBdLmV4YW1wbGVzKS5sZW5ndGg+MCxpZl9ibG9jazA9Y3R4WzBdLmRlc2NyaXB0aW9uJiZjcmVhdGVfaWZfYmxvY2tfNyhjdHgpLGlmX2Jsb2NrMT12b2lkIDAhPT1jdHhbMl0mJmNyZWF0ZV9pZl9ibG9ja18zKGN0eCksaWZfYmxvY2syPXNob3dfaWYmJmNyZWF0ZV9pZl9ibG9jayhjdHgpO3JldHVybntjKCl7ZGl2Mz1lbGVtZW50KFwiZGl2XCIpLGRpdjA9ZWxlbWVudChcImRpdlwiKSx0MD10ZXh0KHQwX3ZhbHVlKSx0MT1zcGFjZSgpLGlmX2Jsb2NrMCYmaWZfYmxvY2swLmMoKSx0Mj10ZXh0KFwiOlwiKSx0Mz1zcGFjZSgpLGRpdjI9ZWxlbWVudChcImRpdlwiKSxkaXYxPWVsZW1lbnQoXCJkaXZcIiksaW5wdXQwPWVsZW1lbnQoXCJpbnB1dFwiKSx0ND1zcGFjZSgpLGlucHV0MT1lbGVtZW50KFwiaW5wdXRcIiksdDU9c3BhY2UoKSxsYWJlbD1lbGVtZW50KFwibGFiZWxcIiksdDY9dGV4dCh0Nl92YWx1ZSksdDc9c3BhY2UoKSxpZl9ibG9jazEmJmlmX2Jsb2NrMS5jKCksdDg9c3BhY2UoKSxpZl9ibG9jazImJmlmX2Jsb2NrMi5jKCksYXR0cihkaXYwLFwiY2xhc3NcIixcImNvbC1sZy0zIGJvbGQgdGV4dC1sZy1yaWdodCBteS1hdXRvXCIpLGF0dHIoaW5wdXQwLFwidHlwZVwiLFwiZmlsZVwiKSxhdHRyKGlucHV0MCxcImNsYXNzXCIsXCJjdXN0b20tZmlsZS1pbnB1dFwiKSxhdHRyKGlucHV0MCxcImlkXCIsaW5wdXQwX2lkX3ZhbHVlPWN0eFswXS5uYW1lKSxhdHRyKGlucHV0MSxcInR5cGVcIixcInRleHRcIiksYXR0cihpbnB1dDEsXCJjbGFzc1wiLFwiaGlkZGVuXCIpLGF0dHIoaW5wdXQxLFwibmFtZVwiLGlucHV0MV9uYW1lX3ZhbHVlPWN0eFswXS5uYW1lKSxhdHRyKGxhYmVsLFwiY2xhc3NcIixcImN1c3RvbS1maWxlLWxhYmVsXCIpLGF0dHIobGFiZWwsXCJmb3JcIixsYWJlbF9mb3JfdmFsdWU9Y3R4WzBdLm5hbWUpLGF0dHIoZGl2MSxcImNsYXNzXCIsXCJjdXN0b20tZmlsZVwiKSxhdHRyKGRpdjEsXCJkcm9wem9uZVwiLFwiY29weVwiKSxhdHRyKGRpdjIsXCJjbGFzc1wiLFwiY29sLWxnLTYgcHQtMiBwdC1sZy0wXCIpLGF0dHIoZGl2MyxcImNsYXNzXCIsXCJyb3cgcHgtNCBweC1sZy0zIHBiLTRcIil9LG0odGFyZ2V0LGFuY2hvcil7aW5zZXJ0KHRhcmdldCxkaXYzLGFuY2hvciksYXBwZW5kKGRpdjMsZGl2MCksYXBwZW5kKGRpdjAsdDApLGFwcGVuZChkaXYwLHQxKSxpZl9ibG9jazAmJmlmX2Jsb2NrMC5tKGRpdjAsbnVsbCksYXBwZW5kKGRpdjAsdDIpLGFwcGVuZChkaXYzLHQzKSxhcHBlbmQoZGl2MyxkaXYyKSxhcHBlbmQoZGl2MixkaXYxKSxhcHBlbmQoZGl2MSxpbnB1dDApLGN0eFs3XShpbnB1dDApLGFwcGVuZChkaXYxLHQ0KSxhcHBlbmQoZGl2MSxpbnB1dDEpLHNldF9pbnB1dF92YWx1ZShpbnB1dDEsY3R4WzRdKSxhcHBlbmQoZGl2MSx0NSksYXBwZW5kKGRpdjEsbGFiZWwpLGFwcGVuZChsYWJlbCx0NiksYXBwZW5kKGRpdjIsdDcpLGlmX2Jsb2NrMSYmaWZfYmxvY2sxLm0oZGl2MixudWxsKSxhcHBlbmQoZGl2Mix0OCksaWZfYmxvY2syJiZpZl9ibG9jazIubShkaXYyLG51bGwpLG1vdW50ZWR8fChkaXNwb3NlPWxpc3RlbihpbnB1dDEsXCJpbnB1dFwiLGN0eFs4XSksbW91bnRlZD0hMCl9LHAoY3R4LFtkaXJ0eV0pezEmZGlydHkmJnQwX3ZhbHVlIT09KHQwX3ZhbHVlPWN0eFswXS5sYWJlbCtcIlwiKSYmc2V0X2RhdGEodDAsdDBfdmFsdWUpLGN0eFswXS5kZXNjcmlwdGlvbj9pZl9ibG9jazA/aWZfYmxvY2swLnAoY3R4LGRpcnR5KTooKGlmX2Jsb2NrMD1jcmVhdGVfaWZfYmxvY2tfNyhjdHgpKS5jKCksaWZfYmxvY2swLm0oZGl2MCx0MikpOmlmX2Jsb2NrMCYmKGlmX2Jsb2NrMC5kKDEpLGlmX2Jsb2NrMD1udWxsKSwxJmRpcnR5JiZpbnB1dDBfaWRfdmFsdWUhPT0oaW5wdXQwX2lkX3ZhbHVlPWN0eFswXS5uYW1lKSYmYXR0cihpbnB1dDAsXCJpZFwiLGlucHV0MF9pZF92YWx1ZSksMSZkaXJ0eSYmaW5wdXQxX25hbWVfdmFsdWUhPT0oaW5wdXQxX25hbWVfdmFsdWU9Y3R4WzBdLm5hbWUpJiZhdHRyKGlucHV0MSxcIm5hbWVcIixpbnB1dDFfbmFtZV92YWx1ZSksMTYmZGlydHkmJmlucHV0MS52YWx1ZSE9PWN0eFs0XSYmc2V0X2lucHV0X3ZhbHVlKGlucHV0MSxjdHhbNF0pLDgmZGlydHkmJnQ2X3ZhbHVlIT09KHQ2X3ZhbHVlPShjdHhbM118fFwiQ2hvb3NlIGZpbGVcIikrXCJcIikmJnNldF9kYXRhKHQ2LHQ2X3ZhbHVlKSwxJmRpcnR5JiZsYWJlbF9mb3JfdmFsdWUhPT0obGFiZWxfZm9yX3ZhbHVlPWN0eFswXS5uYW1lKSYmYXR0cihsYWJlbCxcImZvclwiLGxhYmVsX2Zvcl92YWx1ZSksdm9pZCAwIT09Y3R4WzJdP2lmX2Jsb2NrMT9pZl9ibG9jazEucChjdHgsZGlydHkpOigoaWZfYmxvY2sxPWNyZWF0ZV9pZl9ibG9ja18zKGN0eCkpLmMoKSxpZl9ibG9jazEubShkaXYyLHQ4KSk6aWZfYmxvY2sxJiYoaWZfYmxvY2sxLmQoMSksaWZfYmxvY2sxPW51bGwpLDEmZGlydHkmJihzaG93X2lmPWN0eFswXS5leGFtcGxlcyYmT2JqZWN0LmtleXMoY3R4WzBdLmV4YW1wbGVzKS5sZW5ndGg+MCksc2hvd19pZj9pZl9ibG9jazI/aWZfYmxvY2syLnAoY3R4LGRpcnR5KTooKGlmX2Jsb2NrMj1jcmVhdGVfaWZfYmxvY2soY3R4KSkuYygpLGlmX2Jsb2NrMi5tKGRpdjIsbnVsbCkpOmlmX2Jsb2NrMiYmKGlmX2Jsb2NrMi5kKDEpLGlmX2Jsb2NrMj1udWxsKX0saTpub29wLG86bm9vcCxkKGRldGFjaGluZyl7ZGV0YWNoaW5nJiZkZXRhY2goZGl2MyksaWZfYmxvY2swJiZpZl9ibG9jazAuZCgpLGN0eFs3XShudWxsKSxpZl9ibG9jazEmJmlmX2Jsb2NrMS5kKCksaWZfYmxvY2syJiZpZl9ibG9jazIuZCgpLG1vdW50ZWQ9ITEsZGlzcG9zZSgpfX19ZnVuY3Rpb24gaW5zdGFuY2UoJCRzZWxmLCQkcHJvcHMsJCRpbnZhbGlkYXRlKXtsZXQgc29ja2V0LHNpb2Z1LHt3aW5kb3c6d2luZG93fT0kJHByb3BzLHthcmdzOmFyZ3N9PSQkcHJvcHM7d2luZG93LnJlcXVpcmUuY29uZmlnKHtwYXRoczp7XCJzb2NrZXRpby1maWxlLXVwbG9hZFwiOmAke3dpbmRvdy5fY29uZmlnLlNUQVRJQ19VUkx9anMvbGliL3NvY2tldGlvLWZpbGUtdXBsb2FkL2NsaWVudC5taW5gfSxzaGltOntcInNvY2tldGlvLWZpbGUtdXBsb2FkXCI6e2V4cG9ydHM6XCJTb2NrZXRJT0ZpbGVVcGxvYWRcIn19fSk7bGV0IGZpbGVGaWVsZCxzdGF0ZSxmaWxlbmFtZSxmdWxsX2ZpbGVuYW1lLF9kZXBzPXZvaWQgMDthc3luYyBmdW5jdGlvbiBlbnN1cmVfZGVwcygpe3ZvaWQgMD09PV9kZXBzJiYoX2RlcHM9YXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+d2luZG93LnJlcXVpcmUoW1wic29ja2V0XCIsXCJzb2NrZXRpby1maWxlLXVwbG9hZFwiXSxmdW5jdGlvbihzb2NrZXQsU29ja2V0SU9GaWxlVXBsb2FkKXtyZXNvbHZlKHtzb2NrZXQ6c29ja2V0LHNpb2Z1Om5ldyBTb2NrZXRJT0ZpbGVVcGxvYWQoc29ja2V0KX0pfSxyZWplY3QpKSxzb2NrZXQ9X2RlcHMuc29ja2V0LHNpb2Z1PV9kZXBzLnNpb2Z1KX1hc3luYyBmdW5jdGlvbiBsb2FkX2ZpbGUobmFtZSx1cmwsZmlsZSl7LTE9PT11cmwuaW5kZXhPZihcIjovL1wiKSYmKHVybD1uZXcgVVJMKHVybCxkb2N1bWVudC5iYXNlVVJJKS5ocmVmKSxhd2FpdCBlbnN1cmVfZGVwcygpLHNvY2tldC5lbWl0KFwiZG93bmxvYWRfc3RhcnRcIix7bmFtZTpuYW1lLHVybDpuZXcgVVJMKHVybCkuaHJlZixmaWxlOmZpbGV9KX1vbk1vdW50KGFzeW5jKCk9Pnthd2FpdCBlbnN1cmVfZGVwcygpLGF3YWl0IGFzeW5jIGZ1bmN0aW9uKCl7c29ja2V0Lm9uKFwiZG93bmxvYWRfcXVldWVkXCIsZnVuY3Rpb24oZXZ0KXtldnQubmFtZT09PWFyZ3MubmFtZSYmJCRpbnZhbGlkYXRlKDIsc3RhdGU9e3N0cmlwZWQ6ITAsYmc6XCJwcmltYXJ5XCIscHJvZ3Jlc3M6MH0pfSksc29ja2V0Lm9uKFwiZG93bmxvYWRfc3RhcnRcIixmdW5jdGlvbihldnQpe2V2dC5uYW1lPT09YXJncy5uYW1lJiYkJGludmFsaWRhdGUoMixzdGF0ZT17Li4uc3RhdGUsYW5pbWF0ZWQ6ITB9KX0pLHNvY2tldC5vbihcImRvd25sb2FkX3Byb2dyZXNzXCIsZnVuY3Rpb24oZXZ0KXtldnQubmFtZT09PWFyZ3MubmFtZSYmKGV2dC50b3RhbF9zaXplPDA/JCRpbnZhbGlkYXRlKDIsc3RhdGU9ey4uLnN0YXRlLHByb2dyZXNzOjI1LGJnOlwid2FybmluZ1wifSk6MD09PWV2dC50b3RhbF9zaXplPyQkaW52YWxpZGF0ZSgyLHN0YXRlPXsuLi5zdGF0ZSxwcm9ncmVzczoxMDB9KTokJGludmFsaWRhdGUoMixzdGF0ZT17Li4uc3RhdGUscHJvZ3Jlc3M6ZXZ0LmNodW5rKmV2dC5jaHVua19zaXplL2V2dC50b3RhbF9zaXplKjEwMHwwfSkpfSksc29ja2V0Lm9uKFwiZG93bmxvYWRfY29tcGxldGVcIixmdW5jdGlvbihldnQpe2V2dC5uYW1lPT09YXJncy5uYW1lJiYoJCRpbnZhbGlkYXRlKDIsc3RhdGU9ey4uLnN0YXRlLGJnOlwic3VjY2Vzc1wiLGFuaW1hdGVkOiExLHByb2dyZXNzOjEwMH0pLCQkaW52YWxpZGF0ZSgzLGZpbGVuYW1lPWV2dC5maWxlbmFtZSksJCRpbnZhbGlkYXRlKDQsZnVsbF9maWxlbmFtZT1ldnQuZnVsbF9maWxlbmFtZSkpfSksc29ja2V0Lm9uKFwiZG93bmxvYWRfZXJyb3JcIixmdW5jdGlvbihldnQpe2V2dC5uYW1lPT09YXJncy5uYW1lJiYoXCJIVFRQIEVycm9yIDQwNDogTm90IEZvdW5kXCI9PT1ldnQuZXJyb3I/JCRpbnZhbGlkYXRlKDIsc3RhdGU9e3Byb2dyZXNzOjEwMCx1cmw6ZXZ0LnVybCxiZzpcImRhbmdlclwiLGVycm9yOmV2dC5lcnJvcn0pOiQkaW52YWxpZGF0ZSgyLHN0YXRlPXtwcm9ncmVzczoxMDAsdXJsOmV2dC51cmwsYmc6XCJ3YXJuaW5nXCIsZXJyb3I6ZXZ0LmVycm9yfSkpfSl9KCksYXdhaXQgYXN5bmMgZnVuY3Rpb24oKXtzaW9mdS5saXN0ZW5PbklucHV0KGZpbGVGaWVsZCksc2lvZnUuYWRkRXZlbnRMaXN0ZW5lcihcInN0YXJ0XCIsZnVuY3Rpb24oZXZ0KXskJGludmFsaWRhdGUoMixzdGF0ZT17c3RyaXBlZDohMCxhbmltYXRlZDohMCxiZzpcInByaW1hcnlcIixwcm9ncmVzczowfSl9KSxzaW9mdS5hZGRFdmVudExpc3RlbmVyKFwicHJvZ3Jlc3NcIixmdW5jdGlvbihldnQpeyQkaW52YWxpZGF0ZSgyLHN0YXRlPXsuLi5zdGF0ZSxwcm9ncmVzczpldnQuYnl0ZXNMb2FkZWQvZXZ0LmZpbGUuc2l6ZSoxMDB8MH0pfSksc2lvZnUuYWRkRXZlbnRMaXN0ZW5lcihcImNvbXBsZXRlXCIsZnVuY3Rpb24oZXZ0KXskJGludmFsaWRhdGUoMixzdGF0ZT17cHJvZ3Jlc3M6MTAwLGJnOlwic3VjY2Vzc1wifSksJCRpbnZhbGlkYXRlKDMsZmlsZW5hbWU9ZXZ0LmZpbGUubmFtZSksJCRpbnZhbGlkYXRlKDQsZnVsbF9maWxlbmFtZT1ldnQuZGV0YWlsLmZ1bGxfZmlsZW5hbWUpfSksc2lvZnUuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsZnVuY3Rpb24oZXZ0KXtjb25zb2xlLmVycm9yKGV2dCksJCRpbnZhbGlkYXRlKDIsc3RhdGU9e3Byb2dyZXNzOjEwMCxiZzpcImRhbmdlclwiLGVycm9yOmV2dC5lcnJvcn0pfSl9KCl9KTtyZXR1cm4gJCRzZWxmLiQkc2V0PSgkJHByb3BzPT57XCJ3aW5kb3dcImluICQkcHJvcHMmJiQkaW52YWxpZGF0ZSg2LHdpbmRvdz0kJHByb3BzLndpbmRvdyksXCJhcmdzXCJpbiAkJHByb3BzJiYkJGludmFsaWRhdGUoMCxhcmdzPSQkcHJvcHMuYXJncyl9KSxbYXJncyxmaWxlRmllbGQsc3RhdGUsZmlsZW5hbWUsZnVsbF9maWxlbmFtZSxsb2FkX2ZpbGUsd2luZG93LGZ1bmN0aW9uKCQkdmFsdWUpe2JpbmRpbmdfY2FsbGJhY2tzWyQkdmFsdWU/XCJ1bnNoaWZ0XCI6XCJwdXNoXCJdKCgpPT57JCRpbnZhbGlkYXRlKDEsZmlsZUZpZWxkPSQkdmFsdWUpfSl9LGZ1bmN0aW9uKCl7ZnVsbF9maWxlbmFtZT10aGlzLnZhbHVlLCQkaW52YWxpZGF0ZSg0LGZ1bGxfZmlsZW5hbWUpfSxleGFtcGxlX25hbWU9PmxvYWRfZmlsZShhcmdzLm5hbWUsYXJncy5leGFtcGxlc1tleGFtcGxlX25hbWVdLGV4YW1wbGVfbmFtZSldfXZhciBfJEZpbGVGaWVsZF8zPWNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50e2NvbnN0cnVjdG9yKG9wdGlvbnMpe3ZhciBzdHlsZTtzdXBlcigpLGRvY3VtZW50XzEuZ2V0RWxlbWVudEJ5SWQoXCJzdmVsdGUtN3QzYXE0LXN0eWxlXCIpfHwoKHN0eWxlPWVsZW1lbnQoXCJzdHlsZVwiKSkuaWQ9XCJzdmVsdGUtN3QzYXE0LXN0eWxlXCIsc3R5bGUudGV4dENvbnRlbnQ9XCIucHJvZ3Jlc3Muc3ZlbHRlLTd0M2FxNHtoZWlnaHQ6MjVweDt3aWR0aDoxMDAlO2JhY2tncm91bmQtY29sb3I6Z3JleX0ucHJvZ3Jlc3MtYmFyLnN2ZWx0ZS03dDNhcTR7aGVpZ2h0OjEwMCU7YmFja2dyb3VuZC1jb2xvcjpibHVlfS5wcm9ncmVzcy1iYXIuYmctc3VjY2Vzcy5zdmVsdGUtN3QzYXE0e2hlaWdodDoxMDAlO2JhY2tncm91bmQtY29sb3I6Z3JlZW59XCIsYXBwZW5kKGRvY3VtZW50XzEuaGVhZCxzdHlsZSkpLGluaXQodGhpcyxvcHRpb25zLGluc3RhbmNlLGNyZWF0ZV9mcmFnbWVudCxzYWZlX25vdF9lcXVhbCx7d2luZG93OjYsYXJnczowfSl9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtacGJHVkdhV1ZzWkM1emRtVnNkR1VpWFN3aWJtRnRaWE1pT2xzaWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJbTl3WjBKQmF5dENRVUVzYVVKQlFVRkRMRU5CUVVGQkxHTkJRVUZCTEdWQlFVRkJMRU5CUVVGQkxGZEJRVUZCTEVOQlFVRkJMRTlCUVVGQkxFTkJRVUZCTEVOQlFVRkJMRWxCUVVGQkxFdEJRVUZCTEVOQlFVRkJMRXRCUVVGQkxFVkJRVUZCTEVOQlFVRkJMRlZCUVVGQkxFTkJRVUZCTEdOQlFVRkJMRU5CUVVGQkxIRkNRVUZCUVN4RFFVRkJRU3hIUVVGQlFTeERRVUZCUVN4TFFVRkJRU3hEUVVGQlFTeFBRVUZCUVN4RFFVRkJRU3hQUVVGQlFTeERRVUZCUVN4RlFVRkJRU3hGUVVGQlFTeERRVUZCUVN4eFFrRkJRVUVzUTBGQlFVRXNTMEZCUVVFc1EwRkJRVUVzVjBGQlFVRXNRMEZCUVVFc0swMUJRVUZCTEVOQlFVRkJMRTFCUVVGQkxFTkJRVUZCTEZWQlFVRkJMRU5CUVVGQkxFbEJRVUZCTEVOQlFVRkJMRXRCUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFbEJRVUZCTEVOQlFVRkJMRWxCUVVGQkxFTkJRVUZCTEU5QlFVRkJMRU5CUVVGQkxGRkJRVUZCTEVOQlFVRkJMR1ZCUVVGQkxFTkJRVUZCTEdOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEUxQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRWxCUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2x0dWRXeHNYWDA9Il19