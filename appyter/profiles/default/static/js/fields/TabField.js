!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;((t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).TabField||(t.TabField={})).svelte=e()}}((function(){var e={};(function(t){"use strict";function n(){}Object.defineProperty(e,"__esModule",{value:!0});function o(e){return e()}function l(){return Object.create(null)}function r(e){e.forEach(o)}function a(e){return"function"==typeof e}function c(e){return 0===Object.keys(e).length}const i="undefined"!=typeof window;e.raf=i?e=>requestAnimationFrame(e):n;new Set;function s(e,t){e.appendChild(t)}function u(e,t,n){e.insertBefore(t,n||null)}function f(e){e.parentNode.removeChild(e)}function d(e){return document.createElement(e)}function p(e){return document.createTextNode(e)}function h(e,t,n,o){return e.addEventListener(t,n,o),()=>e.removeEventListener(t,n,o)}function g(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function m(e){return Array.from(e.childNodes)}new Set;function y(t){e.current_component=t}const _=[],b=[],$=[],v=[],w=Promise.resolve();let k=!1;function x(){k||(k=!0,w.then(T))}function j(e){$.push(e)}let M=!1;const S=new Set;function T(){if(!M){M=!0;do{for(let e=0;e<_.length;e+=1){const t=_[e];y(t),E(t.$$)}for(_.length=0;b.length;)b.pop()();for(let e=0;e<$.length;e+=1){const t=$[e];S.has(t)||(S.add(t),t())}$.length=0}while(_.length);for(;v.length;)v.pop()();k=!1,M=!1,S.clear()}}function E(e){if(null!==e.fragment){e.update(),r(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(j)}}const q=new Set;let O;function L(){O={r:0,c:[],p:O}}function A(){O.r||r(O.c),O=O.p}function C(e,t){e&&e.i&&(q.delete(e),e.i(t))}function H(e,t,n,o){if(e&&e.o){if(q.has(e))return;q.add(e),O.c.push(()=>{q.delete(e),o&&(n&&e.d(1),o())}),e.o(t)}}"undefined"!=typeof window?window:"undefined"!=typeof globalThis&&globalThis;function F(e,t){H(e,1,1,()=>{t.delete(e.key)})}new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);function N(e,t,n){const{fragment:l,on_mount:c,on_destroy:i,after_update:s}=e.$$;l&&l.m(t,n),j(()=>{const t=c.map(o).filter(a);i?i.push(...t):r(t),e.$$.on_mount=[]}),s.forEach(j)}function B(e,t){const n=e.$$;null!==n.fragment&&(r(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}"function"==typeof HTMLElement&&HTMLElement;class P{$destroy(){B(this,1),this.$destroy=n}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){this.$$set&&!c(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}e.SvelteComponent=P,e.append=s,e.attr=g,e.binding_callbacks=b,e.check_outros=A,e.create_component=function(e){e&&e.c()},e.destroy_component=B,e.destroy_each=function(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)},e.detach=f,e.element=d,e.empty=function(){return p("")},e.group_outros=L,e.init=function(t,o,a,c,i,s,u=[-1]){const d=e.current_component;y(t);const p=o.props||{},h=t.$$={fragment:null,ctx:null,props:s,update:n,not_equal:i,bound:l(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(d?d.$$.context:[]),callbacks:l(),dirty:u,skip_bound:!1};let g=!1;if(h.ctx=a?a(t,p,(e,n,...o)=>{const l=o.length?o[0]:n;return h.ctx&&i(h.ctx[e],h.ctx[e]=l)&&(!h.skip_bound&&h.bound[e]&&h.bound[e](l),g&&function(e,t){-1===e.$$.dirty[0]&&(_.push(e),x(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(t,e)),n}):[],h.update(),g=!0,r(h.before_update),h.fragment=!!c&&c(h.ctx),o.target){if(o.hydrate){const e=m(o.target);h.fragment&&h.fragment.l(e),e.forEach(f)}else h.fragment&&h.fragment.c();o.intro&&C(t.$$.fragment),N(t,o.target,o.anchor),T()}y(d)},e.insert=u,e.listen=h,e.mount_component=N,e.noop=n,e.outro_and_destroy_block=F,e.safe_not_equal=function(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e},e.set_data=function(e,t){t=""+t,e.wholeText!==t&&(e.data=t)},e.space=function(){return p(" ")},e.text=p,e.transition_in=C,e.transition_out=H,e.update_keyed_each=function(e,t,n,o,l,r,a,c,i,s,u,f){let d=e.length,p=r.length,h=d;const g={};for(;h--;)g[e[h].key]=h;const m=[],y=new Map,_=new Map;for(h=p;h--;){const e=f(l,r,h),c=n(e);let i=a.get(c);i?o&&i.p(e,t):(i=s(c,e)).c(),y.set(c,m[h]=i),c in g&&_.set(c,Math.abs(h-g[c]))}const b=new Set,$=new Set;function v(e){C(e,1),e.m(c,u),a.set(e.key,e),u=e.first,p--}for(;d&&p;){const t=m[p-1],n=e[d-1],o=t.key,l=n.key;t===n?(u=t.first,d--,p--):y.has(l)?!a.has(o)||b.has(o)?v(t):$.has(l)?d--:_.get(o)>_.get(l)?($.add(o),v(t)):(b.add(l),d--):(i(n,a),d--)}for(;d--;){const t=e[d];y.has(t.key)||i(t,a)}for(;p;)v(m[p-1]);return m}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});const{SvelteComponent:t,attr:n,binding_callbacks:o,detach:l,element:r,init:a,insert:c,noop:i,safe_not_equal:s}=e;function u(e){let t;return{c(){t=r("div"),n(t,"class",e[0])},m(n,o){c(n,t,o),t.innerHTML=e[1],e[3](t)},p(e,[o]){2&o&&(t.innerHTML=e[1]),1&o&&n(t,"class",e[0])},i:i,o:i,d(n){n&&l(t),e[3](null)}}}function f(e,t,n){let l,{classes:r=""}=t,{data:a=""}=t,c={};return e.$$set=e=>{"classes"in e&&n(0,r=e.classes),"data"in e&&n(1,a=e.data)},e.$$.update=()=>{4&e.$$.dirty&&l&&l.querySelectorAll("script").forEach(e=>function(e){if(void 0===c[e]){c[e]=!0;try{new Function(e)()}catch(t){console.error(t)}}}(e.innerHTML))},[r,a,l,function(e){o[e?"unshift":"push"](()=>{n(2,l=e)})}]}var d=class extends t{constructor(e){super(),a(this,e,f,u,s,{classes:0,data:1})}};const{SvelteComponent:p,append:h,attr:g,check_outros:m,create_component:y,destroy_component:_,destroy_each:b,detach:$,element:v,empty:w,group_outros:k,init:x,insert:j,listen:M,mount_component:S,outro_and_destroy_block:T,safe_not_equal:E,set_data:q,space:O,text:L,transition_in:A,transition_out:C,update_keyed_each:H}=e;function F(e,t,n){const o=e.slice();return o[5]=t[n],o}function N(e,t,n){const o=e.slice();return o[2]=t[n],o}function B(e,t,n){const o=e.slice();return o[2]=t[n],o}function P(e){let t,n,o,l;return{c(){t=v("sup"),n=v("i"),l=O(),g(n,"class","far fa-question-circle ml-1"),g(n,"data-toggle","tooltip"),g(n,"title",""),g(n,"data-original-title",o=e[0].description)},m(e,o){j(e,t,o),h(t,n),j(e,l,o)},p(e,t){1&t&&o!==(o=e[0].description)&&g(n,"data-original-title",o)},d(e){e&&$(t),e&&$(l)}}}function z(e){let t,n,o,l,r,a,c,i=e[2]+"";function s(...t){return e[1](e[2],...t)}return{c(){t=v("a"),n=L(i),o=O(),g(t,"href","javascript:"),g(t,"class",l="nav-link"+(e[0].value==e[2]?" active":"")),g(t,"aria-controls",r="tab-content-"+e[0].name+"-"+e[2]),g(t,"data-toggle","tab"),g(t,"role","tab")},m(e,l){j(e,t,l),h(t,n),h(t,o),a||(c=M(t,"click",s),a=!0)},p(o,a){e=o,1&a&&i!==(i=e[2]+"")&&q(n,i),1&a&&l!==(l="nav-link"+(e[0].value==e[2]?" active":""))&&g(t,"class",l),1&a&&r!==(r="tab-content-"+e[0].name+"-"+e[2])&&g(t,"aria-controls",r)},d(e){e&&$(t),a=!1,c()}}}function D(e,t){let n,o,l;return o=new d({props:{data:t[0].field_renders[t[5].args.name]}}),{key:e,first:null,c(){n=w(),y(o.$$.fragment),this.first=n},m(e,t){j(e,n,t),S(o,e,t),l=!0},p(e,t){const n={};1&t&&(n.data=e[0].field_renders[e[5].args.name]),o.$set(n)},i(e){l||(A(o.$$.fragment,e),l=!0)},o(e){C(o.$$.fragment,e),l=!1},d(e){e&&$(n),_(o,e)}}}function G(e){let t,n,o,l,r=[],a=new Map,c=e[0].choices[e[2]];const i=e=>e[5].args.name;for(let s=0;s<c.length;s+=1){let t=F(e,c,s),n=i(t);a.set(n,r[s]=D(n,t))}return{c(){t=v("div");for(let e=0;e<r.length;e+=1)r[e].c();n=O(),g(t,"class",o="tab-pane fade"+(e[0].value==e[2]?" show active":"")),g(t,"role","tabpanel")},m(e,o){j(e,t,o);for(let n=0;n<r.length;n+=1)r[n].m(t,null);h(t,n),l=!0},p(e,c){if(1&c){const o=e[0].choices[e[2]];k(),r=H(r,c,i,1,e,o,a,t,T,D,n,F),m()}(!l||1&c&&o!==(o="tab-pane fade"+(e[0].value==e[2]?" show active":"")))&&g(t,"class",o)},i(e){if(!l){for(let e=0;e<c.length;e+=1)A(r[e]);l=!0}},o(e){for(let t=0;t<r.length;t+=1)C(r[t]);l=!1},d(e){e&&$(t);for(let t=0;t<r.length;t+=1)r[t].d()}}}function I(e){let t,n,o,l,r,a,c,i,s,u,f,d,p,y,_,w,x=e[0].label+"",M=e[0].description&&P(e),S=Object.keys(e[0].choices),T=[];for(let h=0;h<S.length;h+=1)T[h]=z(B(e,S,h));let E=Object.keys(e[0].choices),H=[];for(let h=0;h<E.length;h+=1)H[h]=G(N(e,E,h));const F=e=>C(H[e],1,1,()=>{H[e]=null});return{c(){t=v("div"),n=v("div"),o=L(x),l=O(),M&&M.c(),r=L(":"),a=O(),c=v("div"),i=v("div");for(let e=0;e<T.length;e+=1)T[e].c();s=O(),u=v("div"),f=v("div");for(let e=0;e<H.length;e+=1)H[e].c();d=O(),p=v("input"),g(n,"class","col-lg-2 bold text-lg-right my-auto"),g(i,"class","nav flex-column nav-pills nav-justified"),g(i,"aria-orientation","vertical"),g(i,"role","tablist"),g(c,"class","col-lg-2 pt-2 pt-lg-0"),g(f,"class","tab-content"),g(u,"class","col-lg-8 pt-2 pt-lg-0"),g(p,"type","text"),g(p,"class","hidden"),g(p,"name",y=e[0].name),p.value=_=e[0].value,g(t,"class","row px-4 px-lg-3 pb-4")},m(e,g){j(e,t,g),h(t,n),h(n,o),h(n,l),M&&M.m(n,null),h(n,r),h(t,a),h(t,c),h(c,i);for(let t=0;t<T.length;t+=1)T[t].m(i,null);h(t,s),h(t,u),h(u,f);for(let t=0;t<H.length;t+=1)H[t].m(f,null);h(t,d),h(t,p),w=!0},p(e,[t]){if((!w||1&t)&&x!==(x=e[0].label+"")&&q(o,x),e[0].description?M?M.p(e,t):((M=P(e)).c(),M.m(n,r)):M&&(M.d(1),M=null),1&t){let n;for(S=Object.keys(e[0].choices),n=0;n<S.length;n+=1){const o=B(e,S,n);T[n]?T[n].p(o,t):(T[n]=z(o),T[n].c(),T[n].m(i,null))}for(;n<T.length;n+=1)T[n].d(1);T.length=S.length}if(1&t){let n;for(E=Object.keys(e[0].choices),n=0;n<E.length;n+=1){const o=N(e,E,n);H[n]?(H[n].p(o,t),A(H[n],1)):(H[n]=G(o),H[n].c(),A(H[n],1),H[n].m(f,null))}for(k(),n=E.length;n<H.length;n+=1)F(n);m()}(!w||1&t&&y!==(y=e[0].name))&&g(p,"name",y),(!w||1&t&&_!==(_=e[0].value)&&p.value!==_)&&(p.value=_)},i(e){if(!w){for(let e=0;e<E.length;e+=1)A(H[e]);w=!0}},o(e){H=H.filter(Boolean);for(let t=0;t<H.length;t+=1)C(H[t]);w=!1},d(e){e&&$(t),M&&M.d(),b(T,e),b(H,e)}}}function J(e,t,n){let{args:o}=t;return e.$$set=e=>{"args"in e&&n(0,o=e.args)},[o,e=>n(0,o.value=e,o)]}return class extends p{constructor(e){super(),x(this,e,J,I,E,{args:0})}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2stZmxhdC9fcHJlbHVkZSIsIm5vZGVfbW9kdWxlcy9zdmVsdGUvaW50ZXJuYWwvaW5kZXguanMiLCJjb21wb25lbnRzL0hUTUwuc3ZlbHRlIiwicHJvZmlsZXMvZGVmYXVsdC9zdGF0aWMvanMvZmllbGRzL1RhYkZpZWxkLnN2ZWx0ZSJdLCJuYW1lcyI6WyJmIiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImciLCJ3aW5kb3ciLCJnbG9iYWwiLCJzZWxmIiwidGhpcyIsIlRhYkZpZWxkIiwic3ZlbHRlIiwiXyRpbnRlcm5hbF8yIiwibm9vcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJydW4iLCJmbiIsImJsYW5rX29iamVjdCIsImNyZWF0ZSIsInJ1bl9hbGwiLCJmbnMiLCJmb3JFYWNoIiwiaXNfZnVuY3Rpb24iLCJ0aGluZyIsImlzX2VtcHR5Iiwib2JqIiwia2V5cyIsImxlbmd0aCIsImlzX2NsaWVudCIsInJhZiIsImNiIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiU2V0IiwiYXBwZW5kIiwidGFyZ2V0Iiwibm9kZSIsImFwcGVuZENoaWxkIiwiaW5zZXJ0IiwiYW5jaG9yIiwiaW5zZXJ0QmVmb3JlIiwiZGV0YWNoIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZWxlbWVudCIsIm5hbWUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiZGF0YSIsImNyZWF0ZVRleHROb2RlIiwibGlzdGVuIiwiZXZlbnQiLCJoYW5kbGVyIiwib3B0aW9ucyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYXR0ciIsImF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImNoaWxkcmVuIiwiQXJyYXkiLCJmcm9tIiwiY2hpbGROb2RlcyIsInNldF9jdXJyZW50X2NvbXBvbmVudCIsImNvbXBvbmVudCIsImN1cnJlbnRfY29tcG9uZW50IiwiZGlydHlfY29tcG9uZW50cyIsImJpbmRpbmdfY2FsbGJhY2tzIiwicmVuZGVyX2NhbGxiYWNrcyIsImZsdXNoX2NhbGxiYWNrcyIsInJlc29sdmVkX3Byb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInVwZGF0ZV9zY2hlZHVsZWQiLCJzY2hlZHVsZV91cGRhdGUiLCJ0aGVuIiwiZmx1c2giLCJhZGRfcmVuZGVyX2NhbGxiYWNrIiwicHVzaCIsImZsdXNoaW5nIiwic2Vlbl9jYWxsYmFja3MiLCJpIiwidXBkYXRlIiwiJCQiLCJwb3AiLCJjYWxsYmFjayIsImhhcyIsImFkZCIsImNsZWFyIiwiZnJhZ21lbnQiLCJiZWZvcmVfdXBkYXRlIiwiZGlydHkiLCJwIiwiY3R4IiwiYWZ0ZXJfdXBkYXRlIiwib3V0cm9pbmciLCJvdXRyb3MiLCJncm91cF9vdXRyb3MiLCJyIiwiYyIsImNoZWNrX291dHJvcyIsInRyYW5zaXRpb25faW4iLCJibG9jayIsImxvY2FsIiwiZGVsZXRlIiwidHJhbnNpdGlvbl9vdXQiLCJvIiwiZCIsImdsb2JhbFRoaXMiLCJvdXRyb19hbmRfZGVzdHJveV9ibG9jayIsImxvb2t1cCIsImtleSIsIm1vdW50X2NvbXBvbmVudCIsIm9uX21vdW50Iiwib25fZGVzdHJveSIsIm0iLCJuZXdfb25fZGVzdHJveSIsIm1hcCIsImZpbHRlciIsImRlc3Ryb3lfY29tcG9uZW50IiwiZGV0YWNoaW5nIiwiSFRNTEVsZW1lbnQiLCJTdmVsdGVDb21wb25lbnQiLCJbb2JqZWN0IE9iamVjdF0iLCIkZGVzdHJveSIsInR5cGUiLCJjYWxsYmFja3MiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCIkJHByb3BzIiwiJCRzZXQiLCJza2lwX2JvdW5kIiwiY3JlYXRlX2NvbXBvbmVudCIsImRlc3Ryb3lfZWFjaCIsIml0ZXJhdGlvbnMiLCJlbXB0eSIsImluaXQiLCJpbnN0YW5jZSIsImNyZWF0ZV9mcmFnbWVudCIsIm5vdF9lcXVhbCIsInByb3BzIiwicGFyZW50X2NvbXBvbmVudCIsInByb3BfdmFsdWVzIiwiYm91bmQiLCJjb250ZXh0IiwiTWFwIiwicmVhZHkiLCJyZXQiLCJyZXN0IiwiZmlsbCIsImh5ZHJhdGUiLCJub2RlcyIsImwiLCJpbnRybyIsInNhZmVfbm90X2VxdWFsIiwiYSIsImIiLCJzZXRfZGF0YSIsIndob2xlVGV4dCIsInNwYWNlIiwidXBkYXRlX2tleWVkX2VhY2giLCJvbGRfYmxvY2tzIiwiZ2V0X2tleSIsImR5bmFtaWMiLCJsaXN0IiwiZGVzdHJveSIsImNyZWF0ZV9lYWNoX2Jsb2NrIiwibmV4dCIsImdldF9jb250ZXh0IiwibiIsIm9sZF9pbmRleGVzIiwibmV3X2Jsb2NrcyIsIm5ld19sb29rdXAiLCJkZWx0YXMiLCJjaGlsZF9jdHgiLCJnZXQiLCJzZXQiLCJNYXRoIiwiYWJzIiwid2lsbF9tb3ZlIiwiZGlkX21vdmUiLCJmaXJzdCIsIm5ld19ibG9jayIsIm9sZF9ibG9jayIsIm5ld19rZXkiLCJvbGRfa2V5IiwiZGl2IiwiaW5uZXJIVE1MIiwiJCRzZWxmIiwiJCRpbnZhbGlkYXRlIiwicmVmIiwiY2xhc3NlcyIsImV2YWxlZCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlbCIsInNyYyIsIkZ1bmN0aW9uIiwiZSIsImNvbnNvbGUiLCJlcnJvciIsIiQkdmFsdWUiLCJfJEhUTUxfMSIsInN1cGVyIiwiX19TdmVsdGVDb21wb25lbnRfMyIsIl9fYXR0cl8zIiwiX19kZXRhY2hfMyIsIl9fZWxlbWVudF8zIiwiX19pbml0XzMiLCJfX2luc2VydF8zIiwiX19zYWZlX25vdF9lcXVhbF8zIiwiZ2V0X2VhY2hfY29udGV4dF8xIiwic2xpY2UiLCJnZXRfZWFjaF9jb250ZXh0IiwiZ2V0X2VhY2hfY29udGV4dF8yIiwiY3JlYXRlX2lmX2Jsb2NrIiwic3VwIiwiaV9kYXRhX29yaWdpbmFsX3RpdGxlX3ZhbHVlIiwidCIsImRlc2NyaXB0aW9uIiwiY3JlYXRlX2VhY2hfYmxvY2tfMiIsInQwIiwidDEiLCJhX2NsYXNzX3ZhbHVlIiwiYV9hcmlhX2NvbnRyb2xzX3ZhbHVlIiwibW91bnRlZCIsImRpc3Bvc2UiLCJ0MF92YWx1ZSIsImNsaWNrX2hhbmRsZXIiLCJhcmdzIiwibmV3X2N0eCIsImNyZWF0ZV9lYWNoX2Jsb2NrXzEiLCJrZXlfMSIsImh0bWwiLCJjdXJyZW50IiwiZmllbGRfcmVuZGVycyIsImh0bWxfY2hhbmdlcyIsIiRzZXQiLCJkaXZfY2xhc3NfdmFsdWUiLCJlYWNoX2Jsb2NrcyIsImVhY2hfMV9sb29rdXAiLCJlYWNoX3ZhbHVlXzEiLCJjaG9pY2VzIiwiX19jcmVhdGVfZnJhZ21lbnRfMyIsImRpdjUiLCJkaXYwIiwidDIiLCJ0MyIsImRpdjIiLCJkaXYxIiwidDQiLCJkaXY0IiwiZGl2MyIsInQ1IiwiaW5wdXQiLCJpbnB1dF9uYW1lX3ZhbHVlIiwiaW5wdXRfdmFsdWVfdmFsdWUiLCJsYWJlbCIsImlmX2Jsb2NrIiwiZWFjaF92YWx1ZV8yIiwiZWFjaF9ibG9ja3NfMSIsImVhY2hfdmFsdWUiLCJvdXQiLCJCb29sZWFuIiwiX19pbnN0YW5jZV8zIiwiY2hvaWNlX25hbWUiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEdBQUEsR0FBQSxpQkFBQUMsU0FBQSxvQkFBQUMsT0FBQUEsT0FBQUQsUUFBQUQsU0FBQSxHQUFBLG1CQUFBRyxRQUFBQSxPQUFBQyxJQUFBRCxPQUFBLEdBQUFILE9BQUEsQ0FBQSxJQUFBSyxJQUFBQSxFQUFBLG9CQUFBQyxPQUFBQSxPQUFBLG9CQUFBQyxPQUFBQSxPQUFBLG9CQUFBQyxLQUFBQSxLQUFBQyxNQUFBQyxXQUFBTCxFQUFBSyxTQUFBLEtBQUFDLE9BQUFYLEtBQUEsRUFBQSxXQUFBLElBQ0FZLEVBQUEsZ0JDREEsYUFJQSxTQUFTQyxLQUZUQyxPQUFPQyxlQUFlSCxFQUFTLGFBQWMsQ0FBRUksT0FBQSxJQWtCL0MsU0FBU0MsRUFBSUMsR0FDVCxPQUFPQSxJQUVYLFNBQVNDLElBQ0wsT0FBT0wsT0FBT00sT0FBTyxNQUV6QixTQUFTQyxFQUFRQyxHQUNiQSxFQUFJQyxRQUFRTixHQUVoQixTQUFTTyxFQUFZQyxHQUNqQixNQUF3QixtQkFBVkEsRUFRbEIsU0FBU0MsRUFBU0MsR0FDZCxPQUFtQyxJQUE1QmIsT0FBT2MsS0FBS0QsR0FBS0UsT0F5RjVCLE1BS01DLEVBQThCLG9CQUFYeEIsT0FJekJNLEVBQVFtQixJQUFNRCxFQUFZRSxHQUFNQyxzQkFBc0JELEdBQU1uQixFQVM5QyxJQUFJcUIsSUFtQ2xCLFNBQVNDLEVBQU9DLEVBQVFDLEdBQ3BCRCxFQUFPRSxZQUFZRCxHQUV2QixTQUFTRSxFQUFPSCxFQUFRQyxFQUFNRyxHQUMxQkosRUFBT0ssYUFBYUosRUFBTUcsR0FBVSxNQUV4QyxTQUFTRSxFQUFPTCxHQUNaQSxFQUFLTSxXQUFXQyxZQUFZUCxHQVFoQyxTQUFTUSxFQUFRQyxHQUNiLE9BQU9DLFNBQVNDLGNBQWNGLEdBb0JsQyxTQUFTRyxFQUFLQyxHQUNWLE9BQU9ILFNBQVNJLGVBQWVELEdBUW5DLFNBQVNFLEVBQU9mLEVBQU1nQixFQUFPQyxFQUFTQyxHQUVsQyxPQURBbEIsRUFBS21CLGlCQUFpQkgsRUFBT0MsRUFBU0MsR0FDL0IsSUFBTWxCLEVBQUtvQixvQkFBb0JKLEVBQU9DLEVBQVNDLEdBdUIxRCxTQUFTRyxFQUFLckIsRUFBTXNCLEVBQVczQyxHQUNkLE1BQVRBLEVBQ0FxQixFQUFLdUIsZ0JBQWdCRCxHQUNoQnRCLEVBQUt3QixhQUFhRixLQUFlM0MsR0FDdENxQixFQUFLeUIsYUFBYUgsRUFBVzNDLEdBNERyQyxTQUFTK0MsRUFBU2xCLEdBQ2QsT0FBT21CLE1BQU1DLEtBQUtwQixFQUFRcUIsWUE2S1YsSUFBSWhDLElBa0l4QixTQUFTaUMsRUFBc0JDLEdBQzNCeEQsRUFBUXlELGtCQUFvQkQsRUFpRGhDLE1BQU1FLEVBQW1CLEdBRW5CQyxFQUFvQixHQUNwQkMsRUFBbUIsR0FDbkJDLEVBQWtCLEdBQ2xCQyxFQUFtQkMsUUFBUUMsVUFDakMsSUFBSUMsR0FBQSxFQUNKLFNBQVNDLElBQ0FELElBQ0RBLEdBQUEsRUFDQUgsRUFBaUJLLEtBQUtDLElBTzlCLFNBQVNDLEVBQW9CL0QsR0FDekJzRCxFQUFpQlUsS0FBS2hFLEdBSzFCLElBQUlpRSxHQUFBLEVBQ0osTUFBTUMsRUFBaUIsSUFBSWxELElBQzNCLFNBQVM4QyxJQUNMLElBQUlHLEVBQUosQ0FFQUEsR0FBQSxFQUNBLEVBQUcsQ0FHQyxJQUFLLElBQUlFLEVBQUksRUFBR0EsRUFBSWYsRUFBaUJ6QyxPQUFRd0QsR0FBSyxFQUFHLENBQ2pELE1BQU1qQixFQUFZRSxFQUFpQmUsR0FDbkNsQixFQUFzQkMsR0FDdEJrQixFQUFPbEIsRUFBVW1CLElBR3JCLElBREFqQixFQUFpQnpDLE9BQVMsRUFDbkIwQyxFQUFrQjFDLFFBQ3JCMEMsRUFBa0JpQixLQUFsQmpCLEdBSUosSUFBSyxJQUFJYyxFQUFJLEVBQUdBLEVBQUliLEVBQWlCM0MsT0FBUXdELEdBQUssRUFBRyxDQUNqRCxNQUFNSSxFQUFXakIsRUFBaUJhLEdBQzdCRCxFQUFlTSxJQUFJRCxLQUVwQkwsRUFBZU8sSUFBSUYsR0FDbkJBLEtBR1JqQixFQUFpQjNDLE9BQVMsUUFDckJ5QyxFQUFpQnpDLFFBQzFCLEtBQU80QyxFQUFnQjVDLFFBQ25CNEMsRUFBZ0JlLEtBQWhCZixHQUVKSSxHQUFBLEVBQ0FNLEdBQUEsRUFDQUMsRUFBZVEsU0FFbkIsU0FBU04sRUFBT0MsR0FDWixHQUFvQixPQUFoQkEsRUFBR00sU0FBbUIsQ0FDdEJOLEVBQUdELFNBQ0hqRSxFQUFRa0UsRUFBR08sZUFDWCxNQUFNQyxFQUFRUixFQUFHUSxNQUNqQlIsRUFBR1EsTUFBUSxFQUFFLEdBQ2JSLEVBQUdNLFVBQVlOLEVBQUdNLFNBQVNHLEVBQUVULEVBQUdVLElBQUtGLEdBQ3JDUixFQUFHVyxhQUFhM0UsUUFBUTBELElBaUJoQyxNQUFNa0IsRUFBVyxJQUFJakUsSUFDckIsSUFBSWtFLEVBQ0osU0FBU0MsSUFDTEQsRUFBUyxDQUNMRSxFQUFHLEVBQ0hDLEVBQUcsR0FDSFAsRUFBR0ksR0FHWCxTQUFTSSxJQUNBSixFQUFPRSxHQUNSakYsRUFBUStFLEVBQU9HLEdBRW5CSCxFQUFTQSxFQUFPSixFQUVwQixTQUFTUyxFQUFjQyxFQUFPQyxHQUN0QkQsR0FBU0EsRUFBTXJCLElBQ2ZjLEVBQVNTLE9BQU9GLEdBQ2hCQSxFQUFNckIsRUFBRXNCLElBR2hCLFNBQVNFLEVBQWVILEVBQU9DLEVBQU9qRSxFQUFRK0MsR0FDMUMsR0FBSWlCLEdBQVNBLEVBQU1JLEVBQUcsQ0FDbEIsR0FBSVgsRUFBU1QsSUFBSWdCLEdBQ2IsT0FDSlAsRUFBU1IsSUFBSWUsR0FDYk4sRUFBT0csRUFBRXJCLEtBQUssS0FDVmlCLEVBQVNTLE9BQU9GLEdBQ1pqQixJQUNJL0MsR0FDQWdFLEVBQU1LLEVBQUUsR0FDWnRCLE9BR1JpQixFQUFNSSxFQUFFSCxJQXNTbUIsb0JBQVhyRyxPQUNsQkEsT0FDc0Isb0JBQWYwRyxZQUNIQSxXQU9WLFNBQVNDLEVBQXdCUCxFQUFPUSxHQUNwQ0wsRUFBZUgsRUFBTyxFQUFHLEVBQUcsS0FDeEJRLEVBQU9OLE9BQU9GLEVBQU1TLE9BdUlELElBQUlqRixJQUFJLENBQy9CLGtCQUNBLHNCQUNBLFFBQ0EsWUFDQSxXQUNBLFVBQ0EsV0FDQSxVQUNBLFFBQ0EsV0FDQSxpQkFDQSxTQUNBLFFBQ0EsT0FDQSxXQUNBLFFBQ0EsV0FDQSxhQUNBLE9BQ0EsY0FDQSxXQUNBLFdBQ0EsV0FDQSxhQTRISixTQUFTa0YsRUFBZ0JoRCxFQUFXaEMsRUFBUUksR0FDeEMsTUFBTXFELFNBQUVBLEVBQUZ3QixTQUFZQSxFQUFaQyxXQUFzQkEsRUFBdEJwQixhQUFrQ0EsR0FBaUI5QixFQUFVbUIsR0FDbkVNLEdBQVlBLEVBQVMwQixFQUFFbkYsRUFBUUksR0FFL0J5QyxFQUFvQixLQUNoQixNQUFNdUMsRUFBaUJILEVBQVNJLElBQUl4RyxHQUFLeUcsT0FBT2xHLEdBQzVDOEYsRUFDQUEsRUFBV3BDLFFBQVFzQyxHQUtuQm5HLEVBQVFtRyxHQUVacEQsRUFBVW1CLEdBQUc4QixTQUFXLEtBRTVCbkIsRUFBYTNFLFFBQVEwRCxHQUV6QixTQUFTMEMsRUFBa0J2RCxFQUFXd0QsR0FDbEMsTUFBTXJDLEVBQUtuQixFQUFVbUIsR0FDRCxPQUFoQkEsRUFBR00sV0FDSHhFLEVBQVFrRSxFQUFHK0IsWUFDWC9CLEVBQUdNLFVBQVlOLEVBQUdNLFNBQVNrQixFQUFFYSxHQUc3QnJDLEVBQUcrQixXQUFhL0IsRUFBR00sU0FBVyxLQUM5Qk4sRUFBR1UsSUFBTSxJQXNFVSxtQkFBaEI0QixhQUMrQkEsWUFzQzFDLE1BQU1DLEVBQ0ZDLFdBQ0lKLEVBQWtCbEgsS0FBTSxHQUN4QkEsS0FBS3VILFNBQVduSCxFQUVwQmtILElBQUlFLEVBQU14QyxHQUNOLE1BQU15QyxFQUFhekgsS0FBSzhFLEdBQUcyQyxVQUFVRCxLQUFVeEgsS0FBSzhFLEdBQUcyQyxVQUFVRCxHQUFRLElBRXpFLE9BREFDLEVBQVVoRCxLQUFLTyxHQUNSLEtBQ0gsTUFBTTBDLEVBQVFELEVBQVVFLFFBQVEzQyxJQUNqQixJQUFYMEMsR0FDQUQsRUFBVUcsT0FBT0YsRUFBTyxJQUdwQ0osS0FBS08sR0FDRzdILEtBQUs4SCxRQUFVN0csRUFBUzRHLEtBQ3hCN0gsS0FBSzhFLEdBQUdpRCxZQUFBLEVBQ1IvSCxLQUFLOEgsTUFBTUQsR0FDWDdILEtBQUs4RSxHQUFHaUQsWUFBQSxJQWdIcEI1SCxFQUFRa0gsZ0JBQWtCQSxFQVcxQmxILEVBQVF1QixPQUFTQSxFQUdqQnZCLEVBQVE4QyxLQUFPQSxFQUlmOUMsRUFBUTJELGtCQUFvQkEsRUFHNUIzRCxFQUFRNEYsYUFBZUEsRUFZdkI1RixFQUFRNkgsaUJBaFRSLFNBQTBCL0IsR0FDdEJBLEdBQVNBLEVBQU1ILEtBd1RuQjNGLEVBQVErRyxrQkFBb0JBLEVBQzVCL0csRUFBUThILGFBdDlDUixTQUFzQkMsRUFBWWYsR0FDOUIsSUFBSyxJQUFJdkMsRUFBSSxFQUFHQSxFQUFJc0QsRUFBVzlHLE9BQVF3RCxHQUFLLEVBQ3BDc0QsRUFBV3RELElBQ1hzRCxFQUFXdEQsR0FBRzBCLEVBQUVhLElBbzlDNUJoSCxFQUFROEIsT0FBU0EsRUFRakI5QixFQUFRaUMsUUFBVUEsRUFFbEJqQyxFQUFRZ0ksTUFoOENSLFdBQ0ksT0FBTzNGLEVBQUssS0FnOUNoQnJDLEVBQVF5RixhQUFlQSxFQUl2QnpGLEVBQVFpSSxLQS9TUixTQUFjekUsRUFBV2IsRUFBU3VGLEVBQVVDLEVBQWlCQyxFQUFXQyxFQUFPbEQsRUFBUSxFQUFFLElBQ3JGLE1BQU1tRCxFQUFtQnRJLEVBQVF5RCxrQkFDakNGLEVBQXNCQyxHQUN0QixNQUFNK0UsRUFBYzVGLEVBQVEwRixPQUFTLEdBQy9CMUQsRUFBS25CLEVBQVVtQixHQUFLLENBQ3RCTSxTQUFVLEtBQ1ZJLElBQUssS0FFTGdELE1BQUFBLEVBQ0EzRCxPQUFRekUsRUFDUm1JLFVBQUFBLEVBQ0FJLE1BQU9qSSxJQUVQa0csU0FBVSxHQUNWQyxXQUFZLEdBQ1p4QixjQUFlLEdBQ2ZJLGFBQWMsR0FDZG1ELFFBQVMsSUFBSUMsSUFBSUosRUFBbUJBLEVBQWlCM0QsR0FBRzhELFFBQVUsSUFFbEVuQixVQUFXL0csSUFDWDRFLE1BQUFBLEVBQ0F5QyxZQUFBLEdBRUosSUFBSWUsR0FBQSxFQWtCSixHQWpCQWhFLEVBQUdVLElBQU02QyxFQUNIQSxFQUFTMUUsRUFBVytFLEVBQWEsQ0FBQzlELEVBQUdtRSxLQUFLQyxLQUN4QyxNQUFNekksRUFBUXlJLEVBQUs1SCxPQUFTNEgsRUFBSyxHQUFLRCxFQU90QyxPQU5JakUsRUFBR1UsS0FBTytDLEVBQVV6RCxFQUFHVSxJQUFJWixHQUFJRSxFQUFHVSxJQUFJWixHQUFLckUsTUFDdEN1RSxFQUFHaUQsWUFBY2pELEVBQUc2RCxNQUFNL0QsSUFDM0JFLEVBQUc2RCxNQUFNL0QsR0FBR3JFLEdBQ1p1SSxHQXRDcEIsU0FBb0JuRixFQUFXaUIsSUFDSSxJQUEzQmpCLEVBQVVtQixHQUFHUSxNQUFNLEtBQ25CekIsRUFBaUJZLEtBQUtkLEdBQ3RCVSxJQUNBVixFQUFVbUIsR0FBR1EsTUFBTTJELEtBQUssSUFFNUJ0RixFQUFVbUIsR0FBR1EsTUFBT1YsRUFBSSxHQUFNLElBQU8sR0FBTUEsRUFBSSxHQU5uRCxDQXVDK0JqQixFQUFXaUIsSUFFdkJtRSxJQUVULEdBQ05qRSxFQUFHRCxTQUNIaUUsR0FBQSxFQUNBbEksRUFBUWtFLEVBQUdPLGVBRVhQLEVBQUdNLFdBQVdrRCxHQUFrQkEsRUFBZ0J4RCxFQUFHVSxLQUMvQzFDLEVBQVFuQixPQUFRLENBQ2hCLEdBQUltQixFQUFRb0csUUFBUyxDQUNqQixNQUFNQyxFQUFRN0YsRUFBU1IsRUFBUW5CLFFBRS9CbUQsRUFBR00sVUFBWU4sRUFBR00sU0FBU2dFLEVBQUVELEdBQzdCQSxFQUFNckksUUFBUW1CLFFBSWQ2QyxFQUFHTSxVQUFZTixFQUFHTSxTQUFTVSxJQUUzQmhELEVBQVF1RyxPQUNSckQsRUFBY3JDLEVBQVVtQixHQUFHTSxVQUMvQnVCLEVBQWdCaEQsRUFBV2IsRUFBUW5CLE9BQVFtQixFQUFRZixRQUNuRHdDLElBRUpiLEVBQXNCK0UsSUF1UDFCdEksRUFBUTJCLE9BQVNBLEVBU2pCM0IsRUFBUXdDLE9BQVNBLEVBS2pCeEMsRUFBUXdHLGdCQUFrQkEsRUFDMUJ4RyxFQUFRQyxLQUFPQSxFQU9mRCxFQUFRcUcsd0JBQTBCQSxFQU1sQ3JHLEVBQVFtSixlQWpyRFIsU0FBd0JDLEVBQUdDLEdBQ3ZCLE9BQU9ELEdBQUtBLEVBQUlDLEdBQUtBLEVBQUlELElBQU1DLEdBQU9ELEdBQWtCLGlCQUFOQSxHQUFnQyxtQkFBTkEsR0EyckRoRnBKLEVBQVFzSixTQTczQ1IsU0FBa0JqSCxFQUFNQyxHQUNwQkEsRUFBTyxHQUFLQSxFQUNSRCxFQUFLa0gsWUFBY2pILElBQ25CRCxFQUFLQyxLQUFPQSxJQW00Q3BCdEMsRUFBUXdKLE1BemdEUixXQUNJLE9BQU9uSCxFQUFLLE1BNmdEaEJyQyxFQUFRcUMsS0FBT0EsRUFLZnJDLEVBQVE2RixjQUFnQkEsRUFDeEI3RixFQUFRaUcsZUFBaUJBLEVBQ3pCakcsRUFBUXlKLGtCQWpxQlIsU0FBMkJDLEVBQVl2RSxFQUFPd0UsRUFBU0MsRUFBU3ZFLEVBQUt3RSxFQUFNdkQsRUFBUTdFLEVBQU1xSSxFQUFTQyxFQUFtQkMsRUFBTUMsR0FDdkgsSUFBSS9ELEVBQUl3RCxFQUFXekksT0FDZmlKLEVBQUlMLEVBQUs1SSxPQUNUd0QsRUFBSXlCLEVBQ1IsTUFBTWlFLEVBQWMsR0FDcEIsS0FBTzFGLEtBQ0gwRixFQUFZVCxFQUFXakYsR0FBRzhCLEtBQU85QixFQUNyQyxNQUFNMkYsRUFBYSxHQUNiQyxFQUFhLElBQUkzQixJQUNqQjRCLEVBQVMsSUFBSTVCLElBRW5CLElBREFqRSxFQUFJeUYsRUFDR3pGLEtBQUssQ0FDUixNQUFNOEYsRUFBWU4sRUFBWTVFLEVBQUt3RSxFQUFNcEYsR0FDbkM4QixFQUFNb0QsRUFBUVksR0FDcEIsSUFBSXpFLEVBQVFRLEVBQU9rRSxJQUFJakUsR0FDbEJULEVBSUk4RCxHQUNMOUQsRUFBTVYsRUFBRW1GLEVBQVdwRixJQUpuQlcsRUFBUWlFLEVBQWtCeEQsRUFBS2dFLElBQ3pCNUUsSUFLVjBFLEVBQVdJLElBQUlsRSxFQUFLNkQsRUFBVzNGLEdBQUtxQixHQUNoQ1MsS0FBTzRELEdBQ1BHLEVBQU9HLElBQUlsRSxFQUFLbUUsS0FBS0MsSUFBSWxHLEVBQUkwRixFQUFZNUQsS0FFakQsTUFBTXFFLEVBQVksSUFBSXRKLElBQ2hCdUosRUFBVyxJQUFJdkosSUFDckIsU0FBU0ssRUFBT21FLEdBQ1pELEVBQWNDLEVBQU8sR0FDckJBLEVBQU1hLEVBQUVsRixFQUFNdUksR0FDZDFELEVBQU9tRSxJQUFJM0UsRUFBTVMsSUFBS1QsR0FDdEJrRSxFQUFPbEUsRUFBTWdGLE1BQ2JaLElBRUosS0FBT2hFLEdBQUtnRSxHQUFHLENBQ1gsTUFBTWEsRUFBWVgsRUFBV0YsRUFBSSxHQUMzQmMsRUFBWXRCLEVBQVd4RCxFQUFJLEdBQzNCK0UsRUFBVUYsRUFBVXhFLElBQ3BCMkUsRUFBVUYsRUFBVXpFLElBQ3RCd0UsSUFBY0MsR0FFZGhCLEVBQU9lLEVBQVVELE1BQ2pCNUUsSUFDQWdFLEtBRU1HLEVBQVd2RixJQUFJb0csSUFLZjVFLEVBQU94QixJQUFJbUcsSUFBWUwsRUFBVTlGLElBQUltRyxHQUMzQ3RKLEVBQU9vSixHQUVGRixFQUFTL0YsSUFBSW9HLEdBQ2xCaEYsSUFFS29FLEVBQU9FLElBQUlTLEdBQVdYLEVBQU9FLElBQUlVLElBQ3RDTCxFQUFTOUYsSUFBSWtHLEdBQ2J0SixFQUFPb0osS0FHUEgsRUFBVTdGLElBQUltRyxHQUNkaEYsTUFmQTRELEVBQVFrQixFQUFXMUUsR0FDbkJKLEtBaUJSLEtBQU9BLEtBQUssQ0FDUixNQUFNOEUsRUFBWXRCLEVBQVd4RCxHQUN4Qm1FLEVBQVd2RixJQUFJa0csRUFBVXpFLE1BQzFCdUQsRUFBUWtCLEVBQVcxRSxHQUUzQixLQUFPNEQsR0FDSHZJLEVBQU95SSxFQUFXRixFQUFJLElBQzFCLE9BQU9FLHFIQ3pwQ1gsTUFBQWxELGdCQUFBQSxFQUFBcEUsS0FBQUEsRUFBQWEsa0JBQUFBLEVBQUE3QixPQUFBQSxFQUFBRyxRQUFBQSxFQUFBZ0csS0FBQUEsRUFBQXRHLE9BQUFBLEVBQUExQixLQUFBQSxFQUFBa0osZUFBQUEsR0FBQW5KLEVBQUEsU0FBQW1JLEVBQUE5QyxHQUFBLElBQUE4RixFQUFBLE1BQUEsQ0FBQWhFLElBQUFnRSxFQUFBbEosRUFBQSxPQUFBYSxFQUFBcUksRUFBQSxRQUFBOUYsRUFBQSxLQUFBOEIsRUFBQTNGLEVBQUFJLEdBQUFELEVBQUFILEVBQUEySixFQUFBdkosR0FBQXVKLEVBQUFDLFVBQUEvRixFQUFBLEdBQUFBLEVBQUEsR0FBQThGLElBQUFoRSxFQUFBOUIsR0FBQUYsSUFBQSxFQUFBQSxJQUFBZ0csRUFBQUMsVUFBQS9GLEVBQUEsSUFBQSxFQUFBRixHQUFBckMsRUFBQXFJLEVBQUEsUUFBQTlGLEVBQUEsS0FBQVosRUFBQXhFLEVBQUFpRyxFQUFBakcsRUFBQWtILEVBQUFILEdBQUFBLEdBQUFsRixFQUFBcUosR0FBQTlGLEVBQUEsR0FBQSxRQUFBLFNBQUE2QyxFQUFBbUQsRUFBQTNELEVBQUE0RCxHQUFBLElBQUFDLEdBQUFDLFFBQUFBLEVBQUEsSUFBQTlELEdBQUFwRixLQUFBQSxFQUFBLElBQUFvRixFQUFBK0QsRUFBQSxHQUFBLE9BQUFKLEVBQUExRCxNQUFBRCxJQUFBLFlBQUFBLEdBQUE0RCxFQUFBLEVBQUFFLEVBQUE5RCxFQUFBOEQsU0FBQSxTQUFBOUQsR0FBQTRELEVBQUEsRUFBQWhKLEVBQUFvRixFQUFBcEYsT0FBQStJLEVBQUExRyxHQUFBRCxPQUFBLEtBQUEsRUFBQTJHLEVBQUExRyxHQUFBUSxPQUFBb0csR0FBQUEsRUFBQUcsaUJBQUEsVUFBQS9LLFFBQUFnTCxHQUFBLFNBQUFDLEdBQUEsUUFBQSxJQUFBSCxFQUFBRyxHQUFBLENBQUFILEVBQUFHLElBQUEsRUFBQSxJQUFBLElBQUFDLFNBQUFELEVBQUEsR0FBQSxNQUFBRSxHQUFBQyxRQUFBQyxNQUFBRixLQUFBLENBQUFILEVBQUFQLGFBQUEsQ0FBQUksRUFBQWxKLEVBQUFpSixFQUFBLFNBQUFVLEdBQUF0SSxFQUFBc0ksRUFBQSxVQUFBLFFBQUEsS0FBQVgsRUFBQSxFQUFBQyxFQUFBVSxPQUFBLElBQUFDLEVBQUEsY0FBQWhGLEVBQUFDLFlBQUF4RSxHQUFBd0osUUFBQWxFLEVBQUFwSSxLQUFBOEMsRUFBQXVGLEVBQUFDLEVBQUFnQixFQUFBLENBQUFxQyxRQUFBLEVBQUFsSixLQUFBLE1BRUEsTUFBQTRFLGdCQUFBa0YsRUFBQTdLLE9BQUFBLEVBQUF1QixLQUFBdUosRUFBQXpHLGFBQUFBLEVBQUFpQyxpQkFBQUEsRUFBQWQsa0JBQUFBLEVBQUFlLGFBQUFBLEVBQUFoRyxPQUFBd0ssRUFBQXJLLFFBQUFzSyxFQUFBdkUsTUFBQUEsRUFBQXZDLGFBQUFBLEVBQUF3QyxLQUFBdUUsRUFBQTdLLE9BQUE4SyxFQUFBakssT0FBQUEsRUFBQWdFLGdCQUFBQSxFQUFBSCx3QkFBQUEsRUFBQThDLGVBQUF1RCxFQUFBcEQsU0FBQUEsRUFBQUUsTUFBQUEsRUFBQW5ILEtBQUFBLEVBQUF3RCxjQUFBQSxFQUFBSSxlQUFBQSxFQUFBd0Qsa0JBQUFBLEdBQUF6SixFQUFBLFNBQUEyTSxFQUFBdEgsRUFBQXdFLEVBQUFwRixHQUFBLE1BQUE4RixFQUFBbEYsRUFBQXVILFFBQUEsT0FBQXJDLEVBQUEsR0FBQVYsRUFBQXBGLEdBQUE4RixFQUFBLFNBQUFzQyxFQUFBeEgsRUFBQXdFLEVBQUFwRixHQUFBLE1BQUE4RixFQUFBbEYsRUFBQXVILFFBQUEsT0FBQXJDLEVBQUEsR0FBQVYsRUFBQXBGLEdBQUE4RixFQUFBLFNBQUF1QyxFQUFBekgsRUFBQXdFLEVBQUFwRixHQUFBLE1BQUE4RixFQUFBbEYsRUFBQXVILFFBQUEsT0FBQXJDLEVBQUEsR0FBQVYsRUFBQXBGLEdBQUE4RixFQUFBLFNBQUF3QyxFQUFBMUgsR0FBQSxJQUFBMkgsRUFBQXZJLEVBQUF3SSxFQUFBQyxFQUFBLE1BQUEsQ0FBQS9GLElBQUE2RixFQUFBVCxFQUFBLE9BQUE5SCxFQUFBOEgsRUFBQSxLQUFBVyxFQUFBMUQsSUFBQTZDLEVBQUE1SCxFQUFBLFFBQUEsK0JBQUE0SCxFQUFBNUgsRUFBQSxjQUFBLFdBQUE0SCxFQUFBNUgsRUFBQSxRQUFBLElBQUE0SCxFQUFBNUgsRUFBQSxzQkFBQXdJLEVBQUE1SCxFQUFBLEdBQUE4SCxjQUFBaEcsRUFBQTNGLEVBQUFJLEdBQUE2SyxFQUFBakwsRUFBQXdMLEVBQUFwTCxHQUFBTCxFQUFBeUwsRUFBQXZJLEdBQUFnSSxFQUFBakwsRUFBQTBMLEVBQUF0TCxJQUFBdUYsRUFBQTlCLEVBQUFGLEdBQUEsRUFBQUEsR0FBQThILEtBQUFBLEVBQUE1SCxFQUFBLEdBQUE4SCxjQUFBZCxFQUFBNUgsRUFBQSxzQkFBQXdJLElBQUE5RixFQUFBSCxHQUFBQSxHQUFBc0YsRUFBQVUsR0FBQWhHLEdBQUFzRixFQUFBWSxLQUFBLFNBQUFFLEVBQUEvSCxHQUFBLElBQUErRCxFQUFBaUUsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQXRJLEVBQUEsR0FBQSxHQUFBLFNBQUF1SSxLQUFBQyxHQUFBLE9BQUF4SSxFQUFBLEdBQUFBLEVBQUEsTUFBQXdJLEdBQUEsTUFBQSxDQUFBMUcsSUFBQWlDLEVBQUFtRCxFQUFBLEtBQUFjLEVBQUFoTCxFQUFBc0wsR0FBQUwsRUFBQTlELElBQUE2QyxFQUFBakQsRUFBQSxPQUFBLGVBQUFpRCxFQUFBakQsRUFBQSxRQUFBbUUsRUFBQSxZQUFBbEksRUFBQSxHQUFBakYsT0FBQWlGLEVBQUEsR0FBQSxVQUFBLEtBQUFnSCxFQUFBakQsRUFBQSxnQkFBQW9FLEVBQUEsZUFBQW5JLEVBQUEsR0FBQW5ELEtBQUEsSUFBQW1ELEVBQUEsSUFBQWdILEVBQUFqRCxFQUFBLGNBQUEsT0FBQWlELEVBQUFqRCxFQUFBLE9BQUEsUUFBQWpDLEVBQUEzRixFQUFBSSxHQUFBNkssRUFBQWpMLEVBQUE0SCxFQUFBeEgsR0FBQUwsRUFBQTZILEVBQUFpRSxHQUFBOUwsRUFBQTZILEVBQUFrRSxHQUFBRyxJQUFBQyxFQUFBbEwsRUFBQTRHLEVBQUEsUUFBQXdFLEdBQUFILEdBQUEsSUFBQXRHLEVBQUEyRyxFQUFBM0ksR0FBQUUsRUFBQXlJLEVBQUEsRUFBQTNJLEdBQUF3SSxLQUFBQSxFQUFBdEksRUFBQSxHQUFBLEtBQUFpRSxFQUFBK0QsRUFBQU0sR0FBQSxFQUFBeEksR0FBQW9JLEtBQUFBLEVBQUEsWUFBQWxJLEVBQUEsR0FBQWpGLE9BQUFpRixFQUFBLEdBQUEsVUFBQSxNQUFBZ0gsRUFBQWpELEVBQUEsUUFBQW1FLEdBQUEsRUFBQXBJLEdBQUFxSSxLQUFBQSxFQUFBLGVBQUFuSSxFQUFBLEdBQUFuRCxLQUFBLElBQUFtRCxFQUFBLEtBQUFnSCxFQUFBakQsRUFBQSxnQkFBQW9FLElBQUFyRyxFQUFBSCxHQUFBQSxHQUFBc0YsRUFBQWxELEdBQUFxRSxHQUFBLEVBQUFDLE1BQUEsU0FBQUssRUFBQUMsRUFBQTNJLEdBQUEsSUFBQXlGLEVBQUFtRCxFQUFBQyxFQUFBLE9BQUFELEVBQUEsSUFBQS9CLEVBQUEsQ0FBQTdELE1BQUEsQ0FBQS9GLEtBQUErQyxFQUFBLEdBQUE4SSxjQUFBOUksRUFBQSxHQUFBd0ksS0FBQTNMLFNBQUEsQ0FBQXFFLElBQUF5SCxFQUFBbEQsTUFBQSxLQUFBM0QsSUFBQTJELEVBQUE5QyxJQUFBSCxFQUFBb0csRUFBQXRKLEdBQUFNLFVBQUFwRixLQUFBaUwsTUFBQUEsR0FBQTNELEVBQUEzRixFQUFBSSxHQUFBNkssRUFBQWpMLEVBQUFzSixFQUFBbEosR0FBQTRFLEVBQUF5SCxFQUFBek0sRUFBQUksR0FBQXNNLEdBQUEsR0FBQS9HLEVBQUE5QixFQUFBRixHQUFBLE1BQUFpSixFQUFBLEdBQUEsRUFBQWpKLElBQUFpSixFQUFBOUwsS0FBQStDLEVBQUEsR0FBQThJLGNBQUE5SSxFQUFBLEdBQUF3SSxLQUFBM0wsT0FBQStMLEVBQUFJLEtBQUFELElBQUFqSCxFQUFBcEIsR0FBQW1JLElBQUFySSxFQUFBb0ksRUFBQXRKLEdBQUFNLFNBQUFjLEdBQUFtSSxHQUFBLElBQUEvRyxFQUFBcEIsR0FBQUUsRUFBQWdJLEVBQUF0SixHQUFBTSxTQUFBYyxHQUFBbUksR0FBQSxHQUFBL0csRUFBQUgsR0FBQUEsR0FBQXNGLEVBQUF4QixHQUFBL0QsRUFBQWtILEVBQUFqSCxLQUFBLFNBQUErQyxFQUFBMUUsR0FBQSxJQUFBOEYsRUFBQStCLEVBQUFvQixFQUFBSixFQUFBSyxFQUFBLEdBQUFDLEVBQUEsSUFBQTlGLElBQUErRixFQUFBcEosRUFBQSxHQUFBcUosUUFBQXJKLEVBQUEsSUFBQSxNQUFBc0UsRUFBQXRFLEdBQUFBLEVBQUEsR0FBQXdJLEtBQUEzTCxLQUFBLElBQUEsSUFBQXVDLEVBQUEsRUFBQUEsRUFBQWdLLEVBQUF4TixPQUFBd0QsR0FBQSxFQUFBLENBQUEsSUFBQThGLEVBQUFvQyxFQUFBdEgsRUFBQW9KLEVBQUFoSyxHQUFBOEIsRUFBQW9ELEVBQUFZLEdBQUFpRSxFQUFBL0QsSUFBQWxFLEVBQUFnSSxFQUFBOUosR0FBQXNKLEVBQUF4SCxFQUFBZ0UsSUFBQSxNQUFBLENBQUFwRCxJQUFBZ0UsRUFBQW9CLEVBQUEsT0FBQSxJQUFBLElBQUE5SCxFQUFBLEVBQUFBLEVBQUE4SixFQUFBdE4sT0FBQXdELEdBQUEsRUFBQThKLEVBQUE5SixHQUFBa0IsSUFBQXVILEVBQUExRCxJQUFBNkMsRUFBQWxCLEVBQUEsUUFBQW1ELEVBQUEsaUJBQUFqSixFQUFBLEdBQUFqRixPQUFBaUYsRUFBQSxHQUFBLGVBQUEsS0FBQWdILEVBQUFsQixFQUFBLE9BQUEsYUFBQWhFLEVBQUEzRixFQUFBSSxHQUFBNkssRUFBQWpMLEVBQUEySixFQUFBdkosR0FBQSxJQUFBLElBQUE2QyxFQUFBLEVBQUFBLEVBQUE4SixFQUFBdE4sT0FBQXdELEdBQUEsRUFBQThKLEVBQUE5SixHQUFBa0MsRUFBQXdFLEVBQUEsTUFBQTVKLEVBQUE0SixFQUFBK0IsR0FBQWdCLEdBQUEsR0FBQS9HLEVBQUE5QixFQUFBRixHQUFBLEdBQUEsRUFBQUEsRUFBQSxDQUFBLE1BQUFzSixFQUFBcEosRUFBQSxHQUFBcUosUUFBQXJKLEVBQUEsSUFBQUksSUFBQThJLEVBQUE5RSxFQUFBOEUsRUFBQXBKLEVBQUF3RSxFQUFBLEVBQUF0RSxFQUFBb0osRUFBQUQsRUFBQXJELEVBQUE5RSxFQUFBMEgsRUFBQWIsRUFBQVAsR0FBQS9HLE1BQUFzSSxHQUFBLEVBQUEvSSxHQUFBbUosS0FBQUEsRUFBQSxpQkFBQWpKLEVBQUEsR0FBQWpGLE9BQUFpRixFQUFBLEdBQUEsZUFBQSxPQUFBZ0gsRUFBQWxCLEVBQUEsUUFBQW1ELElBQUFuSCxFQUFBcEIsR0FBQSxJQUFBbUksRUFBQSxDQUFBLElBQUEsSUFBQXpKLEVBQUEsRUFBQUEsRUFBQWdLLEVBQUF4TixPQUFBd0QsR0FBQSxFQUFBb0IsRUFBQTBJLEVBQUE5SixJQUFBeUosR0FBQSxJQUFBL0csRUFBQXBCLEdBQUEsSUFBQSxJQUFBdEIsRUFBQSxFQUFBQSxFQUFBOEosRUFBQXROLE9BQUF3RCxHQUFBLEVBQUF3QixFQUFBc0ksRUFBQTlKLElBQUF5SixHQUFBLEdBQUEvRyxFQUFBSCxHQUFBQSxHQUFBc0YsRUFBQW5CLEdBQUEsSUFBQSxJQUFBMUcsRUFBQSxFQUFBQSxFQUFBOEosRUFBQXROLE9BQUF3RCxHQUFBLEVBQUE4SixFQUFBOUosR0FBQTBCLE1BQUEsU0FBQXdJLEVBQUF0SixHQUFBLElBQUF1SixFQUFBQyxFQUFBeEIsRUFBQUMsRUFBQXdCLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUF0QixFQUFBUCxFQUFBdEksRUFBQSxHQUFBb0ssTUFBQSxHQUFBQyxFQUFBckssRUFBQSxHQUFBOEgsYUFBQUosRUFBQTFILEdBQUFzSyxFQUFBelAsT0FBQWMsS0FBQXFFLEVBQUEsR0FBQXFKLFNBQUFrQixFQUFBLEdBQUEsSUFBQSxJQUFBbkwsRUFBQSxFQUFBQSxFQUFBa0wsRUFBQTFPLE9BQUF3RCxHQUFBLEVBQUFtTCxFQUFBbkwsR0FBQTJJLEVBQUFOLEVBQUF6SCxFQUFBc0ssRUFBQWxMLElBQUEsSUFBQW9MLEVBQUEzUCxPQUFBYyxLQUFBcUUsRUFBQSxHQUFBcUosU0FBQUgsRUFBQSxHQUFBLElBQUEsSUFBQTlKLEVBQUEsRUFBQUEsRUFBQW9MLEVBQUE1TyxPQUFBd0QsR0FBQSxFQUFBOEosRUFBQTlKLEdBQUFzRixFQUFBOEMsRUFBQXhILEVBQUF3SyxFQUFBcEwsSUFBQSxNQUFBcUwsRUFBQXJMLEdBQUF3QixFQUFBc0ksRUFBQTlKLEdBQUEsRUFBQSxFQUFBLEtBQUE4SixFQUFBOUosR0FBQSxPQUFBLE1BQUEsQ0FBQTBDLElBQUF5SCxFQUFBckMsRUFBQSxPQUFBc0MsRUFBQXRDLEVBQUEsT0FBQWMsRUFBQWhMLEVBQUFzTCxHQUFBTCxFQUFBOUQsSUFBQWtHLEdBQUFBLEVBQUEvSixJQUFBbUosRUFBQXpNLEVBQUEsS0FBQTBNLEVBQUF2RixJQUFBd0YsRUFBQXpDLEVBQUEsT0FBQTBDLEVBQUExQyxFQUFBLE9BQUEsSUFBQSxJQUFBOUgsRUFBQSxFQUFBQSxFQUFBbUwsRUFBQTNPLE9BQUF3RCxHQUFBLEVBQUFtTCxFQUFBbkwsR0FBQWtCLElBQUF1SixFQUFBMUYsSUFBQTJGLEVBQUE1QyxFQUFBLE9BQUE2QyxFQUFBN0MsRUFBQSxPQUFBLElBQUEsSUFBQTlILEVBQUEsRUFBQUEsRUFBQThKLEVBQUF0TixPQUFBd0QsR0FBQSxFQUFBOEosRUFBQTlKLEdBQUFrQixJQUFBMEosRUFBQTdGLElBQUE4RixFQUFBL0MsRUFBQSxTQUFBRixFQUFBd0MsRUFBQSxRQUFBLHVDQUFBeEMsRUFBQTRDLEVBQUEsUUFBQSwyQ0FBQTVDLEVBQUE0QyxFQUFBLG1CQUFBLFlBQUE1QyxFQUFBNEMsRUFBQSxPQUFBLFdBQUE1QyxFQUFBMkMsRUFBQSxRQUFBLHlCQUFBM0MsRUFBQStDLEVBQUEsUUFBQSxlQUFBL0MsRUFBQThDLEVBQUEsUUFBQSx5QkFBQTlDLEVBQUFpRCxFQUFBLE9BQUEsUUFBQWpELEVBQUFpRCxFQUFBLFFBQUEsVUFBQWpELEVBQUFpRCxFQUFBLE9BQUFDLEVBQUFsSyxFQUFBLEdBQUFuRCxNQUFBb04sRUFBQWxQLE1BQUFvUCxFQUFBbkssRUFBQSxHQUFBakYsTUFBQWlNLEVBQUF1QyxFQUFBLFFBQUEsMEJBQUF6SCxFQUFBM0YsRUFBQUksR0FBQTZLLEVBQUFqTCxFQUFBb04sRUFBQWhOLEdBQUFMLEVBQUFxTixFQUFBQyxHQUFBdE4sRUFBQXNOLEVBQUF4QixHQUFBOUwsRUFBQXNOLEVBQUF2QixHQUFBb0MsR0FBQUEsRUFBQS9JLEVBQUFrSSxFQUFBLE1BQUF0TixFQUFBc04sRUFBQUMsR0FBQXZOLEVBQUFxTixFQUFBRyxHQUFBeE4sRUFBQXFOLEVBQUFJLEdBQUF6TixFQUFBeU4sRUFBQUMsR0FBQSxJQUFBLElBQUF4SyxFQUFBLEVBQUFBLEVBQUFtTCxFQUFBM08sT0FBQXdELEdBQUEsRUFBQW1MLEVBQUFuTCxHQUFBa0MsRUFBQXNJLEVBQUEsTUFBQTFOLEVBQUFxTixFQUFBTSxHQUFBM04sRUFBQXFOLEVBQUFPLEdBQUE1TixFQUFBNE4sRUFBQUMsR0FBQSxJQUFBLElBQUEzSyxFQUFBLEVBQUFBLEVBQUE4SixFQUFBdE4sT0FBQXdELEdBQUEsRUFBQThKLEVBQUE5SixHQUFBa0MsRUFBQXlJLEVBQUEsTUFBQTdOLEVBQUFxTixFQUFBUyxHQUFBOU4sRUFBQXFOLEVBQUFVLEdBQUFwQixHQUFBLEdBQUEvRyxFQUFBOUIsR0FBQUYsSUFBQSxLQUFBK0ksR0FBQSxFQUFBL0ksSUFBQXdJLEtBQUFBLEVBQUF0SSxFQUFBLEdBQUFvSyxNQUFBLEtBQUFuRyxFQUFBK0QsRUFBQU0sR0FBQXRJLEVBQUEsR0FBQThILFlBQUF1QyxFQUFBQSxFQUFBdEssRUFBQUMsRUFBQUYsS0FBQXVLLEVBQUEzQyxFQUFBMUgsSUFBQU0sSUFBQStKLEVBQUEvSSxFQUFBa0ksRUFBQUMsSUFBQVksSUFBQUEsRUFBQXZKLEVBQUEsR0FBQXVKLEVBQUEsTUFBQSxFQUFBdkssRUFBQSxDQUFBLElBQUFWLEVBQUEsSUFBQWtMLEVBQUF6UCxPQUFBYyxLQUFBcUUsRUFBQSxHQUFBcUosU0FBQWpLLEVBQUEsRUFBQUEsRUFBQWtMLEVBQUExTyxPQUFBd0QsR0FBQSxFQUFBLENBQUEsTUFBQThGLEVBQUF1QyxFQUFBekgsRUFBQXNLLEVBQUFsTCxHQUFBbUwsRUFBQW5MLEdBQUFtTCxFQUFBbkwsR0FBQVcsRUFBQW1GLEVBQUFwRixJQUFBeUssRUFBQW5MLEdBQUEySSxFQUFBN0MsR0FBQXFGLEVBQUFuTCxHQUFBa0IsSUFBQWlLLEVBQUFuTCxHQUFBa0MsRUFBQXNJLEVBQUEsT0FBQSxLQUFBeEssRUFBQW1MLEVBQUEzTyxPQUFBd0QsR0FBQSxFQUFBbUwsRUFBQW5MLEdBQUEwQixFQUFBLEdBQUF5SixFQUFBM08sT0FBQTBPLEVBQUExTyxPQUFBLEdBQUEsRUFBQWtFLEVBQUEsQ0FBQSxJQUFBVixFQUFBLElBQUFvTCxFQUFBM1AsT0FBQWMsS0FBQXFFLEVBQUEsR0FBQXFKLFNBQUFqSyxFQUFBLEVBQUFBLEVBQUFvTCxFQUFBNU8sT0FBQXdELEdBQUEsRUFBQSxDQUFBLE1BQUE4RixFQUFBc0MsRUFBQXhILEVBQUF3SyxFQUFBcEwsR0FBQThKLEVBQUE5SixJQUFBOEosRUFBQTlKLEdBQUFXLEVBQUFtRixFQUFBcEYsR0FBQVUsRUFBQTBJLEVBQUE5SixHQUFBLEtBQUE4SixFQUFBOUosR0FBQXNGLEVBQUFRLEdBQUFnRSxFQUFBOUosR0FBQWtCLElBQUFFLEVBQUEwSSxFQUFBOUosR0FBQSxHQUFBOEosRUFBQTlKLEdBQUFrQyxFQUFBeUksRUFBQSxPQUFBLElBQUEzSixJQUFBaEIsRUFBQW9MLEVBQUE1TyxPQUFBd0QsRUFBQThKLEVBQUF0TixPQUFBd0QsR0FBQSxFQUFBcUwsRUFBQXJMLEdBQUFtQixNQUFBc0ksR0FBQSxFQUFBL0ksR0FBQW9LLEtBQUFBLEVBQUFsSyxFQUFBLEdBQUFuRCxRQUFBbUssRUFBQWlELEVBQUEsT0FBQUMsS0FBQXJCLEdBQUEsRUFBQS9JLEdBQUFxSyxLQUFBQSxFQUFBbkssRUFBQSxHQUFBakYsUUFBQWtQLEVBQUFsUCxRQUFBb1AsS0FBQUYsRUFBQWxQLE1BQUFvUCxJQUFBckksRUFBQXBCLEdBQUEsSUFBQW1JLEVBQUEsQ0FBQSxJQUFBLElBQUF6SixFQUFBLEVBQUFBLEVBQUFvTCxFQUFBNU8sT0FBQXdELEdBQUEsRUFBQW9CLEVBQUEwSSxFQUFBOUosSUFBQXlKLEdBQUEsSUFBQS9HLEVBQUFwQixHQUFBd0ksRUFBQUEsRUFBQXpILE9BQUFpSixTQUFBLElBQUEsSUFBQXRMLEVBQUEsRUFBQUEsRUFBQThKLEVBQUF0TixPQUFBd0QsR0FBQSxFQUFBd0IsRUFBQXNJLEVBQUE5SixJQUFBeUosR0FBQSxHQUFBL0csRUFBQUgsR0FBQUEsR0FBQXNGLEVBQUFzQyxHQUFBYyxHQUFBQSxFQUFBdkosSUFBQTJCLEVBQUE4SCxFQUFBNUksR0FBQWMsRUFBQXlHLEVBQUF2SCxLQUFBLFNBQUFnSixFQUFBM0UsRUFBQTNELEVBQUE0RCxHQUFBLElBQUF1QyxLQUFBQSxHQUFBbkcsRUFBQSxPQUFBMkQsRUFBQTFELE1BQUFELElBQUEsU0FBQUEsR0FBQTRELEVBQUEsRUFBQXVDLEVBQUFuRyxFQUFBbUcsT0FBQSxDQUFBQSxFQUFBb0MsR0FBQTNFLEVBQUEsRUFBQXVDLEVBQUF6TixNQUFBNlAsRUFBQXBDLElDQUEsT0RBQSxjQUFBekIsRUFBQWpGLFlBQUF4RSxHQUFBd0osUUFBQUssRUFBQTNNLEtBQUE4QyxFQUFBcU4sRUFBQXJCLEVBQUFqQyxFQUFBLENBQUFtQixLQUFBIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIiYmdHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIil7Zz1zZWxmfWVsc2V7Zz10aGlzfShnLlRhYkZpZWxkIHx8IChnLlRhYkZpZWxkID0ge30pKS5zdmVsdGUgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBub29wKCkgeyB9XG5jb25zdCBpZGVudGl0eSA9IHggPT4geDtcbmZ1bmN0aW9uIGFzc2lnbih0YXIsIHNyYykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBmb3IgKGNvbnN0IGsgaW4gc3JjKVxuICAgICAgICB0YXJba10gPSBzcmNba107XG4gICAgcmV0dXJuIHRhcjtcbn1cbmZ1bmN0aW9uIGlzX3Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGFkZF9sb2NhdGlvbihlbGVtZW50LCBmaWxlLCBsaW5lLCBjb2x1bW4sIGNoYXIpIHtcbiAgICBlbGVtZW50Ll9fc3ZlbHRlX21ldGEgPSB7XG4gICAgICAgIGxvYzogeyBmaWxlLCBsaW5lLCBjb2x1bW4sIGNoYXIgfVxuICAgIH07XG59XG5mdW5jdGlvbiBydW4oZm4pIHtcbiAgICByZXR1cm4gZm4oKTtcbn1cbmZ1bmN0aW9uIGJsYW5rX29iamVjdCgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cbmZ1bmN0aW9uIHJ1bl9hbGwoZm5zKSB7XG4gICAgZm5zLmZvckVhY2gocnVuKTtcbn1cbmZ1bmN0aW9uIGlzX2Z1bmN0aW9uKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIHNhZmVfbm90X2VxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYiB8fCAoKGEgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnKSB8fCB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJyk7XG59XG5mdW5jdGlvbiBub3RfZXF1YWwoYSwgYikge1xuICAgIHJldHVybiBhICE9IGEgPyBiID09IGIgOiBhICE9PSBiO1xufVxuZnVuY3Rpb24gaXNfZW1wdHkob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfc3RvcmUoc3RvcmUsIG5hbWUpIHtcbiAgICBpZiAoc3RvcmUgIT0gbnVsbCAmJiB0eXBlb2Ygc3RvcmUuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7bmFtZX0nIGlzIG5vdCBhIHN0b3JlIHdpdGggYSAnc3Vic2NyaWJlJyBtZXRob2RgKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzdWJzY3JpYmUoc3RvcmUsIC4uLmNhbGxiYWNrcykge1xuICAgIGlmIChzdG9yZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBub29wO1xuICAgIH1cbiAgICBjb25zdCB1bnN1YiA9IHN0b3JlLnN1YnNjcmliZSguLi5jYWxsYmFja3MpO1xuICAgIHJldHVybiB1bnN1Yi51bnN1YnNjcmliZSA/ICgpID0+IHVuc3ViLnVuc3Vic2NyaWJlKCkgOiB1bnN1Yjtcbn1cbmZ1bmN0aW9uIGdldF9zdG9yZV92YWx1ZShzdG9yZSkge1xuICAgIGxldCB2YWx1ZTtcbiAgICBzdWJzY3JpYmUoc3RvcmUsIF8gPT4gdmFsdWUgPSBfKSgpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNvbXBvbmVudF9zdWJzY3JpYmUoY29tcG9uZW50LCBzdG9yZSwgY2FsbGJhY2spIHtcbiAgICBjb21wb25lbnQuJCQub25fZGVzdHJveS5wdXNoKHN1YnNjcmliZShzdG9yZSwgY2FsbGJhY2spKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9zbG90KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pIHtcbiAgICBpZiAoZGVmaW5pdGlvbikge1xuICAgICAgICBjb25zdCBzbG90X2N0eCA9IGdldF9zbG90X2NvbnRleHQoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbik7XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uWzBdKHNsb3RfY3R4KTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRfc2xvdF9jb250ZXh0KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pIHtcbiAgICByZXR1cm4gZGVmaW5pdGlvblsxXSAmJiBmblxuICAgICAgICA/IGFzc2lnbigkJHNjb3BlLmN0eC5zbGljZSgpLCBkZWZpbml0aW9uWzFdKGZuKGN0eCkpKVxuICAgICAgICA6ICQkc2NvcGUuY3R4O1xufVxuZnVuY3Rpb24gZ2V0X3Nsb3RfY2hhbmdlcyhkZWZpbml0aW9uLCAkJHNjb3BlLCBkaXJ0eSwgZm4pIHtcbiAgICBpZiAoZGVmaW5pdGlvblsyXSAmJiBmbikge1xuICAgICAgICBjb25zdCBsZXRzID0gZGVmaW5pdGlvblsyXShmbihkaXJ0eSkpO1xuICAgICAgICBpZiAoJCRzY29wZS5kaXJ0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbGV0cztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGxldHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25zdCBtZXJnZWQgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IE1hdGgubWF4KCQkc2NvcGUuZGlydHkubGVuZ3RoLCBsZXRzLmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgbWVyZ2VkW2ldID0gJCRzY29wZS5kaXJ0eVtpXSB8IGxldHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkJHNjb3BlLmRpcnR5IHwgbGV0cztcbiAgICB9XG4gICAgcmV0dXJuICQkc2NvcGUuZGlydHk7XG59XG5mdW5jdGlvbiB1cGRhdGVfc2xvdChzbG90LCBzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZGlydHksIGdldF9zbG90X2NoYW5nZXNfZm4sIGdldF9zbG90X2NvbnRleHRfZm4pIHtcbiAgICBjb25zdCBzbG90X2NoYW5nZXMgPSBnZXRfc2xvdF9jaGFuZ2VzKHNsb3RfZGVmaW5pdGlvbiwgJCRzY29wZSwgZGlydHksIGdldF9zbG90X2NoYW5nZXNfZm4pO1xuICAgIGlmIChzbG90X2NoYW5nZXMpIHtcbiAgICAgICAgY29uc3Qgc2xvdF9jb250ZXh0ID0gZ2V0X3Nsb3RfY29udGV4dChzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZ2V0X3Nsb3RfY29udGV4dF9mbik7XG4gICAgICAgIHNsb3QucChzbG90X2NvbnRleHQsIHNsb3RfY2hhbmdlcyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZXhjbHVkZV9pbnRlcm5hbF9wcm9wcyhwcm9wcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgayBpbiBwcm9wcylcbiAgICAgICAgaWYgKGtbMF0gIT09ICckJylcbiAgICAgICAgICAgIHJlc3VsdFtrXSA9IHByb3BzW2tdO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjb21wdXRlX3Jlc3RfcHJvcHMocHJvcHMsIGtleXMpIHtcbiAgICBjb25zdCByZXN0ID0ge307XG4gICAga2V5cyA9IG5ldyBTZXQoa2V5cyk7XG4gICAgZm9yIChjb25zdCBrIGluIHByb3BzKVxuICAgICAgICBpZiAoIWtleXMuaGFzKGspICYmIGtbMF0gIT09ICckJylcbiAgICAgICAgICAgIHJlc3Rba10gPSBwcm9wc1trXTtcbiAgICByZXR1cm4gcmVzdDtcbn1cbmZ1bmN0aW9uIG9uY2UoZm4pIHtcbiAgICBsZXQgcmFuID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGlmIChyYW4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJhbiA9IHRydWU7XG4gICAgICAgIGZuLmNhbGwodGhpcywgLi4uYXJncyk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG51bGxfdG9fZW1wdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5mdW5jdGlvbiBzZXRfc3RvcmVfdmFsdWUoc3RvcmUsIHJldCwgdmFsdWUgPSByZXQpIHtcbiAgICBzdG9yZS5zZXQodmFsdWUpO1xuICAgIHJldHVybiByZXQ7XG59XG5jb25zdCBoYXNfcHJvcCA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xuZnVuY3Rpb24gYWN0aW9uX2Rlc3Ryb3llcihhY3Rpb25fcmVzdWx0KSB7XG4gICAgcmV0dXJuIGFjdGlvbl9yZXN1bHQgJiYgaXNfZnVuY3Rpb24oYWN0aW9uX3Jlc3VsdC5kZXN0cm95KSA/IGFjdGlvbl9yZXN1bHQuZGVzdHJveSA6IG5vb3A7XG59XG5cbmNvbnN0IGlzX2NsaWVudCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuZXhwb3J0cy5ub3cgPSBpc19jbGllbnRcbiAgICA/ICgpID0+IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKVxuICAgIDogKCkgPT4gRGF0ZS5ub3coKTtcbmV4cG9ydHMucmFmID0gaXNfY2xpZW50ID8gY2IgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKSA6IG5vb3A7XG4vLyB1c2VkIGludGVybmFsbHkgZm9yIHRlc3RpbmdcbmZ1bmN0aW9uIHNldF9ub3coZm4pIHtcbiAgICBleHBvcnRzLm5vdyA9IGZuO1xufVxuZnVuY3Rpb24gc2V0X3JhZihmbikge1xuICAgIGV4cG9ydHMucmFmID0gZm47XG59XG5cbmNvbnN0IHRhc2tzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gcnVuX3Rhc2tzKG5vdykge1xuICAgIHRhc2tzLmZvckVhY2godGFzayA9PiB7XG4gICAgICAgIGlmICghdGFzay5jKG5vdykpIHtcbiAgICAgICAgICAgIHRhc2tzLmRlbGV0ZSh0YXNrKTtcbiAgICAgICAgICAgIHRhc2suZigpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHRhc2tzLnNpemUgIT09IDApXG4gICAgICAgIGV4cG9ydHMucmFmKHJ1bl90YXNrcyk7XG59XG4vKipcbiAqIEZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkhXG4gKi9cbmZ1bmN0aW9uIGNsZWFyX2xvb3BzKCkge1xuICAgIHRhc2tzLmNsZWFyKCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdGFzayB0aGF0IHJ1bnMgb24gZWFjaCByYWYgZnJhbWVcbiAqIHVudGlsIGl0IHJldHVybnMgYSBmYWxzeSB2YWx1ZSBvciBpcyBhYm9ydGVkXG4gKi9cbmZ1bmN0aW9uIGxvb3AoY2FsbGJhY2spIHtcbiAgICBsZXQgdGFzaztcbiAgICBpZiAodGFza3Muc2l6ZSA9PT0gMClcbiAgICAgICAgZXhwb3J0cy5yYWYocnVuX3Rhc2tzKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwcm9taXNlOiBuZXcgUHJvbWlzZShmdWxmaWxsID0+IHtcbiAgICAgICAgICAgIHRhc2tzLmFkZCh0YXNrID0geyBjOiBjYWxsYmFjaywgZjogZnVsZmlsbCB9KTtcbiAgICAgICAgfSksXG4gICAgICAgIGFib3J0KCkge1xuICAgICAgICAgICAgdGFza3MuZGVsZXRlKHRhc2spO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kKHRhcmdldCwgbm9kZSkge1xuICAgIHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcbn1cbmZ1bmN0aW9uIGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgYW5jaG9yIHx8IG51bGwpO1xufVxuZnVuY3Rpb24gZGV0YWNoKG5vZGUpIHtcbiAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG59XG5mdW5jdGlvbiBkZXN0cm95X2VhY2goaXRlcmF0aW9ucywgZGV0YWNoaW5nKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyYXRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChpdGVyYXRpb25zW2ldKVxuICAgICAgICAgICAgaXRlcmF0aW9uc1tpXS5kKGRldGFjaGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZWxlbWVudChuYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSk7XG59XG5mdW5jdGlvbiBlbGVtZW50X2lzKG5hbWUsIGlzKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSwgeyBpcyB9KTtcbn1cbmZ1bmN0aW9uIG9iamVjdF93aXRob3V0X3Byb3BlcnRpZXMob2JqLCBleGNsdWRlKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0ge307XG4gICAgZm9yIChjb25zdCBrIGluIG9iaikge1xuICAgICAgICBpZiAoaGFzX3Byb3Aob2JqLCBrKVxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgJiYgZXhjbHVkZS5pbmRleE9mKGspID09PSAtMSkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGFyZ2V0W2tdID0gb2JqW2tdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBzdmdfZWxlbWVudChuYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBuYW1lKTtcbn1cbmZ1bmN0aW9uIHRleHQoZGF0YSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkYXRhKTtcbn1cbmZ1bmN0aW9uIHNwYWNlKCkge1xuICAgIHJldHVybiB0ZXh0KCcgJyk7XG59XG5mdW5jdGlvbiBlbXB0eSgpIHtcbiAgICByZXR1cm4gdGV4dCgnJyk7XG59XG5mdW5jdGlvbiBsaXN0ZW4obm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcHJldmVudF9kZWZhdWx0KGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gc3RvcF9wcm9wYWdhdGlvbihmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzZWxmKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMpXG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgZWxzZSBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSAhPT0gdmFsdWUpXG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gc2V0X2F0dHJpYnV0ZXMobm9kZSwgYXR0cmlidXRlcykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG5vZGUuX19wcm90b19fKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuY3NzVGV4dCA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdfX3ZhbHVlJykge1xuICAgICAgICAgICAgbm9kZS52YWx1ZSA9IG5vZGVba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZXNjcmlwdG9yc1trZXldICYmIGRlc2NyaXB0b3JzW2tleV0uc2V0KSB7XG4gICAgICAgICAgICBub2RlW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhdHRyKG5vZGUsIGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9zdmdfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICBhdHRyKG5vZGUsIGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YShub2RlLCBwcm9wLCB2YWx1ZSkge1xuICAgIGlmIChwcm9wIGluIG5vZGUpIHtcbiAgICAgICAgbm9kZVtwcm9wXSA9IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXR0cihub2RlLCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24geGxpbmtfYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWUoZ3JvdXAsIF9fdmFsdWUsIGNoZWNrZWQpIHtcbiAgICBjb25zdCB2YWx1ZSA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChncm91cFtpXS5jaGVja2VkKVxuICAgICAgICAgICAgdmFsdWUuYWRkKGdyb3VwW2ldLl9fdmFsdWUpO1xuICAgIH1cbiAgICBpZiAoIWNoZWNrZWQpIHtcbiAgICAgICAgdmFsdWUuZGVsZXRlKF9fdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuZnJvbSh2YWx1ZSk7XG59XG5mdW5jdGlvbiB0b19udW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09ICcnID8gdW5kZWZpbmVkIDogK3ZhbHVlO1xufVxuZnVuY3Rpb24gdGltZV9yYW5nZXNfdG9fYXJyYXkocmFuZ2VzKSB7XG4gICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnJheS5wdXNoKHsgc3RhcnQ6IHJhbmdlcy5zdGFydChpKSwgZW5kOiByYW5nZXMuZW5kKGkpIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5mdW5jdGlvbiBjaGlsZHJlbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudC5jaGlsZE5vZGVzKTtcbn1cbmZ1bmN0aW9uIGNsYWltX2VsZW1lbnQobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIHN2Zykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5ub2RlTmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgbGV0IGogPSAwO1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlID0gW107XG4gICAgICAgICAgICB3aGlsZSAoaiA8IG5vZGUuYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBub2RlLmF0dHJpYnV0ZXNbaisrXTtcbiAgICAgICAgICAgICAgICBpZiAoIWF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZS5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHJlbW92ZS5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKHJlbW92ZVtrXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZXMuc3BsaWNlKGksIDEpWzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdmcgPyBzdmdfZWxlbWVudChuYW1lKSA6IGVsZW1lbnQobmFtZSk7XG59XG5mdW5jdGlvbiBjbGFpbV90ZXh0KG5vZGVzLCBkYXRhKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICAgICAgICBub2RlLmRhdGEgPSAnJyArIGRhdGE7XG4gICAgICAgICAgICByZXR1cm4gbm9kZXMuc3BsaWNlKGksIDEpWzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZXh0KGRhdGEpO1xufVxuZnVuY3Rpb24gY2xhaW1fc3BhY2Uobm9kZXMpIHtcbiAgICByZXR1cm4gY2xhaW1fdGV4dChub2RlcywgJyAnKTtcbn1cbmZ1bmN0aW9uIHNldF9kYXRhKHRleHQsIGRhdGEpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICAgIGlmICh0ZXh0Lndob2xlVGV4dCAhPT0gZGF0YSlcbiAgICAgICAgdGV4dC5kYXRhID0gZGF0YTtcbn1cbmZ1bmN0aW9uIHNldF9pbnB1dF92YWx1ZShpbnB1dCwgdmFsdWUpIHtcbiAgICBpbnB1dC52YWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xufVxuZnVuY3Rpb24gc2V0X2lucHV0X3R5cGUoaW5wdXQsIHR5cGUpIHtcbiAgICB0cnkge1xuICAgICAgICBpbnB1dC50eXBlID0gdHlwZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9zdHlsZShub2RlLCBrZXksIHZhbHVlLCBpbXBvcnRhbnQpIHtcbiAgICBub2RlLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUsIGltcG9ydGFudCA/ICdpbXBvcnRhbnQnIDogJycpO1xufVxuZnVuY3Rpb24gc2VsZWN0X29wdGlvbihzZWxlY3QsIHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcbiAgICAgICAgaWYgKG9wdGlvbi5fX3ZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHNlbGVjdF9vcHRpb25zKHNlbGVjdCwgdmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHNlbGVjdC5vcHRpb25zW2ldO1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB+dmFsdWUuaW5kZXhPZihvcHRpb24uX192YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2VsZWN0X3ZhbHVlKHNlbGVjdCkge1xuICAgIGNvbnN0IHNlbGVjdGVkX29wdGlvbiA9IHNlbGVjdC5xdWVyeVNlbGVjdG9yKCc6Y2hlY2tlZCcpIHx8IHNlbGVjdC5vcHRpb25zWzBdO1xuICAgIHJldHVybiBzZWxlY3RlZF9vcHRpb24gJiYgc2VsZWN0ZWRfb3B0aW9uLl9fdmFsdWU7XG59XG5mdW5jdGlvbiBzZWxlY3RfbXVsdGlwbGVfdmFsdWUoc2VsZWN0KSB7XG4gICAgcmV0dXJuIFtdLm1hcC5jYWxsKHNlbGVjdC5xdWVyeVNlbGVjdG9yQWxsKCc6Y2hlY2tlZCcpLCBvcHRpb24gPT4gb3B0aW9uLl9fdmFsdWUpO1xufVxuLy8gdW5mb3J0dW5hdGVseSB0aGlzIGNhbid0IGJlIGEgY29uc3RhbnQgYXMgdGhhdCB3b3VsZG4ndCBiZSB0cmVlLXNoYWtlYWJsZVxuLy8gc28gd2UgY2FjaGUgdGhlIHJlc3VsdCBpbnN0ZWFkXG5sZXQgY3Jvc3NvcmlnaW47XG5mdW5jdGlvbiBpc19jcm9zc29yaWdpbigpIHtcbiAgICBpZiAoY3Jvc3NvcmlnaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjcm9zc29yaWdpbiA9IGZhbHNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICB2b2lkIHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjcm9zc29yaWdpbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNyb3Nzb3JpZ2luO1xufVxuZnVuY3Rpb24gYWRkX3Jlc2l6ZV9saXN0ZW5lcihub2RlLCBmbikge1xuICAgIGNvbnN0IGNvbXB1dGVkX3N0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBjb25zdCB6X2luZGV4ID0gKHBhcnNlSW50KGNvbXB1dGVkX3N0eWxlLnpJbmRleCkgfHwgMCkgLSAxO1xuICAgIGlmIChjb21wdXRlZF9zdHlsZS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgfVxuICAgIGNvbnN0IGlmcmFtZSA9IGVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYGRpc3BsYXk6IGJsb2NrOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgbGVmdDogMDsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgYCArXG4gICAgICAgIGBvdmVyZmxvdzogaGlkZGVuOyBib3JkZXI6IDA7IG9wYWNpdHk6IDA7IHBvaW50ZXItZXZlbnRzOiBub25lOyB6LWluZGV4OiAke3pfaW5kZXh9O2ApO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICBpZnJhbWUudGFiSW5kZXggPSAtMTtcbiAgICBjb25zdCBjcm9zc29yaWdpbiA9IGlzX2Nyb3Nzb3JpZ2luKCk7XG4gICAgbGV0IHVuc3Vic2NyaWJlO1xuICAgIGlmIChjcm9zc29yaWdpbikge1xuICAgICAgICBpZnJhbWUuc3JjID0gYGRhdGE6dGV4dC9odG1sLDxzY3JpcHQ+b25yZXNpemU9ZnVuY3Rpb24oKXtwYXJlbnQucG9zdE1lc3NhZ2UoMCwnKicpfTwvc2NyaXB0PmA7XG4gICAgICAgIHVuc3Vic2NyaWJlID0gbGlzdGVuKHdpbmRvdywgJ21lc3NhZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGlmcmFtZS5jb250ZW50V2luZG93KVxuICAgICAgICAgICAgICAgIGZuKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWZyYW1lLnNyYyA9ICdhYm91dDpibGFuayc7XG4gICAgICAgIGlmcmFtZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSA9IGxpc3RlbihpZnJhbWUuY29udGVudFdpbmRvdywgJ3Jlc2l6ZScsIGZuKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXBwZW5kKG5vZGUsIGlmcmFtZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKGNyb3Nzb3JpZ2luKSB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHVuc3Vic2NyaWJlICYmIGlmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGRldGFjaChpZnJhbWUpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0b2dnbGVfY2xhc3MoZWxlbWVudCwgbmFtZSwgdG9nZ2xlKSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3RbdG9nZ2xlID8gJ2FkZCcgOiAncmVtb3ZlJ10obmFtZSk7XG59XG5mdW5jdGlvbiBjdXN0b21fZXZlbnQodHlwZSwgZGV0YWlsKSB7XG4gICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgIGUuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSwgZGV0YWlsKTtcbiAgICByZXR1cm4gZTtcbn1cbmZ1bmN0aW9uIHF1ZXJ5X3NlbGVjdG9yX2FsbChzZWxlY3RvciwgcGFyZW50ID0gZG9jdW1lbnQuYm9keSkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG59XG5jbGFzcyBIdG1sVGFnIHtcbiAgICBjb25zdHJ1Y3RvcihhbmNob3IgPSBudWxsKSB7XG4gICAgICAgIHRoaXMuYSA9IGFuY2hvcjtcbiAgICAgICAgdGhpcy5lID0gdGhpcy5uID0gbnVsbDtcbiAgICB9XG4gICAgbShodG1sLCB0YXJnZXQsIGFuY2hvciA9IG51bGwpIHtcbiAgICAgICAgaWYgKCF0aGlzLmUpIHtcbiAgICAgICAgICAgIHRoaXMuZSA9IGVsZW1lbnQodGFyZ2V0Lm5vZGVOYW1lKTtcbiAgICAgICAgICAgIHRoaXMudCA9IHRhcmdldDtcbiAgICAgICAgICAgIHRoaXMuaChodG1sKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmkoYW5jaG9yKTtcbiAgICB9XG4gICAgaChodG1sKSB7XG4gICAgICAgIHRoaXMuZS5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICB0aGlzLm4gPSBBcnJheS5mcm9tKHRoaXMuZS5jaGlsZE5vZGVzKTtcbiAgICB9XG4gICAgaShhbmNob3IpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm4ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGluc2VydCh0aGlzLnQsIHRoaXMubltpXSwgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwKGh0bWwpIHtcbiAgICAgICAgdGhpcy5kKCk7XG4gICAgICAgIHRoaXMuaChodG1sKTtcbiAgICAgICAgdGhpcy5pKHRoaXMuYSk7XG4gICAgfVxuICAgIGQoKSB7XG4gICAgICAgIHRoaXMubi5mb3JFYWNoKGRldGFjaCk7XG4gICAgfVxufVxuXG5jb25zdCBhY3RpdmVfZG9jcyA9IG5ldyBTZXQoKTtcbmxldCBhY3RpdmUgPSAwO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Rhcmtza3lhcHAvc3RyaW5nLWhhc2gvYmxvYi9tYXN0ZXIvaW5kZXguanNcbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gICAgbGV0IGhhc2ggPSA1MzgxO1xuICAgIGxldCBpID0gc3RyLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKVxuICAgICAgICBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgXiBzdHIuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gaGFzaCA+Pj4gMDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9ydWxlKG5vZGUsIGEsIGIsIGR1cmF0aW9uLCBkZWxheSwgZWFzZSwgZm4sIHVpZCA9IDApIHtcbiAgICBjb25zdCBzdGVwID0gMTYuNjY2IC8gZHVyYXRpb247XG4gICAgbGV0IGtleWZyYW1lcyA9ICd7XFxuJztcbiAgICBmb3IgKGxldCBwID0gMDsgcCA8PSAxOyBwICs9IHN0ZXApIHtcbiAgICAgICAgY29uc3QgdCA9IGEgKyAoYiAtIGEpICogZWFzZShwKTtcbiAgICAgICAga2V5ZnJhbWVzICs9IHAgKiAxMDAgKyBgJXske2ZuKHQsIDEgLSB0KX19XFxuYDtcbiAgICB9XG4gICAgY29uc3QgcnVsZSA9IGtleWZyYW1lcyArIGAxMDAlIHske2ZuKGIsIDEgLSBiKX19XFxufWA7XG4gICAgY29uc3QgbmFtZSA9IGBfX3N2ZWx0ZV8ke2hhc2gocnVsZSl9XyR7dWlkfWA7XG4gICAgY29uc3QgZG9jID0gbm9kZS5vd25lckRvY3VtZW50O1xuICAgIGFjdGl2ZV9kb2NzLmFkZChkb2MpO1xuICAgIGNvbnN0IHN0eWxlc2hlZXQgPSBkb2MuX19zdmVsdGVfc3R5bGVzaGVldCB8fCAoZG9jLl9fc3ZlbHRlX3N0eWxlc2hlZXQgPSBkb2MuaGVhZC5hcHBlbmRDaGlsZChlbGVtZW50KCdzdHlsZScpKS5zaGVldCk7XG4gICAgY29uc3QgY3VycmVudF9ydWxlcyA9IGRvYy5fX3N2ZWx0ZV9ydWxlcyB8fCAoZG9jLl9fc3ZlbHRlX3J1bGVzID0ge30pO1xuICAgIGlmICghY3VycmVudF9ydWxlc1tuYW1lXSkge1xuICAgICAgICBjdXJyZW50X3J1bGVzW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgc3R5bGVzaGVldC5pbnNlcnRSdWxlKGBAa2V5ZnJhbWVzICR7bmFtZX0gJHtydWxlfWAsIHN0eWxlc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0aW9uID0gbm9kZS5zdHlsZS5hbmltYXRpb24gfHwgJyc7XG4gICAgbm9kZS5zdHlsZS5hbmltYXRpb24gPSBgJHthbmltYXRpb24gPyBgJHthbmltYXRpb259LCBgIDogYGB9JHtuYW1lfSAke2R1cmF0aW9ufW1zIGxpbmVhciAke2RlbGF5fW1zIDEgYm90aGA7XG4gICAgYWN0aXZlICs9IDE7XG4gICAgcmV0dXJuIG5hbWU7XG59XG5mdW5jdGlvbiBkZWxldGVfcnVsZShub2RlLCBuYW1lKSB7XG4gICAgY29uc3QgcHJldmlvdXMgPSAobm9kZS5zdHlsZS5hbmltYXRpb24gfHwgJycpLnNwbGl0KCcsICcpO1xuICAgIGNvbnN0IG5leHQgPSBwcmV2aW91cy5maWx0ZXIobmFtZVxuICAgICAgICA/IGFuaW0gPT4gYW5pbS5pbmRleE9mKG5hbWUpIDwgMCAvLyByZW1vdmUgc3BlY2lmaWMgYW5pbWF0aW9uXG4gICAgICAgIDogYW5pbSA9PiBhbmltLmluZGV4T2YoJ19fc3ZlbHRlJykgPT09IC0xIC8vIHJlbW92ZSBhbGwgU3ZlbHRlIGFuaW1hdGlvbnNcbiAgICApO1xuICAgIGNvbnN0IGRlbGV0ZWQgPSBwcmV2aW91cy5sZW5ndGggLSBuZXh0Lmxlbmd0aDtcbiAgICBpZiAoZGVsZXRlZCkge1xuICAgICAgICBub2RlLnN0eWxlLmFuaW1hdGlvbiA9IG5leHQuam9pbignLCAnKTtcbiAgICAgICAgYWN0aXZlIC09IGRlbGV0ZWQ7XG4gICAgICAgIGlmICghYWN0aXZlKVxuICAgICAgICAgICAgY2xlYXJfcnVsZXMoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGVhcl9ydWxlcygpIHtcbiAgICBleHBvcnRzLnJhZigoKSA9PiB7XG4gICAgICAgIGlmIChhY3RpdmUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGFjdGl2ZV9kb2NzLmZvckVhY2goZG9jID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlc2hlZXQgPSBkb2MuX19zdmVsdGVfc3R5bGVzaGVldDtcbiAgICAgICAgICAgIGxldCBpID0gc3R5bGVzaGVldC5jc3NSdWxlcy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoaS0tKVxuICAgICAgICAgICAgICAgIHN0eWxlc2hlZXQuZGVsZXRlUnVsZShpKTtcbiAgICAgICAgICAgIGRvYy5fX3N2ZWx0ZV9ydWxlcyA9IHt9O1xuICAgICAgICB9KTtcbiAgICAgICAgYWN0aXZlX2RvY3MuY2xlYXIoKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlX2FuaW1hdGlvbihub2RlLCBmcm9tLCBmbiwgcGFyYW1zKSB7XG4gICAgaWYgKCFmcm9tKVxuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICBjb25zdCB0byA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKGZyb20ubGVmdCA9PT0gdG8ubGVmdCAmJiBmcm9tLnJpZ2h0ID09PSB0by5yaWdodCAmJiBmcm9tLnRvcCA9PT0gdG8udG9wICYmIGZyb20uYm90dG9tID09PSB0by5ib3R0b20pXG4gICAgICAgIHJldHVybiBub29wO1xuICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIFxuICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogc2hvdWxkIHRoaXMgYmUgc2VwYXJhdGVkIGZyb20gZGVzdHJ1Y3R1cmluZz8gT3Igc3RhcnQvZW5kIGFkZGVkIHRvIHB1YmxpYyBhcGkgYW5kIGRvY3VtZW50YXRpb24/XG4gICAgc3RhcnQ6IHN0YXJ0X3RpbWUgPSBleHBvcnRzLm5vdygpICsgZGVsYXksIFxuICAgIC8vIEB0cy1pZ25vcmUgdG9kbzpcbiAgICBlbmQgPSBzdGFydF90aW1lICsgZHVyYXRpb24sIHRpY2sgPSBub29wLCBjc3MgfSA9IGZuKG5vZGUsIHsgZnJvbSwgdG8gfSwgcGFyYW1zKTtcbiAgICBsZXQgcnVubmluZyA9IHRydWU7XG4gICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICBsZXQgbmFtZTtcbiAgICBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDAsIDEsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVsYXkpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBuYW1lKTtcbiAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgIH1cbiAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgIGlmICghc3RhcnRlZCAmJiBub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ZWQgJiYgbm93ID49IGVuZCkge1xuICAgICAgICAgICAgdGljaygxLCAwKTtcbiAgICAgICAgICAgIHN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJ1bm5pbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICAgICAgY29uc3QgcCA9IG5vdyAtIHN0YXJ0X3RpbWU7XG4gICAgICAgICAgICBjb25zdCB0ID0gMCArIDEgKiBlYXNpbmcocCAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIHN0YXJ0KCk7XG4gICAgdGljaygwLCAxKTtcbiAgICByZXR1cm4gc3RvcDtcbn1cbmZ1bmN0aW9uIGZpeF9wb3NpdGlvbihub2RlKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGlmIChzdHlsZS5wb3NpdGlvbiAhPT0gJ2Fic29sdXRlJyAmJiBzdHlsZS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHN0eWxlO1xuICAgICAgICBjb25zdCBhID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgbm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIG5vZGUuc3R5bGUud2lkdGggPSB3aWR0aDtcbiAgICAgICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGFkZF90cmFuc2Zvcm0obm9kZSwgYSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkX3RyYW5zZm9ybShub2RlLCBhKSB7XG4gICAgY29uc3QgYiA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKGEubGVmdCAhPT0gYi5sZWZ0IHx8IGEudG9wICE9PSBiLnRvcCkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG4gICAgICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gYCR7dHJhbnNmb3JtfSB0cmFuc2xhdGUoJHthLmxlZnQgLSBiLmxlZnR9cHgsICR7YS50b3AgLSBiLnRvcH1weClgO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgIGV4cG9ydHMuY3VycmVudF9jb21wb25lbnQgPSBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiBnZXRfY3VycmVudF9jb21wb25lbnQoKSB7XG4gICAgaWYgKCFleHBvcnRzLmN1cnJlbnRfY29tcG9uZW50KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZ1bmN0aW9uIGNhbGxlZCBvdXRzaWRlIGNvbXBvbmVudCBpbml0aWFsaXphdGlvbmApO1xuICAgIHJldHVybiBleHBvcnRzLmN1cnJlbnRfY29tcG9uZW50O1xufVxuZnVuY3Rpb24gYmVmb3JlVXBkYXRlKGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuYmVmb3JlX3VwZGF0ZS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIG9uTW91bnQoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5vbl9tb3VudC5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIGFmdGVyVXBkYXRlKGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuYWZ0ZXJfdXBkYXRlLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gb25EZXN0cm95KGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fZGVzdHJveS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpIHtcbiAgICBjb25zdCBjb21wb25lbnQgPSBnZXRfY3VycmVudF9jb21wb25lbnQoKTtcbiAgICByZXR1cm4gKHR5cGUsIGRldGFpbCkgPT4ge1xuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW3R5cGVdO1xuICAgICAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAvLyBUT0RPIGFyZSB0aGVyZSBzaXR1YXRpb25zIHdoZXJlIGV2ZW50cyBjb3VsZCBiZSBkaXNwYXRjaGVkXG4gICAgICAgICAgICAvLyBpbiBhIHNlcnZlciAobm9uLURPTSkgZW52aXJvbm1lbnQ/XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwpO1xuICAgICAgICAgICAgY2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaChmbiA9PiB7XG4gICAgICAgICAgICAgICAgZm4uY2FsbChjb21wb25lbnQsIGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNldENvbnRleHQoa2V5LCBjb250ZXh0KSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5zZXQoa2V5LCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGdldENvbnRleHQoa2V5KSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuZ2V0KGtleSk7XG59XG4vLyBUT0RPIGZpZ3VyZSBvdXQgaWYgd2Ugc3RpbGwgd2FudCB0byBzdXBwb3J0XG4vLyBzaG9ydGhhbmQgZXZlbnRzLCBvciBpZiB3ZSB3YW50IHRvIGltcGxlbWVudFxuLy8gYSByZWFsIGJ1YmJsaW5nIG1lY2hhbmlzbVxuZnVuY3Rpb24gYnViYmxlKGNvbXBvbmVudCwgZXZlbnQpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW2V2ZW50LnR5cGVdO1xuICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgY2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaChmbiA9PiBmbihldmVudCkpO1xuICAgIH1cbn1cblxuY29uc3QgZGlydHlfY29tcG9uZW50cyA9IFtdO1xuY29uc3QgaW50cm9zID0geyBlbmFibGVkOiBmYWxzZSB9O1xuY29uc3QgYmluZGluZ19jYWxsYmFja3MgPSBbXTtcbmNvbnN0IHJlbmRlcl9jYWxsYmFja3MgPSBbXTtcbmNvbnN0IGZsdXNoX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgcmVzb2x2ZWRfcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xubGV0IHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIHNjaGVkdWxlX3VwZGF0ZSgpIHtcbiAgICBpZiAoIXVwZGF0ZV9zY2hlZHVsZWQpIHtcbiAgICAgICAgdXBkYXRlX3NjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmVkX3Byb21pc2UudGhlbihmbHVzaCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdGljaygpIHtcbiAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICByZXR1cm4gcmVzb2x2ZWRfcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGFkZF9yZW5kZXJfY2FsbGJhY2soZm4pIHtcbiAgICByZW5kZXJfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gYWRkX2ZsdXNoX2NhbGxiYWNrKGZuKSB7XG4gICAgZmx1c2hfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxubGV0IGZsdXNoaW5nID0gZmFsc2U7XG5jb25zdCBzZWVuX2NhbGxiYWNrcyA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIGlmIChmbHVzaGluZylcbiAgICAgICAgcmV0dXJuO1xuICAgIGZsdXNoaW5nID0gdHJ1ZTtcbiAgICBkbyB7XG4gICAgICAgIC8vIGZpcnN0LCBjYWxsIGJlZm9yZVVwZGF0ZSBmdW5jdGlvbnNcbiAgICAgICAgLy8gYW5kIHVwZGF0ZSBjb21wb25lbnRzXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlydHlfY29tcG9uZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gZGlydHlfY29tcG9uZW50c1tpXTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGNvbXBvbmVudC4kJCk7XG4gICAgICAgIH1cbiAgICAgICAgZGlydHlfY29tcG9uZW50cy5sZW5ndGggPSAwO1xuICAgICAgICB3aGlsZSAoYmluZGluZ19jYWxsYmFja3MubGVuZ3RoKVxuICAgICAgICAgICAgYmluZGluZ19jYWxsYmFja3MucG9wKCkoKTtcbiAgICAgICAgLy8gdGhlbiwgb25jZSBjb21wb25lbnRzIGFyZSB1cGRhdGVkLCBjYWxsXG4gICAgICAgIC8vIGFmdGVyVXBkYXRlIGZ1bmN0aW9ucy4gVGhpcyBtYXkgY2F1c2VcbiAgICAgICAgLy8gc3Vic2VxdWVudCB1cGRhdGVzLi4uXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVuZGVyX2NhbGxiYWNrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSByZW5kZXJfY2FsbGJhY2tzW2ldO1xuICAgICAgICAgICAgaWYgKCFzZWVuX2NhbGxiYWNrcy5oYXMoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgLy8gLi4uc28gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBsb29wc1xuICAgICAgICAgICAgICAgIHNlZW5fY2FsbGJhY2tzLmFkZChjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZW5kZXJfY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgfSB3aGlsZSAoZGlydHlfY29tcG9uZW50cy5sZW5ndGgpO1xuICAgIHdoaWxlIChmbHVzaF9jYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgIGZsdXNoX2NhbGxiYWNrcy5wb3AoKSgpO1xuICAgIH1cbiAgICB1cGRhdGVfc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgZmx1c2hpbmcgPSBmYWxzZTtcbiAgICBzZWVuX2NhbGxiYWNrcy5jbGVhcigpO1xufVxuZnVuY3Rpb24gdXBkYXRlKCQkKSB7XG4gICAgaWYgKCQkLmZyYWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICQkLnVwZGF0ZSgpO1xuICAgICAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgICAgICBjb25zdCBkaXJ0eSA9ICQkLmRpcnR5O1xuICAgICAgICAkJC5kaXJ0eSA9IFstMV07XG4gICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LnAoJCQuY3R4LCBkaXJ0eSk7XG4gICAgICAgICQkLmFmdGVyX3VwZGF0ZS5mb3JFYWNoKGFkZF9yZW5kZXJfY2FsbGJhY2spO1xuICAgIH1cbn1cblxubGV0IHByb21pc2U7XG5mdW5jdGlvbiB3YWl0KCkge1xuICAgIGlmICghcHJvbWlzZSkge1xuICAgICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBwcm9taXNlID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2gobm9kZSwgZGlyZWN0aW9uLCBraW5kKSB7XG4gICAgbm9kZS5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudChgJHtkaXJlY3Rpb24gPyAnaW50cm8nIDogJ291dHJvJ30ke2tpbmR9YCkpO1xufVxuY29uc3Qgb3V0cm9pbmcgPSBuZXcgU2V0KCk7XG5sZXQgb3V0cm9zO1xuZnVuY3Rpb24gZ3JvdXBfb3V0cm9zKCkge1xuICAgIG91dHJvcyA9IHtcbiAgICAgICAgcjogMCxcbiAgICAgICAgYzogW10sXG4gICAgICAgIHA6IG91dHJvcyAvLyBwYXJlbnQgZ3JvdXBcbiAgICB9O1xufVxuZnVuY3Rpb24gY2hlY2tfb3V0cm9zKCkge1xuICAgIGlmICghb3V0cm9zLnIpIHtcbiAgICAgICAgcnVuX2FsbChvdXRyb3MuYyk7XG4gICAgfVxuICAgIG91dHJvcyA9IG91dHJvcy5wO1xufVxuZnVuY3Rpb24gdHJhbnNpdGlvbl9pbihibG9jaywgbG9jYWwpIHtcbiAgICBpZiAoYmxvY2sgJiYgYmxvY2suaSkge1xuICAgICAgICBvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuICAgICAgICBibG9jay5pKGxvY2FsKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX291dChibG9jaywgbG9jYWwsIGRldGFjaCwgY2FsbGJhY2spIHtcbiAgICBpZiAoYmxvY2sgJiYgYmxvY2subykge1xuICAgICAgICBpZiAob3V0cm9pbmcuaGFzKGJsb2NrKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgb3V0cm9pbmcuYWRkKGJsb2NrKTtcbiAgICAgICAgb3V0cm9zLmMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICBvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRldGFjaClcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suZCgxKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYmxvY2subyhsb2NhbCk7XG4gICAgfVxufVxuY29uc3QgbnVsbF90cmFuc2l0aW9uID0geyBkdXJhdGlvbjogMCB9O1xuZnVuY3Rpb24gY3JlYXRlX2luX3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gZmFsc2U7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lO1xuICAgIGxldCB0YXNrO1xuICAgIGxldCB1aWQgPSAwO1xuICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ28oKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDAsIDEsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MsIHVpZCsrKTtcbiAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgY29uc3Qgc3RhcnRfdGltZSA9IGV4cG9ydHMubm93KCkgKyBkZWxheTtcbiAgICAgICAgY29uc3QgZW5kX3RpbWUgPSBzdGFydF90aW1lICsgZHVyYXRpb247XG4gICAgICAgIGlmICh0YXNrKVxuICAgICAgICAgICAgdGFzay5hYm9ydCgpO1xuICAgICAgICBydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCB0cnVlLCAnc3RhcnQnKSk7XG4gICAgICAgIHRhc2sgPSBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gZW5kX3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGljaygxLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgdHJ1ZSwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0KCkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0ZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSk7XG4gICAgICAgICAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZygpO1xuICAgICAgICAgICAgICAgIHdhaXQoKS50aGVuKGdvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdvKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGludmFsaWRhdGUoKSB7XG4gICAgICAgICAgICBzdGFydGVkID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVuZCgpIHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfb3V0X3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gdHJ1ZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgY29uc3QgZ3JvdXAgPSBvdXRyb3M7XG4gICAgZ3JvdXAuciArPSAxO1xuICAgIGZ1bmN0aW9uIGdvKCkge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgICAgICBpZiAoY3NzKVxuICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAxLCAwLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgY29uc3Qgc3RhcnRfdGltZSA9IGV4cG9ydHMubm93KCkgKyBkZWxheTtcbiAgICAgICAgY29uc3QgZW5kX3RpbWUgPSBzdGFydF90aW1lICsgZHVyYXRpb247XG4gICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgZmFsc2UsICdzdGFydCcpKTtcbiAgICAgICAgbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93ID49IGVuZF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIGZhbHNlLCAnZW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghLS1ncm91cC5yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHdpbGwgcmVzdWx0IGluIGBlbmQoKWAgYmVpbmcgY2FsbGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28gd2UgZG9uJ3QgbmVlZCB0byBjbGVhbiB1cCBoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5fYWxsKGdyb3VwLmMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBzdGFydF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlYXNpbmcoKG5vdyAtIHN0YXJ0X3RpbWUpIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDEgLSB0LCB0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnVubmluZztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG4gICAgICAgIHdhaXQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZygpO1xuICAgICAgICAgICAgZ28oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBnbygpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBlbmQocmVzZXQpIHtcbiAgICAgICAgICAgIGlmIChyZXNldCAmJiBjb25maWcudGljaykge1xuICAgICAgICAgICAgICAgIGNvbmZpZy50aWNrKDEsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uX25hbWUpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICAgICAgICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zLCBpbnRybykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCB0ID0gaW50cm8gPyAwIDogMTtcbiAgICBsZXQgcnVubmluZ19wcm9ncmFtID0gbnVsbDtcbiAgICBsZXQgcGVuZGluZ19wcm9ncmFtID0gbnVsbDtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWUgPSBudWxsO1xuICAgIGZ1bmN0aW9uIGNsZWFyX2FuaW1hdGlvbigpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbml0KHByb2dyYW0sIGR1cmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IGQgPSBwcm9ncmFtLmIgLSB0O1xuICAgICAgICBkdXJhdGlvbiAqPSBNYXRoLmFicyhkKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGE6IHQsXG4gICAgICAgICAgICBiOiBwcm9ncmFtLmIsXG4gICAgICAgICAgICBkLFxuICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgICBzdGFydDogcHJvZ3JhbS5zdGFydCxcbiAgICAgICAgICAgIGVuZDogcHJvZ3JhbS5zdGFydCArIGR1cmF0aW9uLFxuICAgICAgICAgICAgZ3JvdXA6IHByb2dyYW0uZ3JvdXBcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ28oYikge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgICAgICBjb25zdCBwcm9ncmFtID0ge1xuICAgICAgICAgICAgc3RhcnQ6IGV4cG9ydHMubm93KCkgKyBkZWxheSxcbiAgICAgICAgICAgIGJcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFiKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgcHJvZ3JhbS5ncm91cCA9IG91dHJvcztcbiAgICAgICAgICAgIG91dHJvcy5yICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgcGVuZGluZ19wcm9ncmFtID0gcHJvZ3JhbTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYW4gaW50cm8sIGFuZCB0aGVyZSdzIGEgZGVsYXksIHdlIG5lZWQgdG8gZG9cbiAgICAgICAgICAgIC8vIGFuIGluaXRpYWwgdGljayBhbmQvb3IgYXBwbHkgQ1NTIGFuaW1hdGlvbiBpbW1lZGlhdGVseVxuICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgdCwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYilcbiAgICAgICAgICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gaW5pdChwcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGIsICdzdGFydCcpKTtcbiAgICAgICAgICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGVuZGluZ19wcm9ncmFtICYmIG5vdyA+IHBlbmRpbmdfcHJvZ3JhbS5zdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0KHBlbmRpbmdfcHJvZ3JhbSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ3N0YXJ0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBydW5uaW5nX3Byb2dyYW0uYiwgcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uLCAwLCBlYXNpbmcsIGNvbmZpZy5jc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrKHQgPSBydW5uaW5nX3Byb2dyYW0uYiwgMSAtIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgcnVubmluZ19wcm9ncmFtLmIsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGVuZGluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UncmUgZG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0uYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnRybyDigJQgd2UgY2FuIHRpZHkgdXAgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvdXRybyDigJQgbmVlZHMgdG8gYmUgY29vcmRpbmF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEtLXJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVuX2FsbChydW5uaW5nX3Byb2dyYW0uZ3JvdXAuYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChub3cgPj0gcnVubmluZ19wcm9ncmFtLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwID0gbm93IC0gcnVubmluZ19wcm9ncmFtLnN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IHJ1bm5pbmdfcHJvZ3JhbS5hICsgcnVubmluZ19wcm9ncmFtLmQgKiBlYXNpbmcocCAvIHJ1bm5pbmdfcHJvZ3JhbS5kdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gISEocnVubmluZ19wcm9ncmFtIHx8IHBlbmRpbmdfcHJvZ3JhbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBydW4oYikge1xuICAgICAgICAgICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICB3YWl0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICAgICAgICAgIGdvKGIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ28oYik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVuZCgpIHtcbiAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gcGVuZGluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZV9wcm9taXNlKHByb21pc2UsIGluZm8pIHtcbiAgICBjb25zdCB0b2tlbiA9IGluZm8udG9rZW4gPSB7fTtcbiAgICBmdW5jdGlvbiB1cGRhdGUodHlwZSwgaW5kZXgsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGluZm8udG9rZW4gIT09IHRva2VuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpbmZvLnJlc29sdmVkID0gdmFsdWU7XG4gICAgICAgIGxldCBjaGlsZF9jdHggPSBpbmZvLmN0eDtcbiAgICAgICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjaGlsZF9jdHggPSBjaGlsZF9jdHguc2xpY2UoKTtcbiAgICAgICAgICAgIGNoaWxkX2N0eFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxvY2sgPSB0eXBlICYmIChpbmZvLmN1cnJlbnQgPSB0eXBlKShjaGlsZF9jdHgpO1xuICAgICAgICBsZXQgbmVlZHNfZmx1c2ggPSBmYWxzZTtcbiAgICAgICAgaWYgKGluZm8uYmxvY2spIHtcbiAgICAgICAgICAgIGlmIChpbmZvLmJsb2Nrcykge1xuICAgICAgICAgICAgICAgIGluZm8uYmxvY2tzLmZvckVhY2goKGJsb2NrLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpICE9PSBpbmRleCAmJiBibG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uX291dChibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8uYmxvY2tzW2ldID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGluZm8uYmxvY2suZCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb2NrLmMoKTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuICAgICAgICAgICAgYmxvY2subShpbmZvLm1vdW50KCksIGluZm8uYW5jaG9yKTtcbiAgICAgICAgICAgIG5lZWRzX2ZsdXNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpbmZvLmJsb2NrID0gYmxvY2s7XG4gICAgICAgIGlmIChpbmZvLmJsb2NrcylcbiAgICAgICAgICAgIGluZm8uYmxvY2tzW2luZGV4XSA9IGJsb2NrO1xuICAgICAgICBpZiAobmVlZHNfZmx1c2gpIHtcbiAgICAgICAgICAgIGZsdXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzX3Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgY29uc3QgY3VycmVudF9jb21wb25lbnQgPSBnZXRfY3VycmVudF9jb21wb25lbnQoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby5jYXRjaCwgMiwgaW5mby5lcnJvciwgZXJyb3IpO1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gaWYgd2UgcHJldmlvdXNseSBoYWQgYSB0aGVuL2NhdGNoIGJsb2NrLCBkZXN0cm95IGl0XG4gICAgICAgIGlmIChpbmZvLmN1cnJlbnQgIT09IGluZm8ucGVuZGluZykge1xuICAgICAgICAgICAgdXBkYXRlKGluZm8ucGVuZGluZywgMCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby50aGVuKSB7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGluZm8ucmVzb2x2ZWQgPSBwcm9taXNlO1xuICAgIH1cbn1cblxuY29uc3QgZ2xvYmFscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgID8gd2luZG93XG4gICAgOiB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyBnbG9iYWxUaGlzXG4gICAgICAgIDogZ2xvYmFsKTtcblxuZnVuY3Rpb24gZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZCgxKTtcbiAgICBsb29rdXAuZGVsZXRlKGJsb2NrLmtleSk7XG59XG5mdW5jdGlvbiBvdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgdHJhbnNpdGlvbl9vdXQoYmxvY2ssIDEsIDEsICgpID0+IHtcbiAgICAgICAgbG9va3VwLmRlbGV0ZShibG9jay5rZXkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZml4X2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5mKCk7XG4gICAgZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKTtcbn1cbmZ1bmN0aW9uIGZpeF9hbmRfb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmYoKTtcbiAgICBvdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9rZXllZF9lYWNoKG9sZF9ibG9ja3MsIGRpcnR5LCBnZXRfa2V5LCBkeW5hbWljLCBjdHgsIGxpc3QsIGxvb2t1cCwgbm9kZSwgZGVzdHJveSwgY3JlYXRlX2VhY2hfYmxvY2ssIG5leHQsIGdldF9jb250ZXh0KSB7XG4gICAgbGV0IG8gPSBvbGRfYmxvY2tzLmxlbmd0aDtcbiAgICBsZXQgbiA9IGxpc3QubGVuZ3RoO1xuICAgIGxldCBpID0gbztcbiAgICBjb25zdCBvbGRfaW5kZXhlcyA9IHt9O1xuICAgIHdoaWxlIChpLS0pXG4gICAgICAgIG9sZF9pbmRleGVzW29sZF9ibG9ja3NbaV0ua2V5XSA9IGk7XG4gICAgY29uc3QgbmV3X2Jsb2NrcyA9IFtdO1xuICAgIGNvbnN0IG5ld19sb29rdXAgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgZGVsdGFzID0gbmV3IE1hcCgpO1xuICAgIGkgPSBuO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29uc3QgY2hpbGRfY3R4ID0gZ2V0X2NvbnRleHQoY3R4LCBsaXN0LCBpKTtcbiAgICAgICAgY29uc3Qga2V5ID0gZ2V0X2tleShjaGlsZF9jdHgpO1xuICAgICAgICBsZXQgYmxvY2sgPSBsb29rdXAuZ2V0KGtleSk7XG4gICAgICAgIGlmICghYmxvY2spIHtcbiAgICAgICAgICAgIGJsb2NrID0gY3JlYXRlX2VhY2hfYmxvY2soa2V5LCBjaGlsZF9jdHgpO1xuICAgICAgICAgICAgYmxvY2suYygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGR5bmFtaWMpIHtcbiAgICAgICAgICAgIGJsb2NrLnAoY2hpbGRfY3R4LCBkaXJ0eSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3X2xvb2t1cC5zZXQoa2V5LCBuZXdfYmxvY2tzW2ldID0gYmxvY2spO1xuICAgICAgICBpZiAoa2V5IGluIG9sZF9pbmRleGVzKVxuICAgICAgICAgICAgZGVsdGFzLnNldChrZXksIE1hdGguYWJzKGkgLSBvbGRfaW5kZXhlc1trZXldKSk7XG4gICAgfVxuICAgIGNvbnN0IHdpbGxfbW92ZSA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCBkaWRfbW92ZSA9IG5ldyBTZXQoKTtcbiAgICBmdW5jdGlvbiBpbnNlcnQoYmxvY2spIHtcbiAgICAgICAgdHJhbnNpdGlvbl9pbihibG9jaywgMSk7XG4gICAgICAgIGJsb2NrLm0obm9kZSwgbmV4dCk7XG4gICAgICAgIGxvb2t1cC5zZXQoYmxvY2sua2V5LCBibG9jayk7XG4gICAgICAgIG5leHQgPSBibG9jay5maXJzdDtcbiAgICAgICAgbi0tO1xuICAgIH1cbiAgICB3aGlsZSAobyAmJiBuKSB7XG4gICAgICAgIGNvbnN0IG5ld19ibG9jayA9IG5ld19ibG9ja3NbbiAtIDFdO1xuICAgICAgICBjb25zdCBvbGRfYmxvY2sgPSBvbGRfYmxvY2tzW28gLSAxXTtcbiAgICAgICAgY29uc3QgbmV3X2tleSA9IG5ld19ibG9jay5rZXk7XG4gICAgICAgIGNvbnN0IG9sZF9rZXkgPSBvbGRfYmxvY2sua2V5O1xuICAgICAgICBpZiAobmV3X2Jsb2NrID09PSBvbGRfYmxvY2spIHtcbiAgICAgICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgICAgICAgIG5leHQgPSBuZXdfYmxvY2suZmlyc3Q7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgICAgICBuLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIW5ld19sb29rdXAuaGFzKG9sZF9rZXkpKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgb2xkIGJsb2NrXG4gICAgICAgICAgICBkZXN0cm95KG9sZF9ibG9jaywgbG9va3VwKTtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghbG9va3VwLmhhcyhuZXdfa2V5KSB8fCB3aWxsX21vdmUuaGFzKG5ld19rZXkpKSB7XG4gICAgICAgICAgICBpbnNlcnQobmV3X2Jsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkaWRfbW92ZS5oYXMob2xkX2tleSkpIHtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZWx0YXMuZ2V0KG5ld19rZXkpID4gZGVsdGFzLmdldChvbGRfa2V5KSkge1xuICAgICAgICAgICAgZGlkX21vdmUuYWRkKG5ld19rZXkpO1xuICAgICAgICAgICAgaW5zZXJ0KG5ld19ibG9jayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3aWxsX21vdmUuYWRkKG9sZF9rZXkpO1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChvLS0pIHtcbiAgICAgICAgY29uc3Qgb2xkX2Jsb2NrID0gb2xkX2Jsb2Nrc1tvXTtcbiAgICAgICAgaWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfYmxvY2sua2V5KSlcbiAgICAgICAgICAgIGRlc3Ryb3kob2xkX2Jsb2NrLCBsb29rdXApO1xuICAgIH1cbiAgICB3aGlsZSAobilcbiAgICAgICAgaW5zZXJ0KG5ld19ibG9ja3NbbiAtIDFdKTtcbiAgICByZXR1cm4gbmV3X2Jsb2Nrcztcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX2VhY2hfa2V5cyhjdHgsIGxpc3QsIGdldF9jb250ZXh0LCBnZXRfa2V5KSB7XG4gICAgY29uc3Qga2V5cyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gZ2V0X2tleShnZXRfY29udGV4dChjdHgsIGxpc3QsIGkpKTtcbiAgICAgICAgaWYgKGtleXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGhhdmUgZHVwbGljYXRlIGtleXMgaW4gYSBrZXllZCBlYWNoYCk7XG4gICAgICAgIH1cbiAgICAgICAga2V5cy5hZGQoa2V5KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldF9zcHJlYWRfdXBkYXRlKGxldmVscywgdXBkYXRlcykge1xuICAgIGNvbnN0IHVwZGF0ZSA9IHt9O1xuICAgIGNvbnN0IHRvX251bGxfb3V0ID0ge307XG4gICAgY29uc3QgYWNjb3VudGVkX2ZvciA9IHsgJCRzY29wZTogMSB9O1xuICAgIGxldCBpID0gbGV2ZWxzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvbnN0IG8gPSBsZXZlbHNbaV07XG4gICAgICAgIGNvbnN0IG4gPSB1cGRhdGVzW2ldO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbykge1xuICAgICAgICAgICAgICAgIGlmICghKGtleSBpbiBuKSlcbiAgICAgICAgICAgICAgICAgICAgdG9fbnVsbF9vdXRba2V5XSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhY2NvdW50ZWRfZm9yW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlW2tleV0gPSBuW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRlZF9mb3Jba2V5XSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV2ZWxzW2ldID0gbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG8pIHtcbiAgICAgICAgICAgICAgICBhY2NvdW50ZWRfZm9yW2tleV0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIHRvX251bGxfb3V0KSB7XG4gICAgICAgIGlmICghKGtleSBpbiB1cGRhdGUpKVxuICAgICAgICAgICAgdXBkYXRlW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB1cGRhdGU7XG59XG5mdW5jdGlvbiBnZXRfc3ByZWFkX29iamVjdChzcHJlYWRfcHJvcHMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNwcmVhZF9wcm9wcyA9PT0gJ29iamVjdCcgJiYgc3ByZWFkX3Byb3BzICE9PSBudWxsID8gc3ByZWFkX3Byb3BzIDoge307XG59XG5cbi8vIHNvdXJjZTogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5kaWNlcy5odG1sXG5jb25zdCBib29sZWFuX2F0dHJpYnV0ZXMgPSBuZXcgU2V0KFtcbiAgICAnYWxsb3dmdWxsc2NyZWVuJyxcbiAgICAnYWxsb3dwYXltZW50cmVxdWVzdCcsXG4gICAgJ2FzeW5jJyxcbiAgICAnYXV0b2ZvY3VzJyxcbiAgICAnYXV0b3BsYXknLFxuICAgICdjaGVja2VkJyxcbiAgICAnY29udHJvbHMnLFxuICAgICdkZWZhdWx0JyxcbiAgICAnZGVmZXInLFxuICAgICdkaXNhYmxlZCcsXG4gICAgJ2Zvcm1ub3ZhbGlkYXRlJyxcbiAgICAnaGlkZGVuJyxcbiAgICAnaXNtYXAnLFxuICAgICdsb29wJyxcbiAgICAnbXVsdGlwbGUnLFxuICAgICdtdXRlZCcsXG4gICAgJ25vbW9kdWxlJyxcbiAgICAnbm92YWxpZGF0ZScsXG4gICAgJ29wZW4nLFxuICAgICdwbGF5c2lubGluZScsXG4gICAgJ3JlYWRvbmx5JyxcbiAgICAncmVxdWlyZWQnLFxuICAgICdyZXZlcnNlZCcsXG4gICAgJ3NlbGVjdGVkJ1xuXSk7XG5cbmNvbnN0IGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyID0gL1tcXHMnXCI+Lz1cXHV7RkREMH0tXFx1e0ZERUZ9XFx1e0ZGRkV9XFx1e0ZGRkZ9XFx1ezFGRkZFfVxcdXsxRkZGRn1cXHV7MkZGRkV9XFx1ezJGRkZGfVxcdXszRkZGRX1cXHV7M0ZGRkZ9XFx1ezRGRkZFfVxcdXs0RkZGRn1cXHV7NUZGRkV9XFx1ezVGRkZGfVxcdXs2RkZGRX1cXHV7NkZGRkZ9XFx1ezdGRkZFfVxcdXs3RkZGRn1cXHV7OEZGRkV9XFx1ezhGRkZGfVxcdXs5RkZGRX1cXHV7OUZGRkZ9XFx1e0FGRkZFfVxcdXtBRkZGRn1cXHV7QkZGRkV9XFx1e0JGRkZGfVxcdXtDRkZGRX1cXHV7Q0ZGRkZ9XFx1e0RGRkZFfVxcdXtERkZGRn1cXHV7RUZGRkV9XFx1e0VGRkZGfVxcdXtGRkZGRX1cXHV7RkZGRkZ9XFx1ezEwRkZGRX1cXHV7MTBGRkZGfV0vdTtcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuLy8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI25vbmNoYXJhY3RlclxuZnVuY3Rpb24gc3ByZWFkKGFyZ3MsIGNsYXNzZXNfdG9fYWRkKSB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oe30sIC4uLmFyZ3MpO1xuICAgIGlmIChjbGFzc2VzX3RvX2FkZCkge1xuICAgICAgICBpZiAoYXR0cmlidXRlcy5jbGFzcyA9PSBudWxsKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLmNsYXNzID0gY2xhc3Nlc190b19hZGQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLmNsYXNzICs9ICcgJyArIGNsYXNzZXNfdG9fYWRkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBzdHIgPSAnJztcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICBpZiAoaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIudGVzdChuYW1lKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUgPT09IHRydWUpXG4gICAgICAgICAgICBzdHIgKz0gXCIgXCIgKyBuYW1lO1xuICAgICAgICBlbHNlIGlmIChib29sZWFuX2F0dHJpYnV0ZXMuaGFzKG5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSlcbiAgICAgICAgICAgICAgICBzdHIgKz0gXCIgXCIgKyBuYW1lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHN0ciArPSBgICR7bmFtZX09XCIke1N0cmluZyh2YWx1ZSkucmVwbGFjZSgvXCIvZywgJyYjMzQ7JykucmVwbGFjZSgvJy9nLCAnJiMzOTsnKX1cImA7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc3RyO1xufVxuY29uc3QgZXNjYXBlZCA9IHtcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7JyxcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0Oydcbn07XG5mdW5jdGlvbiBlc2NhcGUoaHRtbCkge1xuICAgIHJldHVybiBTdHJpbmcoaHRtbCkucmVwbGFjZSgvW1wiJyY8Pl0vZywgbWF0Y2ggPT4gZXNjYXBlZFttYXRjaF0pO1xufVxuZnVuY3Rpb24gZWFjaChpdGVtcywgZm4pIHtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzdHIgKz0gZm4oaXRlbXNbaV0sIGkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuY29uc3QgbWlzc2luZ19jb21wb25lbnQgPSB7XG4gICAgJCRyZW5kZXI6ICgpID0+ICcnXG59O1xuZnVuY3Rpb24gdmFsaWRhdGVfY29tcG9uZW50KGNvbXBvbmVudCwgbmFtZSkge1xuICAgIGlmICghY29tcG9uZW50IHx8ICFjb21wb25lbnQuJCRyZW5kZXIpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdzdmVsdGU6Y29tcG9uZW50JylcbiAgICAgICAgICAgIG5hbWUgKz0gJyB0aGlzPXsuLi59JztcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGA8JHtuYW1lfT4gaXMgbm90IGEgdmFsaWQgU1NSIGNvbXBvbmVudC4gWW91IG1heSBuZWVkIHRvIHJldmlldyB5b3VyIGJ1aWxkIGNvbmZpZyB0byBlbnN1cmUgdGhhdCBkZXBlbmRlbmNpZXMgYXJlIGNvbXBpbGVkLCByYXRoZXIgdGhhbiBpbXBvcnRlZCBhcyBwcmUtY29tcGlsZWQgbW9kdWxlc2ApO1xuICAgIH1cbiAgICByZXR1cm4gY29tcG9uZW50O1xufVxuZnVuY3Rpb24gZGVidWcoZmlsZSwgbGluZSwgY29sdW1uLCB2YWx1ZXMpIHtcbiAgICBjb25zb2xlLmxvZyhge0BkZWJ1Z30gJHtmaWxlID8gZmlsZSArICcgJyA6ICcnfSgke2xpbmV9OiR7Y29sdW1ufSlgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2codmFsdWVzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgcmV0dXJuICcnO1xufVxubGV0IG9uX2Rlc3Ryb3k7XG5mdW5jdGlvbiBjcmVhdGVfc3NyX2NvbXBvbmVudChmbikge1xuICAgIGZ1bmN0aW9uICQkcmVuZGVyKHJlc3VsdCwgcHJvcHMsIGJpbmRpbmdzLCBzbG90cykge1xuICAgICAgICBjb25zdCBwYXJlbnRfY29tcG9uZW50ID0gZXhwb3J0cy5jdXJyZW50X2NvbXBvbmVudDtcbiAgICAgICAgY29uc3QgJCQgPSB7XG4gICAgICAgICAgICBvbl9kZXN0cm95LFxuICAgICAgICAgICAgY29udGV4dDogbmV3IE1hcChwYXJlbnRfY29tcG9uZW50ID8gcGFyZW50X2NvbXBvbmVudC4kJC5jb250ZXh0IDogW10pLFxuICAgICAgICAgICAgLy8gdGhlc2Ugd2lsbCBiZSBpbW1lZGlhdGVseSBkaXNjYXJkZWRcbiAgICAgICAgICAgIG9uX21vdW50OiBbXSxcbiAgICAgICAgICAgIGJlZm9yZV91cGRhdGU6IFtdLFxuICAgICAgICAgICAgYWZ0ZXJfdXBkYXRlOiBbXSxcbiAgICAgICAgICAgIGNhbGxiYWNrczogYmxhbmtfb2JqZWN0KClcbiAgICAgICAgfTtcbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHsgJCQgfSk7XG4gICAgICAgIGNvbnN0IGh0bWwgPSBmbihyZXN1bHQsIHByb3BzLCBiaW5kaW5ncywgc2xvdHMpO1xuICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG4gICAgICAgIHJldHVybiBodG1sO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByZW5kZXI6IChwcm9wcyA9IHt9LCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgICAgIG9uX2Rlc3Ryb3kgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgdGl0bGU6ICcnLCBoZWFkOiAnJywgY3NzOiBuZXcgU2V0KCkgfTtcbiAgICAgICAgICAgIGNvbnN0IGh0bWwgPSAkJHJlbmRlcihyZXN1bHQsIHByb3BzLCB7fSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBydW5fYWxsKG9uX2Rlc3Ryb3kpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBodG1sLFxuICAgICAgICAgICAgICAgIGNzczoge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBBcnJheS5mcm9tKHJlc3VsdC5jc3MpLm1hcChjc3MgPT4gY3NzLmNvZGUpLmpvaW4oJ1xcbicpLFxuICAgICAgICAgICAgICAgICAgICBtYXA6IG51bGwgLy8gVE9ET1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGVhZDogcmVzdWx0LnRpdGxlICsgcmVzdWx0LmhlYWRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgICQkcmVuZGVyXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGFkZF9hdHRyaWJ1dGUobmFtZSwgdmFsdWUsIGJvb2xlYW4pIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCAoYm9vbGVhbiAmJiAhdmFsdWUpKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgcmV0dXJuIGAgJHtuYW1lfSR7dmFsdWUgPT09IHRydWUgPyAnJyA6IGA9JHt0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gSlNPTi5zdHJpbmdpZnkoZXNjYXBlKHZhbHVlKSkgOiBgXCIke3ZhbHVlfVwiYH1gfWA7XG59XG5mdW5jdGlvbiBhZGRfY2xhc3NlcyhjbGFzc2VzKSB7XG4gICAgcmV0dXJuIGNsYXNzZXMgPyBgIGNsYXNzPVwiJHtjbGFzc2VzfVwiYCA6IGBgO1xufVxuXG5mdW5jdGlvbiBiaW5kKGNvbXBvbmVudCwgbmFtZSwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBpbmRleCA9IGNvbXBvbmVudC4kJC5wcm9wc1tuYW1lXTtcbiAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb21wb25lbnQuJCQuYm91bmRbaW5kZXhdID0gY2FsbGJhY2s7XG4gICAgICAgIGNhbGxiYWNrKGNvbXBvbmVudC4kJC5jdHhbaW5kZXhdKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVfY29tcG9uZW50KGJsb2NrKSB7XG4gICAgYmxvY2sgJiYgYmxvY2suYygpO1xufVxuZnVuY3Rpb24gY2xhaW1fY29tcG9uZW50KGJsb2NrLCBwYXJlbnRfbm9kZXMpIHtcbiAgICBibG9jayAmJiBibG9jay5sKHBhcmVudF9ub2Rlcyk7XG59XG5mdW5jdGlvbiBtb3VudF9jb21wb25lbnQoY29tcG9uZW50LCB0YXJnZXQsIGFuY2hvcikge1xuICAgIGNvbnN0IHsgZnJhZ21lbnQsIG9uX21vdW50LCBvbl9kZXN0cm95LCBhZnRlcl91cGRhdGUgfSA9IGNvbXBvbmVudC4kJDtcbiAgICBmcmFnbWVudCAmJiBmcmFnbWVudC5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAvLyBvbk1vdW50IGhhcHBlbnMgYmVmb3JlIHRoZSBpbml0aWFsIGFmdGVyVXBkYXRlXG4gICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld19vbl9kZXN0cm95ID0gb25fbW91bnQubWFwKHJ1bikuZmlsdGVyKGlzX2Z1bmN0aW9uKTtcbiAgICAgICAgaWYgKG9uX2Rlc3Ryb3kpIHtcbiAgICAgICAgICAgIG9uX2Rlc3Ryb3kucHVzaCguLi5uZXdfb25fZGVzdHJveSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBFZGdlIGNhc2UgLSBjb21wb25lbnQgd2FzIGRlc3Ryb3llZCBpbW1lZGlhdGVseSxcbiAgICAgICAgICAgIC8vIG1vc3QgbGlrZWx5IGFzIGEgcmVzdWx0IG9mIGEgYmluZGluZyBpbml0aWFsaXNpbmdcbiAgICAgICAgICAgIHJ1bl9hbGwobmV3X29uX2Rlc3Ryb3kpO1xuICAgICAgICB9XG4gICAgICAgIGNvbXBvbmVudC4kJC5vbl9tb3VudCA9IFtdO1xuICAgIH0pO1xuICAgIGFmdGVyX3VwZGF0ZS5mb3JFYWNoKGFkZF9yZW5kZXJfY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gZGVzdHJveV9jb21wb25lbnQoY29tcG9uZW50LCBkZXRhY2hpbmcpIHtcbiAgICBjb25zdCAkJCA9IGNvbXBvbmVudC4kJDtcbiAgICBpZiAoJCQuZnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgcnVuX2FsbCgkJC5vbl9kZXN0cm95KTtcbiAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQuZChkZXRhY2hpbmcpO1xuICAgICAgICAvLyBUT0RPIG51bGwgb3V0IG90aGVyIHJlZnMsIGluY2x1ZGluZyBjb21wb25lbnQuJCQgKGJ1dCBuZWVkIHRvXG4gICAgICAgIC8vIHByZXNlcnZlIGZpbmFsIHN0YXRlPylcbiAgICAgICAgJCQub25fZGVzdHJveSA9ICQkLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgICAgJCQuY3R4ID0gW107XG4gICAgfVxufVxuZnVuY3Rpb24gbWFrZV9kaXJ0eShjb21wb25lbnQsIGkpIHtcbiAgICBpZiAoY29tcG9uZW50LiQkLmRpcnR5WzBdID09PSAtMSkge1xuICAgICAgICBkaXJ0eV9jb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICAgICAgc2NoZWR1bGVfdXBkYXRlKCk7XG4gICAgICAgIGNvbXBvbmVudC4kJC5kaXJ0eS5maWxsKDApO1xuICAgIH1cbiAgICBjb21wb25lbnQuJCQuZGlydHlbKGkgLyAzMSkgfCAwXSB8PSAoMSA8PCAoaSAlIDMxKSk7XG59XG5mdW5jdGlvbiBpbml0KGNvbXBvbmVudCwgb3B0aW9ucywgaW5zdGFuY2UsIGNyZWF0ZV9mcmFnbWVudCwgbm90X2VxdWFsLCBwcm9wcywgZGlydHkgPSBbLTFdKSB7XG4gICAgY29uc3QgcGFyZW50X2NvbXBvbmVudCA9IGV4cG9ydHMuY3VycmVudF9jb21wb25lbnQ7XG4gICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgY29uc3QgcHJvcF92YWx1ZXMgPSBvcHRpb25zLnByb3BzIHx8IHt9O1xuICAgIGNvbnN0ICQkID0gY29tcG9uZW50LiQkID0ge1xuICAgICAgICBmcmFnbWVudDogbnVsbCxcbiAgICAgICAgY3R4OiBudWxsLFxuICAgICAgICAvLyBzdGF0ZVxuICAgICAgICBwcm9wcyxcbiAgICAgICAgdXBkYXRlOiBub29wLFxuICAgICAgICBub3RfZXF1YWwsXG4gICAgICAgIGJvdW5kOiBibGFua19vYmplY3QoKSxcbiAgICAgICAgLy8gbGlmZWN5Y2xlXG4gICAgICAgIG9uX21vdW50OiBbXSxcbiAgICAgICAgb25fZGVzdHJveTogW10sXG4gICAgICAgIGJlZm9yZV91cGRhdGU6IFtdLFxuICAgICAgICBhZnRlcl91cGRhdGU6IFtdLFxuICAgICAgICBjb250ZXh0OiBuZXcgTWFwKHBhcmVudF9jb21wb25lbnQgPyBwYXJlbnRfY29tcG9uZW50LiQkLmNvbnRleHQgOiBbXSksXG4gICAgICAgIC8vIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICBjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICBkaXJ0eSxcbiAgICAgICAgc2tpcF9ib3VuZDogZmFsc2VcbiAgICB9O1xuICAgIGxldCByZWFkeSA9IGZhbHNlO1xuICAgICQkLmN0eCA9IGluc3RhbmNlXG4gICAgICAgID8gaW5zdGFuY2UoY29tcG9uZW50LCBwcm9wX3ZhbHVlcywgKGksIHJldCwgLi4ucmVzdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByZXN0Lmxlbmd0aCA/IHJlc3RbMF0gOiByZXQ7XG4gICAgICAgICAgICBpZiAoJCQuY3R4ICYmIG5vdF9lcXVhbCgkJC5jdHhbaV0sICQkLmN0eFtpXSA9IHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmICghJCQuc2tpcF9ib3VuZCAmJiAkJC5ib3VuZFtpXSlcbiAgICAgICAgICAgICAgICAgICAgJCQuYm91bmRbaV0odmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChyZWFkeSlcbiAgICAgICAgICAgICAgICAgICAgbWFrZV9kaXJ0eShjb21wb25lbnQsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfSlcbiAgICAgICAgOiBbXTtcbiAgICAkJC51cGRhdGUoKTtcbiAgICByZWFkeSA9IHRydWU7XG4gICAgcnVuX2FsbCgkJC5iZWZvcmVfdXBkYXRlKTtcbiAgICAvLyBgZmFsc2VgIGFzIGEgc3BlY2lhbCBjYXNlIG9mIG5vIERPTSBjb21wb25lbnRcbiAgICAkJC5mcmFnbWVudCA9IGNyZWF0ZV9mcmFnbWVudCA/IGNyZWF0ZV9mcmFnbWVudCgkJC5jdHgpIDogZmFsc2U7XG4gICAgaWYgKG9wdGlvbnMudGFyZ2V0KSB7XG4gICAgICAgIGlmIChvcHRpb25zLmh5ZHJhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVzID0gY2hpbGRyZW4ob3B0aW9ucy50YXJnZXQpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50Lmwobm9kZXMpO1xuICAgICAgICAgICAgbm9kZXMuZm9yRWFjaChkZXRhY2gpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LmMoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5pbnRybylcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oY29tcG9uZW50LiQkLmZyYWdtZW50KTtcbiAgICAgICAgbW91bnRfY29tcG9uZW50KGNvbXBvbmVudCwgb3B0aW9ucy50YXJnZXQsIG9wdGlvbnMuYW5jaG9yKTtcbiAgICAgICAgZmx1c2goKTtcbiAgICB9XG4gICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHBhcmVudF9jb21wb25lbnQpO1xufVxuaWYgKHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV4cG9ydHMuU3ZlbHRlRWxlbWVudCA9IGNsYXNzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLiQkLnNsb3R0ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy4kJC5zbG90dGVkW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyLCBfb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzW2F0dHJdID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgJGRlc3Ryb3koKSB7XG4gICAgICAgICAgICBkZXN0cm95X2NvbXBvbmVudCh0aGlzLCAxKTtcbiAgICAgICAgICAgIHRoaXMuJGRlc3Ryb3kgPSBub29wO1xuICAgICAgICB9XG4gICAgICAgICRvbih0eXBlLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gVE9ETyBzaG91bGQgdGhpcyBkZWxlZ2F0ZSB0byBhZGRFdmVudExpc3RlbmVyP1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdIHx8ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSA9IFtdKSk7XG4gICAgICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gY2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAkc2V0KCQkcHJvcHMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLiQkc2V0ICYmICFpc19lbXB0eSgkJHByb3BzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy4kJHNldCgkJHByb3BzKTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5jbGFzcyBTdmVsdGVDb21wb25lbnQge1xuICAgICRkZXN0cm95KCkge1xuICAgICAgICBkZXN0cm95X2NvbXBvbmVudCh0aGlzLCAxKTtcbiAgICAgICAgdGhpcy4kZGVzdHJveSA9IG5vb3A7XG4gICAgfVxuICAgICRvbih0eXBlLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gfHwgKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdID0gW10pKTtcbiAgICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAkc2V0KCQkcHJvcHMpIHtcbiAgICAgICAgaWYgKHRoaXMuJCRzZXQgJiYgIWlzX2VtcHR5KCQkcHJvcHMpKSB7XG4gICAgICAgICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy4kJHNldCgkJHByb3BzKTtcbiAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkaXNwYXRjaF9kZXYodHlwZSwgZGV0YWlsKSB7XG4gICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChjdXN0b21fZXZlbnQodHlwZSwgT2JqZWN0LmFzc2lnbih7IHZlcnNpb246ICczLjI0LjEnIH0sIGRldGFpbCkpKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9kZXYodGFyZ2V0LCBub2RlKSB7XG4gICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NSW5zZXJ0XCIsIHsgdGFyZ2V0LCBub2RlIH0pO1xuICAgIGFwcGVuZCh0YXJnZXQsIG5vZGUpO1xufVxuZnVuY3Rpb24gaW5zZXJ0X2Rldih0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTUluc2VydFwiLCB7IHRhcmdldCwgbm9kZSwgYW5jaG9yIH0pO1xuICAgIGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcik7XG59XG5mdW5jdGlvbiBkZXRhY2hfZGV2KG5vZGUpIHtcbiAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01SZW1vdmVcIiwgeyBub2RlIH0pO1xuICAgIGRldGFjaChub2RlKTtcbn1cbmZ1bmN0aW9uIGRldGFjaF9iZXR3ZWVuX2RldihiZWZvcmUsIGFmdGVyKSB7XG4gICAgd2hpbGUgKGJlZm9yZS5uZXh0U2libGluZyAmJiBiZWZvcmUubmV4dFNpYmxpbmcgIT09IGFmdGVyKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYmVmb3JlLm5leHRTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2hfYmVmb3JlX2RldihhZnRlcikge1xuICAgIHdoaWxlIChhZnRlci5wcmV2aW91c1NpYmxpbmcpIHtcbiAgICAgICAgZGV0YWNoX2RldihhZnRlci5wcmV2aW91c1NpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGFjaF9hZnRlcl9kZXYoYmVmb3JlKSB7XG4gICAgd2hpbGUgKGJlZm9yZS5uZXh0U2libGluZykge1xuICAgICAgICBkZXRhY2hfZGV2KGJlZm9yZS5uZXh0U2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gbGlzdGVuX2Rldihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucywgaGFzX3ByZXZlbnRfZGVmYXVsdCwgaGFzX3N0b3BfcHJvcGFnYXRpb24pIHtcbiAgICBjb25zdCBtb2RpZmllcnMgPSBvcHRpb25zID09PSB0cnVlID8gW1wiY2FwdHVyZVwiXSA6IG9wdGlvbnMgPyBBcnJheS5mcm9tKE9iamVjdC5rZXlzKG9wdGlvbnMpKSA6IFtdO1xuICAgIGlmIChoYXNfcHJldmVudF9kZWZhdWx0KVxuICAgICAgICBtb2RpZmllcnMucHVzaCgncHJldmVudERlZmF1bHQnKTtcbiAgICBpZiAoaGFzX3N0b3BfcHJvcGFnYXRpb24pXG4gICAgICAgIG1vZGlmaWVycy5wdXNoKCdzdG9wUHJvcGFnYXRpb24nKTtcbiAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01BZGRFdmVudExpc3RlbmVyXCIsIHsgbm9kZSwgZXZlbnQsIGhhbmRsZXIsIG1vZGlmaWVycyB9KTtcbiAgICBjb25zdCBkaXNwb3NlID0gbGlzdGVuKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01SZW1vdmVFdmVudExpc3RlbmVyXCIsIHsgbm9kZSwgZXZlbnQsIGhhbmRsZXIsIG1vZGlmaWVycyB9KTtcbiAgICAgICAgZGlzcG9zZSgpO1xuICAgIH07XG59XG5mdW5jdGlvbiBhdHRyX2Rldihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NUmVtb3ZlQXR0cmlidXRlXCIsIHsgbm9kZSwgYXR0cmlidXRlIH0pO1xuICAgIGVsc2VcbiAgICAgICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NU2V0QXR0cmlidXRlXCIsIHsgbm9kZSwgYXR0cmlidXRlLCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIHByb3BfZGV2KG5vZGUsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIG5vZGVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NU2V0UHJvcGVydHlcIiwgeyBub2RlLCBwcm9wZXJ0eSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBkYXRhc2V0X2Rldihub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBub2RlLmRhdGFzZXRbcHJvcGVydHldID0gdmFsdWU7XG4gICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NU2V0RGF0YXNldFwiLCB7IG5vZGUsIHByb3BlcnR5LCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIHNldF9kYXRhX2Rldih0ZXh0LCBkYXRhKSB7XG4gICAgZGF0YSA9ICcnICsgZGF0YTtcbiAgICBpZiAodGV4dC53aG9sZVRleHQgPT09IGRhdGEpXG4gICAgICAgIHJldHVybjtcbiAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01TZXREYXRhXCIsIHsgbm9kZTogdGV4dCwgZGF0YSB9KTtcbiAgICB0ZXh0LmRhdGEgPSBkYXRhO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfZWFjaF9hcmd1bWVudChhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ3N0cmluZycgJiYgIShhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gYXJnKSkge1xuICAgICAgICBsZXQgbXNnID0gJ3sjZWFjaH0gb25seSBpdGVyYXRlcyBvdmVyIGFycmF5LWxpa2Ugb2JqZWN0cy4nO1xuICAgICAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBhcmcgJiYgU3ltYm9sLml0ZXJhdG9yIGluIGFyZykge1xuICAgICAgICAgICAgbXNnICs9ICcgWW91IGNhbiB1c2UgYSBzcHJlYWQgdG8gY29udmVydCB0aGlzIGl0ZXJhYmxlIGludG8gYW4gYXJyYXkuJztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9zbG90cyhuYW1lLCBzbG90LCBrZXlzKSB7XG4gICAgZm9yIChjb25zdCBzbG90X2tleSBvZiBPYmplY3Qua2V5cyhzbG90KSkge1xuICAgICAgICBpZiAoIX5rZXlzLmluZGV4T2Yoc2xvdF9rZXkpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYDwke25hbWV9PiByZWNlaXZlZCBhbiB1bmV4cGVjdGVkIHNsb3QgXCIke3Nsb3Rfa2V5fVwiLmApO1xuICAgICAgICB9XG4gICAgfVxufVxuY2xhc3MgU3ZlbHRlQ29tcG9uZW50RGV2IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucyB8fCAoIW9wdGlvbnMudGFyZ2V0ICYmICFvcHRpb25zLiQkaW5saW5lKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAndGFyZ2V0JyBpcyBhIHJlcXVpcmVkIG9wdGlvbmApO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgICRkZXN0cm95KCkge1xuICAgICAgICBzdXBlci4kZGVzdHJveSgpO1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBDb21wb25lbnQgd2FzIGFscmVhZHkgZGVzdHJveWVkYCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICB9O1xuICAgIH1cbiAgICAkY2FwdHVyZV9zdGF0ZSgpIHsgfVxuICAgICRpbmplY3Rfc3RhdGUoKSB7IH1cbn1cbmZ1bmN0aW9uIGxvb3BfZ3VhcmQodGltZW91dCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHN0YXJ0ID4gdGltZW91dCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbmZpbml0ZSBsb29wIGRldGVjdGVkYCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5leHBvcnRzLkh0bWxUYWcgPSBIdG1sVGFnO1xuZXhwb3J0cy5TdmVsdGVDb21wb25lbnQgPSBTdmVsdGVDb21wb25lbnQ7XG5leHBvcnRzLlN2ZWx0ZUNvbXBvbmVudERldiA9IFN2ZWx0ZUNvbXBvbmVudERldjtcbmV4cG9ydHMuYWN0aW9uX2Rlc3Ryb3llciA9IGFjdGlvbl9kZXN0cm95ZXI7XG5leHBvcnRzLmFkZF9hdHRyaWJ1dGUgPSBhZGRfYXR0cmlidXRlO1xuZXhwb3J0cy5hZGRfY2xhc3NlcyA9IGFkZF9jbGFzc2VzO1xuZXhwb3J0cy5hZGRfZmx1c2hfY2FsbGJhY2sgPSBhZGRfZmx1c2hfY2FsbGJhY2s7XG5leHBvcnRzLmFkZF9sb2NhdGlvbiA9IGFkZF9sb2NhdGlvbjtcbmV4cG9ydHMuYWRkX3JlbmRlcl9jYWxsYmFjayA9IGFkZF9yZW5kZXJfY2FsbGJhY2s7XG5leHBvcnRzLmFkZF9yZXNpemVfbGlzdGVuZXIgPSBhZGRfcmVzaXplX2xpc3RlbmVyO1xuZXhwb3J0cy5hZGRfdHJhbnNmb3JtID0gYWRkX3RyYW5zZm9ybTtcbmV4cG9ydHMuYWZ0ZXJVcGRhdGUgPSBhZnRlclVwZGF0ZTtcbmV4cG9ydHMuYXBwZW5kID0gYXBwZW5kO1xuZXhwb3J0cy5hcHBlbmRfZGV2ID0gYXBwZW5kX2RldjtcbmV4cG9ydHMuYXNzaWduID0gYXNzaWduO1xuZXhwb3J0cy5hdHRyID0gYXR0cjtcbmV4cG9ydHMuYXR0cl9kZXYgPSBhdHRyX2RldjtcbmV4cG9ydHMuYmVmb3JlVXBkYXRlID0gYmVmb3JlVXBkYXRlO1xuZXhwb3J0cy5iaW5kID0gYmluZDtcbmV4cG9ydHMuYmluZGluZ19jYWxsYmFja3MgPSBiaW5kaW5nX2NhbGxiYWNrcztcbmV4cG9ydHMuYmxhbmtfb2JqZWN0ID0gYmxhbmtfb2JqZWN0O1xuZXhwb3J0cy5idWJibGUgPSBidWJibGU7XG5leHBvcnRzLmNoZWNrX291dHJvcyA9IGNoZWNrX291dHJvcztcbmV4cG9ydHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbmV4cG9ydHMuY2xhaW1fY29tcG9uZW50ID0gY2xhaW1fY29tcG9uZW50O1xuZXhwb3J0cy5jbGFpbV9lbGVtZW50ID0gY2xhaW1fZWxlbWVudDtcbmV4cG9ydHMuY2xhaW1fc3BhY2UgPSBjbGFpbV9zcGFjZTtcbmV4cG9ydHMuY2xhaW1fdGV4dCA9IGNsYWltX3RleHQ7XG5leHBvcnRzLmNsZWFyX2xvb3BzID0gY2xlYXJfbG9vcHM7XG5leHBvcnRzLmNvbXBvbmVudF9zdWJzY3JpYmUgPSBjb21wb25lbnRfc3Vic2NyaWJlO1xuZXhwb3J0cy5jb21wdXRlX3Jlc3RfcHJvcHMgPSBjb21wdXRlX3Jlc3RfcHJvcHM7XG5leHBvcnRzLmNyZWF0ZUV2ZW50RGlzcGF0Y2hlciA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcjtcbmV4cG9ydHMuY3JlYXRlX2FuaW1hdGlvbiA9IGNyZWF0ZV9hbmltYXRpb247XG5leHBvcnRzLmNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24gPSBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uO1xuZXhwb3J0cy5jcmVhdGVfY29tcG9uZW50ID0gY3JlYXRlX2NvbXBvbmVudDtcbmV4cG9ydHMuY3JlYXRlX2luX3RyYW5zaXRpb24gPSBjcmVhdGVfaW5fdHJhbnNpdGlvbjtcbmV4cG9ydHMuY3JlYXRlX291dF90cmFuc2l0aW9uID0gY3JlYXRlX291dF90cmFuc2l0aW9uO1xuZXhwb3J0cy5jcmVhdGVfc2xvdCA9IGNyZWF0ZV9zbG90O1xuZXhwb3J0cy5jcmVhdGVfc3NyX2NvbXBvbmVudCA9IGNyZWF0ZV9zc3JfY29tcG9uZW50O1xuZXhwb3J0cy5jdXN0b21fZXZlbnQgPSBjdXN0b21fZXZlbnQ7XG5leHBvcnRzLmRhdGFzZXRfZGV2ID0gZGF0YXNldF9kZXY7XG5leHBvcnRzLmRlYnVnID0gZGVidWc7XG5leHBvcnRzLmRlc3Ryb3lfYmxvY2sgPSBkZXN0cm95X2Jsb2NrO1xuZXhwb3J0cy5kZXN0cm95X2NvbXBvbmVudCA9IGRlc3Ryb3lfY29tcG9uZW50O1xuZXhwb3J0cy5kZXN0cm95X2VhY2ggPSBkZXN0cm95X2VhY2g7XG5leHBvcnRzLmRldGFjaCA9IGRldGFjaDtcbmV4cG9ydHMuZGV0YWNoX2FmdGVyX2RldiA9IGRldGFjaF9hZnRlcl9kZXY7XG5leHBvcnRzLmRldGFjaF9iZWZvcmVfZGV2ID0gZGV0YWNoX2JlZm9yZV9kZXY7XG5leHBvcnRzLmRldGFjaF9iZXR3ZWVuX2RldiA9IGRldGFjaF9iZXR3ZWVuX2RldjtcbmV4cG9ydHMuZGV0YWNoX2RldiA9IGRldGFjaF9kZXY7XG5leHBvcnRzLmRpcnR5X2NvbXBvbmVudHMgPSBkaXJ0eV9jb21wb25lbnRzO1xuZXhwb3J0cy5kaXNwYXRjaF9kZXYgPSBkaXNwYXRjaF9kZXY7XG5leHBvcnRzLmVhY2ggPSBlYWNoO1xuZXhwb3J0cy5lbGVtZW50ID0gZWxlbWVudDtcbmV4cG9ydHMuZWxlbWVudF9pcyA9IGVsZW1lbnRfaXM7XG5leHBvcnRzLmVtcHR5ID0gZW1wdHk7XG5leHBvcnRzLmVzY2FwZSA9IGVzY2FwZTtcbmV4cG9ydHMuZXNjYXBlZCA9IGVzY2FwZWQ7XG5leHBvcnRzLmV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMgPSBleGNsdWRlX2ludGVybmFsX3Byb3BzO1xuZXhwb3J0cy5maXhfYW5kX2Rlc3Ryb3lfYmxvY2sgPSBmaXhfYW5kX2Rlc3Ryb3lfYmxvY2s7XG5leHBvcnRzLmZpeF9hbmRfb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2sgPSBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrO1xuZXhwb3J0cy5maXhfcG9zaXRpb24gPSBmaXhfcG9zaXRpb247XG5leHBvcnRzLmZsdXNoID0gZmx1c2g7XG5leHBvcnRzLmdldENvbnRleHQgPSBnZXRDb250ZXh0O1xuZXhwb3J0cy5nZXRfYmluZGluZ19ncm91cF92YWx1ZSA9IGdldF9iaW5kaW5nX2dyb3VwX3ZhbHVlO1xuZXhwb3J0cy5nZXRfY3VycmVudF9jb21wb25lbnQgPSBnZXRfY3VycmVudF9jb21wb25lbnQ7XG5leHBvcnRzLmdldF9zbG90X2NoYW5nZXMgPSBnZXRfc2xvdF9jaGFuZ2VzO1xuZXhwb3J0cy5nZXRfc2xvdF9jb250ZXh0ID0gZ2V0X3Nsb3RfY29udGV4dDtcbmV4cG9ydHMuZ2V0X3NwcmVhZF9vYmplY3QgPSBnZXRfc3ByZWFkX29iamVjdDtcbmV4cG9ydHMuZ2V0X3NwcmVhZF91cGRhdGUgPSBnZXRfc3ByZWFkX3VwZGF0ZTtcbmV4cG9ydHMuZ2V0X3N0b3JlX3ZhbHVlID0gZ2V0X3N0b3JlX3ZhbHVlO1xuZXhwb3J0cy5nbG9iYWxzID0gZ2xvYmFscztcbmV4cG9ydHMuZ3JvdXBfb3V0cm9zID0gZ3JvdXBfb3V0cm9zO1xuZXhwb3J0cy5oYW5kbGVfcHJvbWlzZSA9IGhhbmRsZV9wcm9taXNlO1xuZXhwb3J0cy5oYXNfcHJvcCA9IGhhc19wcm9wO1xuZXhwb3J0cy5pZGVudGl0eSA9IGlkZW50aXR5O1xuZXhwb3J0cy5pbml0ID0gaW5pdDtcbmV4cG9ydHMuaW5zZXJ0ID0gaW5zZXJ0O1xuZXhwb3J0cy5pbnNlcnRfZGV2ID0gaW5zZXJ0X2RldjtcbmV4cG9ydHMuaW50cm9zID0gaW50cm9zO1xuZXhwb3J0cy5pbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3RlciA9IGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyO1xuZXhwb3J0cy5pc19jbGllbnQgPSBpc19jbGllbnQ7XG5leHBvcnRzLmlzX2Nyb3Nzb3JpZ2luID0gaXNfY3Jvc3NvcmlnaW47XG5leHBvcnRzLmlzX2VtcHR5ID0gaXNfZW1wdHk7XG5leHBvcnRzLmlzX2Z1bmN0aW9uID0gaXNfZnVuY3Rpb247XG5leHBvcnRzLmlzX3Byb21pc2UgPSBpc19wcm9taXNlO1xuZXhwb3J0cy5saXN0ZW4gPSBsaXN0ZW47XG5leHBvcnRzLmxpc3Rlbl9kZXYgPSBsaXN0ZW5fZGV2O1xuZXhwb3J0cy5sb29wID0gbG9vcDtcbmV4cG9ydHMubG9vcF9ndWFyZCA9IGxvb3BfZ3VhcmQ7XG5leHBvcnRzLm1pc3NpbmdfY29tcG9uZW50ID0gbWlzc2luZ19jb21wb25lbnQ7XG5leHBvcnRzLm1vdW50X2NvbXBvbmVudCA9IG1vdW50X2NvbXBvbmVudDtcbmV4cG9ydHMubm9vcCA9IG5vb3A7XG5leHBvcnRzLm5vdF9lcXVhbCA9IG5vdF9lcXVhbDtcbmV4cG9ydHMubnVsbF90b19lbXB0eSA9IG51bGxfdG9fZW1wdHk7XG5leHBvcnRzLm9iamVjdF93aXRob3V0X3Byb3BlcnRpZXMgPSBvYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzO1xuZXhwb3J0cy5vbkRlc3Ryb3kgPSBvbkRlc3Ryb3k7XG5leHBvcnRzLm9uTW91bnQgPSBvbk1vdW50O1xuZXhwb3J0cy5vbmNlID0gb25jZTtcbmV4cG9ydHMub3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2sgPSBvdXRyb19hbmRfZGVzdHJveV9ibG9jaztcbmV4cG9ydHMucHJldmVudF9kZWZhdWx0ID0gcHJldmVudF9kZWZhdWx0O1xuZXhwb3J0cy5wcm9wX2RldiA9IHByb3BfZGV2O1xuZXhwb3J0cy5xdWVyeV9zZWxlY3Rvcl9hbGwgPSBxdWVyeV9zZWxlY3Rvcl9hbGw7XG5leHBvcnRzLnJ1biA9IHJ1bjtcbmV4cG9ydHMucnVuX2FsbCA9IHJ1bl9hbGw7XG5leHBvcnRzLnNhZmVfbm90X2VxdWFsID0gc2FmZV9ub3RfZXF1YWw7XG5leHBvcnRzLnNjaGVkdWxlX3VwZGF0ZSA9IHNjaGVkdWxlX3VwZGF0ZTtcbmV4cG9ydHMuc2VsZWN0X211bHRpcGxlX3ZhbHVlID0gc2VsZWN0X211bHRpcGxlX3ZhbHVlO1xuZXhwb3J0cy5zZWxlY3Rfb3B0aW9uID0gc2VsZWN0X29wdGlvbjtcbmV4cG9ydHMuc2VsZWN0X29wdGlvbnMgPSBzZWxlY3Rfb3B0aW9ucztcbmV4cG9ydHMuc2VsZWN0X3ZhbHVlID0gc2VsZWN0X3ZhbHVlO1xuZXhwb3J0cy5zZWxmID0gc2VsZjtcbmV4cG9ydHMuc2V0Q29udGV4dCA9IHNldENvbnRleHQ7XG5leHBvcnRzLnNldF9hdHRyaWJ1dGVzID0gc2V0X2F0dHJpYnV0ZXM7XG5leHBvcnRzLnNldF9jdXJyZW50X2NvbXBvbmVudCA9IHNldF9jdXJyZW50X2NvbXBvbmVudDtcbmV4cG9ydHMuc2V0X2N1c3RvbV9lbGVtZW50X2RhdGEgPSBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YTtcbmV4cG9ydHMuc2V0X2RhdGEgPSBzZXRfZGF0YTtcbmV4cG9ydHMuc2V0X2RhdGFfZGV2ID0gc2V0X2RhdGFfZGV2O1xuZXhwb3J0cy5zZXRfaW5wdXRfdHlwZSA9IHNldF9pbnB1dF90eXBlO1xuZXhwb3J0cy5zZXRfaW5wdXRfdmFsdWUgPSBzZXRfaW5wdXRfdmFsdWU7XG5leHBvcnRzLnNldF9ub3cgPSBzZXRfbm93O1xuZXhwb3J0cy5zZXRfcmFmID0gc2V0X3JhZjtcbmV4cG9ydHMuc2V0X3N0b3JlX3ZhbHVlID0gc2V0X3N0b3JlX3ZhbHVlO1xuZXhwb3J0cy5zZXRfc3R5bGUgPSBzZXRfc3R5bGU7XG5leHBvcnRzLnNldF9zdmdfYXR0cmlidXRlcyA9IHNldF9zdmdfYXR0cmlidXRlcztcbmV4cG9ydHMuc3BhY2UgPSBzcGFjZTtcbmV4cG9ydHMuc3ByZWFkID0gc3ByZWFkO1xuZXhwb3J0cy5zdG9wX3Byb3BhZ2F0aW9uID0gc3RvcF9wcm9wYWdhdGlvbjtcbmV4cG9ydHMuc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuZXhwb3J0cy5zdmdfZWxlbWVudCA9IHN2Z19lbGVtZW50O1xuZXhwb3J0cy50ZXh0ID0gdGV4dDtcbmV4cG9ydHMudGljayA9IHRpY2s7XG5leHBvcnRzLnRpbWVfcmFuZ2VzX3RvX2FycmF5ID0gdGltZV9yYW5nZXNfdG9fYXJyYXk7XG5leHBvcnRzLnRvX251bWJlciA9IHRvX251bWJlcjtcbmV4cG9ydHMudG9nZ2xlX2NsYXNzID0gdG9nZ2xlX2NsYXNzO1xuZXhwb3J0cy50cmFuc2l0aW9uX2luID0gdHJhbnNpdGlvbl9pbjtcbmV4cG9ydHMudHJhbnNpdGlvbl9vdXQgPSB0cmFuc2l0aW9uX291dDtcbmV4cG9ydHMudXBkYXRlX2tleWVkX2VhY2ggPSB1cGRhdGVfa2V5ZWRfZWFjaDtcbmV4cG9ydHMudXBkYXRlX3Nsb3QgPSB1cGRhdGVfc2xvdDtcbmV4cG9ydHMudmFsaWRhdGVfY29tcG9uZW50ID0gdmFsaWRhdGVfY29tcG9uZW50O1xuZXhwb3J0cy52YWxpZGF0ZV9lYWNoX2FyZ3VtZW50ID0gdmFsaWRhdGVfZWFjaF9hcmd1bWVudDtcbmV4cG9ydHMudmFsaWRhdGVfZWFjaF9rZXlzID0gdmFsaWRhdGVfZWFjaF9rZXlzO1xuZXhwb3J0cy52YWxpZGF0ZV9zbG90cyA9IHZhbGlkYXRlX3Nsb3RzO1xuZXhwb3J0cy52YWxpZGF0ZV9zdG9yZSA9IHZhbGlkYXRlX3N0b3JlO1xuZXhwb3J0cy54bGlua19hdHRyID0geGxpbmtfYXR0cjtcbiIsIlwidXNlIHN0cmljdFwiO2NvbnN0e1N2ZWx0ZUNvbXBvbmVudDpTdmVsdGVDb21wb25lbnQsYXR0cjphdHRyLGJpbmRpbmdfY2FsbGJhY2tzOmJpbmRpbmdfY2FsbGJhY2tzLGRldGFjaDpkZXRhY2gsZWxlbWVudDplbGVtZW50LGluaXQ6aW5pdCxpbnNlcnQ6aW5zZXJ0LG5vb3A6bm9vcCxzYWZlX25vdF9lcXVhbDpzYWZlX25vdF9lcXVhbH09XyRpbnRlcm5hbF8yO2Z1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudChjdHgpe2xldCBkaXY7cmV0dXJue2MoKXtkaXY9ZWxlbWVudChcImRpdlwiKSxhdHRyKGRpdixcImNsYXNzXCIsY3R4WzBdKX0sbSh0YXJnZXQsYW5jaG9yKXtpbnNlcnQodGFyZ2V0LGRpdixhbmNob3IpLGRpdi5pbm5lckhUTUw9Y3R4WzFdLGN0eFszXShkaXYpfSxwKGN0eCxbZGlydHldKXsyJmRpcnR5JiYoZGl2LmlubmVySFRNTD1jdHhbMV0pLDEmZGlydHkmJmF0dHIoZGl2LFwiY2xhc3NcIixjdHhbMF0pfSxpOm5vb3Asbzpub29wLGQoZGV0YWNoaW5nKXtkZXRhY2hpbmcmJmRldGFjaChkaXYpLGN0eFszXShudWxsKX19fWZ1bmN0aW9uIGluc3RhbmNlKCQkc2VsZiwkJHByb3BzLCQkaW52YWxpZGF0ZSl7bGV0IHJlZix7Y2xhc3NlczpjbGFzc2VzPVwiXCJ9PSQkcHJvcHMse2RhdGE6ZGF0YT1cIlwifT0kJHByb3BzLGV2YWxlZD17fTtyZXR1cm4gJCRzZWxmLiQkc2V0PSgkJHByb3BzPT57XCJjbGFzc2VzXCJpbiAkJHByb3BzJiYkJGludmFsaWRhdGUoMCxjbGFzc2VzPSQkcHJvcHMuY2xhc3NlcyksXCJkYXRhXCJpbiAkJHByb3BzJiYkJGludmFsaWRhdGUoMSxkYXRhPSQkcHJvcHMuZGF0YSl9KSwkJHNlbGYuJCQudXBkYXRlPSgoKT0+ezQmJCRzZWxmLiQkLmRpcnR5JiZyZWYmJnJlZi5xdWVyeVNlbGVjdG9yQWxsKFwic2NyaXB0XCIpLmZvckVhY2goZWw9PihmdW5jdGlvbihzcmMpe2lmKHZvaWQgMD09PWV2YWxlZFtzcmNdKXtldmFsZWRbc3JjXT0hMDt0cnl7bmV3IEZ1bmN0aW9uKHNyYykoKX1jYXRjaChlKXtjb25zb2xlLmVycm9yKGUpfX19KShlbC5pbm5lckhUTUwpKX0pLFtjbGFzc2VzLGRhdGEscmVmLGZ1bmN0aW9uKCQkdmFsdWUpe2JpbmRpbmdfY2FsbGJhY2tzWyQkdmFsdWU/XCJ1bnNoaWZ0XCI6XCJwdXNoXCJdKCgpPT57JCRpbnZhbGlkYXRlKDIscmVmPSQkdmFsdWUpfSl9XX12YXIgXyRIVE1MXzE9Y2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnR7Y29uc3RydWN0b3Iob3B0aW9ucyl7c3VwZXIoKSxpbml0KHRoaXMsb3B0aW9ucyxpbnN0YW5jZSxjcmVhdGVfZnJhZ21lbnQsc2FmZV9ub3RfZXF1YWwse2NsYXNzZXM6MCxkYXRhOjF9KX19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa2hVVFV3dWMzWmxiSFJsSWwwc0ltNWhiV1Z6SWpwYkltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUlyYkVOQlowWkJRU3haUVVGQlF5eERRVUZCUVN4alFVRkJRU3hsUVVGQlFTeERRVUZCUVN4WFFVRkJRU3hEUVVGQlFTeFBRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeExRVUZCUVN4RlFVRkJRU3hEUVVGQlFTeEpRVUZCUVN4RFFVRkJRU3hKUVVGQlFTeERRVUZCUVN4UFFVRkJRU3hEUVVGQlFTeFJRVUZCUVN4RFFVRkJRU3hsUVVGQlFTeERRVUZCUVN4alFVRkJRU3hEUVVGQlFTeERRVUZCUVN4UFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hKUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYmJuVnNiRjE5IiwiXCJ1c2Ugc3RyaWN0XCI7Y29uc3R7U3ZlbHRlQ29tcG9uZW50Ol9fU3ZlbHRlQ29tcG9uZW50XzMsYXBwZW5kOmFwcGVuZCxhdHRyOl9fYXR0cl8zLGNoZWNrX291dHJvczpjaGVja19vdXRyb3MsY3JlYXRlX2NvbXBvbmVudDpjcmVhdGVfY29tcG9uZW50LGRlc3Ryb3lfY29tcG9uZW50OmRlc3Ryb3lfY29tcG9uZW50LGRlc3Ryb3lfZWFjaDpkZXN0cm95X2VhY2gsZGV0YWNoOl9fZGV0YWNoXzMsZWxlbWVudDpfX2VsZW1lbnRfMyxlbXB0eTplbXB0eSxncm91cF9vdXRyb3M6Z3JvdXBfb3V0cm9zLGluaXQ6X19pbml0XzMsaW5zZXJ0Ol9faW5zZXJ0XzMsbGlzdGVuOmxpc3Rlbixtb3VudF9jb21wb25lbnQ6bW91bnRfY29tcG9uZW50LG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrOm91dHJvX2FuZF9kZXN0cm95X2Jsb2NrLHNhZmVfbm90X2VxdWFsOl9fc2FmZV9ub3RfZXF1YWxfMyxzZXRfZGF0YTpzZXRfZGF0YSxzcGFjZTpzcGFjZSx0ZXh0OnRleHQsdHJhbnNpdGlvbl9pbjp0cmFuc2l0aW9uX2luLHRyYW5zaXRpb25fb3V0OnRyYW5zaXRpb25fb3V0LHVwZGF0ZV9rZXllZF9lYWNoOnVwZGF0ZV9rZXllZF9lYWNofT1fJGludGVybmFsXzI7ZnVuY3Rpb24gZ2V0X2VhY2hfY29udGV4dF8xKGN0eCxsaXN0LGkpe2NvbnN0IGNoaWxkX2N0eD1jdHguc2xpY2UoKTtyZXR1cm4gY2hpbGRfY3R4WzVdPWxpc3RbaV0sY2hpbGRfY3R4fWZ1bmN0aW9uIGdldF9lYWNoX2NvbnRleHQoY3R4LGxpc3QsaSl7Y29uc3QgY2hpbGRfY3R4PWN0eC5zbGljZSgpO3JldHVybiBjaGlsZF9jdHhbMl09bGlzdFtpXSxjaGlsZF9jdHh9ZnVuY3Rpb24gZ2V0X2VhY2hfY29udGV4dF8yKGN0eCxsaXN0LGkpe2NvbnN0IGNoaWxkX2N0eD1jdHguc2xpY2UoKTtyZXR1cm4gY2hpbGRfY3R4WzJdPWxpc3RbaV0sY2hpbGRfY3R4fWZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayhjdHgpe2xldCBzdXAsaSxpX2RhdGFfb3JpZ2luYWxfdGl0bGVfdmFsdWUsdDtyZXR1cm57Yygpe3N1cD1fX2VsZW1lbnRfMyhcInN1cFwiKSxpPV9fZWxlbWVudF8zKFwiaVwiKSx0PXNwYWNlKCksX19hdHRyXzMoaSxcImNsYXNzXCIsXCJmYXIgZmEtcXVlc3Rpb24tY2lyY2xlIG1sLTFcIiksX19hdHRyXzMoaSxcImRhdGEtdG9nZ2xlXCIsXCJ0b29sdGlwXCIpLF9fYXR0cl8zKGksXCJ0aXRsZVwiLFwiXCIpLF9fYXR0cl8zKGksXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIsaV9kYXRhX29yaWdpbmFsX3RpdGxlX3ZhbHVlPWN0eFswXS5kZXNjcmlwdGlvbil9LG0odGFyZ2V0LGFuY2hvcil7X19pbnNlcnRfMyh0YXJnZXQsc3VwLGFuY2hvciksYXBwZW5kKHN1cCxpKSxfX2luc2VydF8zKHRhcmdldCx0LGFuY2hvcil9LHAoY3R4LGRpcnR5KXsxJmRpcnR5JiZpX2RhdGFfb3JpZ2luYWxfdGl0bGVfdmFsdWUhPT0oaV9kYXRhX29yaWdpbmFsX3RpdGxlX3ZhbHVlPWN0eFswXS5kZXNjcmlwdGlvbikmJl9fYXR0cl8zKGksXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIsaV9kYXRhX29yaWdpbmFsX3RpdGxlX3ZhbHVlKX0sZChkZXRhY2hpbmcpe2RldGFjaGluZyYmX19kZXRhY2hfMyhzdXApLGRldGFjaGluZyYmX19kZXRhY2hfMyh0KX19fWZ1bmN0aW9uIGNyZWF0ZV9lYWNoX2Jsb2NrXzIoY3R4KXtsZXQgYSx0MCx0MSxhX2NsYXNzX3ZhbHVlLGFfYXJpYV9jb250cm9sc192YWx1ZSxtb3VudGVkLGRpc3Bvc2UsdDBfdmFsdWU9Y3R4WzJdK1wiXCI7ZnVuY3Rpb24gY2xpY2tfaGFuZGxlciguLi5hcmdzKXtyZXR1cm4gY3R4WzFdKGN0eFsyXSwuLi5hcmdzKX1yZXR1cm57Yygpe2E9X19lbGVtZW50XzMoXCJhXCIpLHQwPXRleHQodDBfdmFsdWUpLHQxPXNwYWNlKCksX19hdHRyXzMoYSxcImhyZWZcIixcImphdmFzY3JpcHQ6XCIpLF9fYXR0cl8zKGEsXCJjbGFzc1wiLGFfY2xhc3NfdmFsdWU9XCJuYXYtbGlua1wiKyhjdHhbMF0udmFsdWU9PWN0eFsyXT9cIiBhY3RpdmVcIjpcIlwiKSksX19hdHRyXzMoYSxcImFyaWEtY29udHJvbHNcIixhX2FyaWFfY29udHJvbHNfdmFsdWU9XCJ0YWItY29udGVudC1cIitjdHhbMF0ubmFtZStcIi1cIitjdHhbMl0pLF9fYXR0cl8zKGEsXCJkYXRhLXRvZ2dsZVwiLFwidGFiXCIpLF9fYXR0cl8zKGEsXCJyb2xlXCIsXCJ0YWJcIil9LG0odGFyZ2V0LGFuY2hvcil7X19pbnNlcnRfMyh0YXJnZXQsYSxhbmNob3IpLGFwcGVuZChhLHQwKSxhcHBlbmQoYSx0MSksbW91bnRlZHx8KGRpc3Bvc2U9bGlzdGVuKGEsXCJjbGlja1wiLGNsaWNrX2hhbmRsZXIpLG1vdW50ZWQ9ITApfSxwKG5ld19jdHgsZGlydHkpe2N0eD1uZXdfY3R4LDEmZGlydHkmJnQwX3ZhbHVlIT09KHQwX3ZhbHVlPWN0eFsyXStcIlwiKSYmc2V0X2RhdGEodDAsdDBfdmFsdWUpLDEmZGlydHkmJmFfY2xhc3NfdmFsdWUhPT0oYV9jbGFzc192YWx1ZT1cIm5hdi1saW5rXCIrKGN0eFswXS52YWx1ZT09Y3R4WzJdP1wiIGFjdGl2ZVwiOlwiXCIpKSYmX19hdHRyXzMoYSxcImNsYXNzXCIsYV9jbGFzc192YWx1ZSksMSZkaXJ0eSYmYV9hcmlhX2NvbnRyb2xzX3ZhbHVlIT09KGFfYXJpYV9jb250cm9sc192YWx1ZT1cInRhYi1jb250ZW50LVwiK2N0eFswXS5uYW1lK1wiLVwiK2N0eFsyXSkmJl9fYXR0cl8zKGEsXCJhcmlhLWNvbnRyb2xzXCIsYV9hcmlhX2NvbnRyb2xzX3ZhbHVlKX0sZChkZXRhY2hpbmcpe2RldGFjaGluZyYmX19kZXRhY2hfMyhhKSxtb3VudGVkPSExLGRpc3Bvc2UoKX19fWZ1bmN0aW9uIGNyZWF0ZV9lYWNoX2Jsb2NrXzEoa2V5XzEsY3R4KXtsZXQgZmlyc3QsaHRtbCxjdXJyZW50O3JldHVybiBodG1sPW5ldyBfJEhUTUxfMSh7cHJvcHM6e2RhdGE6Y3R4WzBdLmZpZWxkX3JlbmRlcnNbY3R4WzVdLmFyZ3MubmFtZV19fSkse2tleTprZXlfMSxmaXJzdDpudWxsLGMoKXtmaXJzdD1lbXB0eSgpLGNyZWF0ZV9jb21wb25lbnQoaHRtbC4kJC5mcmFnbWVudCksdGhpcy5maXJzdD1maXJzdH0sbSh0YXJnZXQsYW5jaG9yKXtfX2luc2VydF8zKHRhcmdldCxmaXJzdCxhbmNob3IpLG1vdW50X2NvbXBvbmVudChodG1sLHRhcmdldCxhbmNob3IpLGN1cnJlbnQ9ITB9LHAoY3R4LGRpcnR5KXtjb25zdCBodG1sX2NoYW5nZXM9e307MSZkaXJ0eSYmKGh0bWxfY2hhbmdlcy5kYXRhPWN0eFswXS5maWVsZF9yZW5kZXJzW2N0eFs1XS5hcmdzLm5hbWVdKSxodG1sLiRzZXQoaHRtbF9jaGFuZ2VzKX0saShsb2NhbCl7Y3VycmVudHx8KHRyYW5zaXRpb25faW4oaHRtbC4kJC5mcmFnbWVudCxsb2NhbCksY3VycmVudD0hMCl9LG8obG9jYWwpe3RyYW5zaXRpb25fb3V0KGh0bWwuJCQuZnJhZ21lbnQsbG9jYWwpLGN1cnJlbnQ9ITF9LGQoZGV0YWNoaW5nKXtkZXRhY2hpbmcmJl9fZGV0YWNoXzMoZmlyc3QpLGRlc3Ryb3lfY29tcG9uZW50KGh0bWwsZGV0YWNoaW5nKX19fWZ1bmN0aW9uIGNyZWF0ZV9lYWNoX2Jsb2NrKGN0eCl7bGV0IGRpdix0LGRpdl9jbGFzc192YWx1ZSxjdXJyZW50LGVhY2hfYmxvY2tzPVtdLGVhY2hfMV9sb29rdXA9bmV3IE1hcCxlYWNoX3ZhbHVlXzE9Y3R4WzBdLmNob2ljZXNbY3R4WzJdXTtjb25zdCBnZXRfa2V5PWN0eD0+Y3R4WzVdLmFyZ3MubmFtZTtmb3IobGV0IGk9MDtpPGVhY2hfdmFsdWVfMS5sZW5ndGg7aSs9MSl7bGV0IGNoaWxkX2N0eD1nZXRfZWFjaF9jb250ZXh0XzEoY3R4LGVhY2hfdmFsdWVfMSxpKSxrZXk9Z2V0X2tleShjaGlsZF9jdHgpO2VhY2hfMV9sb29rdXAuc2V0KGtleSxlYWNoX2Jsb2Nrc1tpXT1jcmVhdGVfZWFjaF9ibG9ja18xKGtleSxjaGlsZF9jdHgpKX1yZXR1cm57Yygpe2Rpdj1fX2VsZW1lbnRfMyhcImRpdlwiKTtmb3IobGV0IGk9MDtpPGVhY2hfYmxvY2tzLmxlbmd0aDtpKz0xKWVhY2hfYmxvY2tzW2ldLmMoKTt0PXNwYWNlKCksX19hdHRyXzMoZGl2LFwiY2xhc3NcIixkaXZfY2xhc3NfdmFsdWU9XCJ0YWItcGFuZSBmYWRlXCIrKGN0eFswXS52YWx1ZT09Y3R4WzJdP1wiIHNob3cgYWN0aXZlXCI6XCJcIikpLF9fYXR0cl8zKGRpdixcInJvbGVcIixcInRhYnBhbmVsXCIpfSxtKHRhcmdldCxhbmNob3Ipe19faW5zZXJ0XzModGFyZ2V0LGRpdixhbmNob3IpO2ZvcihsZXQgaT0wO2k8ZWFjaF9ibG9ja3MubGVuZ3RoO2krPTEpZWFjaF9ibG9ja3NbaV0ubShkaXYsbnVsbCk7YXBwZW5kKGRpdix0KSxjdXJyZW50PSEwfSxwKGN0eCxkaXJ0eSl7aWYoMSZkaXJ0eSl7Y29uc3QgZWFjaF92YWx1ZV8xPWN0eFswXS5jaG9pY2VzW2N0eFsyXV07Z3JvdXBfb3V0cm9zKCksZWFjaF9ibG9ja3M9dXBkYXRlX2tleWVkX2VhY2goZWFjaF9ibG9ja3MsZGlydHksZ2V0X2tleSwxLGN0eCxlYWNoX3ZhbHVlXzEsZWFjaF8xX2xvb2t1cCxkaXYsb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2ssY3JlYXRlX2VhY2hfYmxvY2tfMSx0LGdldF9lYWNoX2NvbnRleHRfMSksY2hlY2tfb3V0cm9zKCl9KCFjdXJyZW50fHwxJmRpcnR5JiZkaXZfY2xhc3NfdmFsdWUhPT0oZGl2X2NsYXNzX3ZhbHVlPVwidGFiLXBhbmUgZmFkZVwiKyhjdHhbMF0udmFsdWU9PWN0eFsyXT9cIiBzaG93IGFjdGl2ZVwiOlwiXCIpKSkmJl9fYXR0cl8zKGRpdixcImNsYXNzXCIsZGl2X2NsYXNzX3ZhbHVlKX0saShsb2NhbCl7aWYoIWN1cnJlbnQpe2ZvcihsZXQgaT0wO2k8ZWFjaF92YWx1ZV8xLmxlbmd0aDtpKz0xKXRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0pO2N1cnJlbnQ9ITB9fSxvKGxvY2FsKXtmb3IobGV0IGk9MDtpPGVhY2hfYmxvY2tzLmxlbmd0aDtpKz0xKXRyYW5zaXRpb25fb3V0KGVhY2hfYmxvY2tzW2ldKTtjdXJyZW50PSExfSxkKGRldGFjaGluZyl7ZGV0YWNoaW5nJiZfX2RldGFjaF8zKGRpdik7Zm9yKGxldCBpPTA7aTxlYWNoX2Jsb2Nrcy5sZW5ndGg7aSs9MSllYWNoX2Jsb2Nrc1tpXS5kKCl9fX1mdW5jdGlvbiBfX2NyZWF0ZV9mcmFnbWVudF8zKGN0eCl7bGV0IGRpdjUsZGl2MCx0MCx0MSx0Mix0MyxkaXYyLGRpdjEsdDQsZGl2NCxkaXYzLHQ1LGlucHV0LGlucHV0X25hbWVfdmFsdWUsaW5wdXRfdmFsdWVfdmFsdWUsY3VycmVudCx0MF92YWx1ZT1jdHhbMF0ubGFiZWwrXCJcIixpZl9ibG9jaz1jdHhbMF0uZGVzY3JpcHRpb24mJmNyZWF0ZV9pZl9ibG9jayhjdHgpLGVhY2hfdmFsdWVfMj1PYmplY3Qua2V5cyhjdHhbMF0uY2hvaWNlcyksZWFjaF9ibG9ja3NfMT1bXTtmb3IobGV0IGk9MDtpPGVhY2hfdmFsdWVfMi5sZW5ndGg7aSs9MSllYWNoX2Jsb2Nrc18xW2ldPWNyZWF0ZV9lYWNoX2Jsb2NrXzIoZ2V0X2VhY2hfY29udGV4dF8yKGN0eCxlYWNoX3ZhbHVlXzIsaSkpO2xldCBlYWNoX3ZhbHVlPU9iamVjdC5rZXlzKGN0eFswXS5jaG9pY2VzKSxlYWNoX2Jsb2Nrcz1bXTtmb3IobGV0IGk9MDtpPGVhY2hfdmFsdWUubGVuZ3RoO2krPTEpZWFjaF9ibG9ja3NbaV09Y3JlYXRlX2VhY2hfYmxvY2soZ2V0X2VhY2hfY29udGV4dChjdHgsZWFjaF92YWx1ZSxpKSk7Y29uc3Qgb3V0PWk9PnRyYW5zaXRpb25fb3V0KGVhY2hfYmxvY2tzW2ldLDEsMSwoKT0+e2VhY2hfYmxvY2tzW2ldPW51bGx9KTtyZXR1cm57Yygpe2RpdjU9X19lbGVtZW50XzMoXCJkaXZcIiksZGl2MD1fX2VsZW1lbnRfMyhcImRpdlwiKSx0MD10ZXh0KHQwX3ZhbHVlKSx0MT1zcGFjZSgpLGlmX2Jsb2NrJiZpZl9ibG9jay5jKCksdDI9dGV4dChcIjpcIiksdDM9c3BhY2UoKSxkaXYyPV9fZWxlbWVudF8zKFwiZGl2XCIpLGRpdjE9X19lbGVtZW50XzMoXCJkaXZcIik7Zm9yKGxldCBpPTA7aTxlYWNoX2Jsb2Nrc18xLmxlbmd0aDtpKz0xKWVhY2hfYmxvY2tzXzFbaV0uYygpO3Q0PXNwYWNlKCksZGl2ND1fX2VsZW1lbnRfMyhcImRpdlwiKSxkaXYzPV9fZWxlbWVudF8zKFwiZGl2XCIpO2ZvcihsZXQgaT0wO2k8ZWFjaF9ibG9ja3MubGVuZ3RoO2krPTEpZWFjaF9ibG9ja3NbaV0uYygpO3Q1PXNwYWNlKCksaW5wdXQ9X19lbGVtZW50XzMoXCJpbnB1dFwiKSxfX2F0dHJfMyhkaXYwLFwiY2xhc3NcIixcImNvbC1sZy0yIGJvbGQgdGV4dC1sZy1yaWdodCBteS1hdXRvXCIpLF9fYXR0cl8zKGRpdjEsXCJjbGFzc1wiLFwibmF2IGZsZXgtY29sdW1uIG5hdi1waWxscyBuYXYtanVzdGlmaWVkXCIpLF9fYXR0cl8zKGRpdjEsXCJhcmlhLW9yaWVudGF0aW9uXCIsXCJ2ZXJ0aWNhbFwiKSxfX2F0dHJfMyhkaXYxLFwicm9sZVwiLFwidGFibGlzdFwiKSxfX2F0dHJfMyhkaXYyLFwiY2xhc3NcIixcImNvbC1sZy0yIHB0LTIgcHQtbGctMFwiKSxfX2F0dHJfMyhkaXYzLFwiY2xhc3NcIixcInRhYi1jb250ZW50XCIpLF9fYXR0cl8zKGRpdjQsXCJjbGFzc1wiLFwiY29sLWxnLTggcHQtMiBwdC1sZy0wXCIpLF9fYXR0cl8zKGlucHV0LFwidHlwZVwiLFwidGV4dFwiKSxfX2F0dHJfMyhpbnB1dCxcImNsYXNzXCIsXCJoaWRkZW5cIiksX19hdHRyXzMoaW5wdXQsXCJuYW1lXCIsaW5wdXRfbmFtZV92YWx1ZT1jdHhbMF0ubmFtZSksaW5wdXQudmFsdWU9aW5wdXRfdmFsdWVfdmFsdWU9Y3R4WzBdLnZhbHVlLF9fYXR0cl8zKGRpdjUsXCJjbGFzc1wiLFwicm93IHB4LTQgcHgtbGctMyBwYi00XCIpfSxtKHRhcmdldCxhbmNob3Ipe19faW5zZXJ0XzModGFyZ2V0LGRpdjUsYW5jaG9yKSxhcHBlbmQoZGl2NSxkaXYwKSxhcHBlbmQoZGl2MCx0MCksYXBwZW5kKGRpdjAsdDEpLGlmX2Jsb2NrJiZpZl9ibG9jay5tKGRpdjAsbnVsbCksYXBwZW5kKGRpdjAsdDIpLGFwcGVuZChkaXY1LHQzKSxhcHBlbmQoZGl2NSxkaXYyKSxhcHBlbmQoZGl2MixkaXYxKTtmb3IobGV0IGk9MDtpPGVhY2hfYmxvY2tzXzEubGVuZ3RoO2krPTEpZWFjaF9ibG9ja3NfMVtpXS5tKGRpdjEsbnVsbCk7YXBwZW5kKGRpdjUsdDQpLGFwcGVuZChkaXY1LGRpdjQpLGFwcGVuZChkaXY0LGRpdjMpO2ZvcihsZXQgaT0wO2k8ZWFjaF9ibG9ja3MubGVuZ3RoO2krPTEpZWFjaF9ibG9ja3NbaV0ubShkaXYzLG51bGwpO2FwcGVuZChkaXY1LHQ1KSxhcHBlbmQoZGl2NSxpbnB1dCksY3VycmVudD0hMH0scChjdHgsW2RpcnR5XSl7aWYoKCFjdXJyZW50fHwxJmRpcnR5KSYmdDBfdmFsdWUhPT0odDBfdmFsdWU9Y3R4WzBdLmxhYmVsK1wiXCIpJiZzZXRfZGF0YSh0MCx0MF92YWx1ZSksY3R4WzBdLmRlc2NyaXB0aW9uP2lmX2Jsb2NrP2lmX2Jsb2NrLnAoY3R4LGRpcnR5KTooKGlmX2Jsb2NrPWNyZWF0ZV9pZl9ibG9jayhjdHgpKS5jKCksaWZfYmxvY2subShkaXYwLHQyKSk6aWZfYmxvY2smJihpZl9ibG9jay5kKDEpLGlmX2Jsb2NrPW51bGwpLDEmZGlydHkpe2xldCBpO2ZvcihlYWNoX3ZhbHVlXzI9T2JqZWN0LmtleXMoY3R4WzBdLmNob2ljZXMpLGk9MDtpPGVhY2hfdmFsdWVfMi5sZW5ndGg7aSs9MSl7Y29uc3QgY2hpbGRfY3R4PWdldF9lYWNoX2NvbnRleHRfMihjdHgsZWFjaF92YWx1ZV8yLGkpO2VhY2hfYmxvY2tzXzFbaV0/ZWFjaF9ibG9ja3NfMVtpXS5wKGNoaWxkX2N0eCxkaXJ0eSk6KGVhY2hfYmxvY2tzXzFbaV09Y3JlYXRlX2VhY2hfYmxvY2tfMihjaGlsZF9jdHgpLGVhY2hfYmxvY2tzXzFbaV0uYygpLGVhY2hfYmxvY2tzXzFbaV0ubShkaXYxLG51bGwpKX1mb3IoO2k8ZWFjaF9ibG9ja3NfMS5sZW5ndGg7aSs9MSllYWNoX2Jsb2Nrc18xW2ldLmQoMSk7ZWFjaF9ibG9ja3NfMS5sZW5ndGg9ZWFjaF92YWx1ZV8yLmxlbmd0aH1pZigxJmRpcnR5KXtsZXQgaTtmb3IoZWFjaF92YWx1ZT1PYmplY3Qua2V5cyhjdHhbMF0uY2hvaWNlcyksaT0wO2k8ZWFjaF92YWx1ZS5sZW5ndGg7aSs9MSl7Y29uc3QgY2hpbGRfY3R4PWdldF9lYWNoX2NvbnRleHQoY3R4LGVhY2hfdmFsdWUsaSk7ZWFjaF9ibG9ja3NbaV0/KGVhY2hfYmxvY2tzW2ldLnAoY2hpbGRfY3R4LGRpcnR5KSx0cmFuc2l0aW9uX2luKGVhY2hfYmxvY2tzW2ldLDEpKTooZWFjaF9ibG9ja3NbaV09Y3JlYXRlX2VhY2hfYmxvY2soY2hpbGRfY3R4KSxlYWNoX2Jsb2Nrc1tpXS5jKCksdHJhbnNpdGlvbl9pbihlYWNoX2Jsb2Nrc1tpXSwxKSxlYWNoX2Jsb2Nrc1tpXS5tKGRpdjMsbnVsbCkpfWZvcihncm91cF9vdXRyb3MoKSxpPWVhY2hfdmFsdWUubGVuZ3RoO2k8ZWFjaF9ibG9ja3MubGVuZ3RoO2krPTEpb3V0KGkpO2NoZWNrX291dHJvcygpfSghY3VycmVudHx8MSZkaXJ0eSYmaW5wdXRfbmFtZV92YWx1ZSE9PShpbnB1dF9uYW1lX3ZhbHVlPWN0eFswXS5uYW1lKSkmJl9fYXR0cl8zKGlucHV0LFwibmFtZVwiLGlucHV0X25hbWVfdmFsdWUpLCghY3VycmVudHx8MSZkaXJ0eSYmaW5wdXRfdmFsdWVfdmFsdWUhPT0oaW5wdXRfdmFsdWVfdmFsdWU9Y3R4WzBdLnZhbHVlKSYmaW5wdXQudmFsdWUhPT1pbnB1dF92YWx1ZV92YWx1ZSkmJihpbnB1dC52YWx1ZT1pbnB1dF92YWx1ZV92YWx1ZSl9LGkobG9jYWwpe2lmKCFjdXJyZW50KXtmb3IobGV0IGk9MDtpPGVhY2hfdmFsdWUubGVuZ3RoO2krPTEpdHJhbnNpdGlvbl9pbihlYWNoX2Jsb2Nrc1tpXSk7Y3VycmVudD0hMH19LG8obG9jYWwpe2VhY2hfYmxvY2tzPWVhY2hfYmxvY2tzLmZpbHRlcihCb29sZWFuKTtmb3IobGV0IGk9MDtpPGVhY2hfYmxvY2tzLmxlbmd0aDtpKz0xKXRyYW5zaXRpb25fb3V0KGVhY2hfYmxvY2tzW2ldKTtjdXJyZW50PSExfSxkKGRldGFjaGluZyl7ZGV0YWNoaW5nJiZfX2RldGFjaF8zKGRpdjUpLGlmX2Jsb2NrJiZpZl9ibG9jay5kKCksZGVzdHJveV9lYWNoKGVhY2hfYmxvY2tzXzEsZGV0YWNoaW5nKSxkZXN0cm95X2VhY2goZWFjaF9ibG9ja3MsZGV0YWNoaW5nKX19fWZ1bmN0aW9uIF9faW5zdGFuY2VfMygkJHNlbGYsJCRwcm9wcywkJGludmFsaWRhdGUpe2xldHthcmdzOmFyZ3N9PSQkcHJvcHM7cmV0dXJuICQkc2VsZi4kJHNldD0oJCRwcm9wcz0+e1wiYXJnc1wiaW4gJCRwcm9wcyYmJCRpbnZhbGlkYXRlKDAsYXJncz0kJHByb3BzLmFyZ3MpfSksW2FyZ3MsY2hvaWNlX25hbWU9PiQkaW52YWxpZGF0ZSgwLGFyZ3MudmFsdWU9Y2hvaWNlX25hbWUsYXJncyldfXZhciBfJFRhYkZpZWxkXzM9Y2xhc3MgZXh0ZW5kcyBfX1N2ZWx0ZUNvbXBvbmVudF8ze2NvbnN0cnVjdG9yKG9wdGlvbnMpe3N1cGVyKCksX19pbml0XzModGhpcyxvcHRpb25zLF9faW5zdGFuY2VfMyxfX2NyZWF0ZV9mcmFnbWVudF8zLF9fc2FmZV9ub3RfZXF1YWxfMyx7YXJnczowfSl9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxSaFlrWnBaV3hrTG5OMlpXeDBaU0pkTENKdVlXMWxjeUk2V3lKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2llVGRSUVhWa1FVRXNaMEpCUVVGRExFTkJRVUZCTEdOQlFVRkJMRzFDUVVGQlFTeERRVUZCUVN4WFFVRkJRU3hEUVVGQlFTeFBRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeExRVUZCUVN4RlFVRkJRU3hEUVVGQlFTeFJRVUZCUVN4RFFVRkJRU3hKUVVGQlFTeERRVUZCUVN4UFFVRkJRU3hEUVVGQlFTeFpRVUZCUVN4RFFVRkJRU3h0UWtGQlFVRXNRMEZCUVVFc2EwSkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFbEJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHR1ZFd4c1hYMD0iXX0=