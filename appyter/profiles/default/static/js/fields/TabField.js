!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;((e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).TabField||(e.TabField={})).svelte=t()}}((function(){var t={};(function(e){(function(){"use strict";function e(){}Object.defineProperty(t,"__esModule",{value:!0});function n(t){return t()}function o(){return Object.create(null)}function l(t){t.forEach(n)}function r(t){return"function"==typeof t}function c(t){return 0===Object.keys(t).length}const i="undefined"!=typeof window;t.raf=i?t=>requestAnimationFrame(t):e;new Set;function a(t,e){t.appendChild(e)}function s(t,e,n){t.insertBefore(e,n||null)}function u(t){t.parentNode.removeChild(t)}function f(t){return document.createElement(t)}function d(t){return document.createTextNode(t)}function p(t,e,n,o){return t.addEventListener(e,n,o),()=>t.removeEventListener(e,n,o)}function h(t,e,n){null==n?t.removeAttribute(e):t.getAttribute(e)!==n&&t.setAttribute(e,n)}function g(t){return Array.from(t.childNodes)}new Set;function m(e){t.current_component=e}const y=[],_=[],b=[],$=[],v=Promise.resolve();let w=!1;function k(){w||(w=!0,v.then(S))}function x(t){b.push(t)}let j=!1;const M=new Set;function S(){if(!j){j=!0;do{for(let t=0;t<y.length;t+=1){const e=y[t];m(e),T(e.$$)}for(m(null),y.length=0;_.length;)_.pop()();for(let t=0;t<b.length;t+=1){const e=b[t];M.has(e)||(M.add(e),e())}b.length=0}while(y.length);for(;$.length;)$.pop()();w=!1,j=!1,M.clear()}}function T(t){if(null!==t.fragment){t.update(),l(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(x)}}const q=new Set;let E;function A(){E={r:0,c:[],p:E}}function O(){E.r||l(E.c),E=E.p}function L(t,e){t&&t.i&&(q.delete(t),t.i(e))}function C(t,e,n,o){if(t&&t.o){if(q.has(t))return;q.add(t),E.c.push(()=>{q.delete(t),o&&(n&&t.d(1),o())}),t.o(e)}}"undefined"!=typeof window?window:"undefined"!=typeof globalThis&&globalThis;function H(t,e){C(t,1,1,()=>{e.delete(t.key)})}new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);function F(t,e,o){const{fragment:c,on_mount:i,on_destroy:a,after_update:s}=t.$$;c&&c.m(e,o),x(()=>{const e=i.map(n).filter(r);a?a.push(...e):l(e),t.$$.on_mount=[]}),s.forEach(x)}function N(t,e){const n=t.$$;null!==n.fragment&&(l(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}"function"==typeof HTMLElement&&HTMLElement;class B{$destroy(){N(this,1),this.$destroy=e}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(t){this.$$set&&!c(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}t.SvelteComponent=B,t.append=a,t.attr=h,t.binding_callbacks=_,t.check_outros=O,t.create_component=function(t){t&&t.c()},t.destroy_component=N,t.destroy_each=function(t,e){for(let n=0;n<t.length;n+=1)t[n]&&t[n].d(e)},t.detach=u,t.element=f,t.empty=function(){return d("")},t.group_outros=A,t.init=function(n,r,c,i,a,s,f=[-1]){const d=t.current_component;m(n);const p=r.props||{},h=n.$$={fragment:null,ctx:null,props:s,update:e,not_equal:a,bound:o(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(d?d.$$.context:[]),callbacks:o(),dirty:f,skip_bound:!1};let _=!1;if(h.ctx=c?c(n,p,(t,e,...o)=>{const l=o.length?o[0]:e;return h.ctx&&a(h.ctx[t],h.ctx[t]=l)&&(!h.skip_bound&&h.bound[t]&&h.bound[t](l),_&&function(t,e){-1===t.$$.dirty[0]&&(y.push(t),k(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}(n,t)),e}):[],h.update(),_=!0,l(h.before_update),h.fragment=!!i&&i(h.ctx),r.target){if(r.hydrate){const t=g(r.target);h.fragment&&h.fragment.l(t),t.forEach(u)}else h.fragment&&h.fragment.c();r.intro&&L(n.$$.fragment),F(n,r.target,r.anchor),S()}m(d)},t.insert=s,t.listen=p,t.mount_component=F,t.noop=e,t.outro_and_destroy_block=H,t.safe_not_equal=function(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t},t.set_data=function(t,e){e=""+e,t.wholeText!==e&&(t.data=e)},t.space=function(){return d(" ")},t.text=d,t.transition_in=L,t.transition_out=C,t.update_keyed_each=function(t,e,n,o,l,r,c,i,a,s,u,f){let d=t.length,p=r.length,h=d;const g={};for(;h--;)g[t[h].key]=h;const m=[],y=new Map,_=new Map;for(h=p;h--;){const t=f(l,r,h),i=n(t);let a=c.get(i);a?o&&a.p(t,e):(a=s(i,t)).c(),y.set(i,m[h]=a),i in g&&_.set(i,Math.abs(h-g[i]))}const b=new Set,$=new Set;function v(t){L(t,1),t.m(i,u),c.set(t.key,t),u=t.first,p--}for(;d&&p;){const e=m[p-1],n=t[d-1],o=e.key,l=n.key;e===n?(u=e.first,d--,p--):y.has(l)?!c.has(o)||b.has(o)?v(e):$.has(l)?d--:_.get(o)>_.get(l)?($.add(o),v(e)):(b.add(l),d--):(a(n,c),d--)}for(;d--;){const e=t[d];y.has(e.key)||a(e,c)}for(;p;)v(m[p-1]);return m}}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});const{SvelteComponent:e,attr:n,binding_callbacks:o,detach:l,element:r,init:c,insert:i,noop:a,safe_not_equal:s}=t;function u(t){let e;return{c(){e=r("div"),n(e,"class",t[0])},m(n,o){i(n,e,o),e.innerHTML=t[1],t[3](e)},p(t,[o]){2&o&&(e.innerHTML=t[1]),1&o&&n(e,"class",t[0])},i:a,o:a,d(n){n&&l(e),t[3](null)}}}function f(t,e,n){let l,{classes:r=""}=e,{data:c=""}=e,i={};function a(t){if(void 0===i[t]){i[t]=!0;try{new Function(t)()}catch(e){console.error(e)}}}return t.$$set=t=>{"classes"in t&&n(0,r=t.classes),"data"in t&&n(1,c=t.data)},t.$$.update=()=>{if(4&t.$$.dirty&&l){const t=l.querySelectorAll("script");for(let e=0;e<t.length;e++){const n=t[e];"application/javascript"!==n.getAttribute("type")&&null!==n.getAttribute("type")||a(n.innerHTML)}}},[r,c,l,function(t){o[t?"unshift":"push"](()=>{n(2,l=t)})}]}var d=class extends e{constructor(t){super(),c(this,t,f,u,s,{classes:0,data:1})}};const{SvelteComponent:p,append:h,attr:g,check_outros:m,create_component:y,destroy_component:_,destroy_each:b,detach:$,element:v,empty:w,group_outros:k,init:x,insert:j,listen:M,mount_component:S,outro_and_destroy_block:T,safe_not_equal:q,set_data:E,space:A,text:O,transition_in:L,transition_out:C,update_keyed_each:H}=t;function F(t,e,n){const o=t.slice();return o[2]=e[n],o}function N(t,e,n){const o=t.slice();return o[5]=e[n],o}function B(t,e,n){const o=t.slice();return o[2]=e[n],o}function P(t){let e,n,o,l;return{c(){e=v("sup"),n=v("i"),l=A(),g(n,"class","far fa-question-circle"),g(e,"data-toggle","tooltip"),g(e,"title",o=t[0].description)},m(t,o){j(t,e,o),h(e,n),j(t,l,o)},p(t,n){1&n&&o!==(o=t[0].description)&&g(e,"title",o)},d(t){t&&$(e),t&&$(l)}}}function z(t){let e,n,o,l,r,c,i,a=t[2]+"";function s(){return t[1](t[2])}return{c(){e=v("a"),n=O(a),o=A(),g(e,"href","javascript:"),g(e,"class",l="nav-link"+(t[0].value==t[2]?" active":"")),g(e,"aria-controls",r="tab-content-"+t[0].name+"-"+t[2]),g(e,"data-toggle","tab"),g(e,"role","tab")},m(t,l){j(t,e,l),h(e,n),h(e,o),c||(i=M(e,"click",s),c=!0)},p(o,c){t=o,1&c&&a!==(a=t[2]+"")&&E(n,a),1&c&&l!==(l="nav-link"+(t[0].value==t[2]?" active":""))&&g(e,"class",l),1&c&&r!==(r="tab-content-"+t[0].name+"-"+t[2])&&g(e,"aria-controls",r)},d(t){t&&$(e),c=!1,i()}}}function D(t,e){let n,o,l;return o=new d({props:{data:e[0].field_renders[e[5].args.name]}}),{key:t,first:null,c(){n=w(),y(o.$$.fragment),this.first=n},m(t,e){j(t,n,e),S(o,t,e),l=!0},p(t,n){e=t;const l={};1&n&&(l.data=e[0].field_renders[e[5].args.name]),o.$set(l)},i(t){l||(L(o.$$.fragment,t),l=!0)},o(t){C(o.$$.fragment,t),l=!1},d(t){t&&$(n),_(o,t)}}}function G(t){let e,n,o,l,r=[],c=new Map,i=t[0].choices[t[2]];const a=t=>t[5].args.name;for(let s=0;s<i.length;s+=1){let e=N(t,i,s),n=a(e);c.set(n,r[s]=D(n,e))}return{c(){e=v("div");for(let t=0;t<r.length;t+=1)r[t].c();n=A(),g(e,"class",o="tab-pane fade"+(t[0].value==t[2]?" show active":"")),g(e,"role","tabpanel")},m(t,o){j(t,e,o);for(let n=0;n<r.length;n+=1)r[n].m(e,null);h(e,n),l=!0},p(t,s){1&s&&(i=t[0].choices[t[2]],k(),r=H(r,s,a,1,t,i,c,e,T,D,n,N),m()),(!l||1&s&&o!==(o="tab-pane fade"+(t[0].value==t[2]?" show active":"")))&&g(e,"class",o)},i(t){if(!l){for(let t=0;t<i.length;t+=1)L(r[t]);l=!0}},o(t){for(let e=0;e<r.length;e+=1)C(r[e]);l=!1},d(t){t&&$(e);for(let e=0;e<r.length;e+=1)r[e].d()}}}function I(t){let e,n,o,l,r,c,i,a,s,u,f,d,p,y,_,w,x=t[0].label+"",M=t[0].description&&P(t),S=Object.keys(t[0].choices),T=[];for(let h=0;h<S.length;h+=1)T[h]=z(B(t,S,h));let q=Object.keys(t[0].choices),H=[];for(let h=0;h<q.length;h+=1)H[h]=G(F(t,q,h));const N=t=>C(H[t],1,1,()=>{H[t]=null});return{c(){e=v("div"),n=v("div"),o=O(x),l=A(),M&&M.c(),r=O(":"),c=A(),i=v("div"),a=v("div");for(let t=0;t<T.length;t+=1)T[t].c();s=A(),u=v("div"),f=v("div");for(let t=0;t<H.length;t+=1)H[t].c();d=A(),p=v("input"),g(n,"class","col-lg-2 bold text-lg-right my-auto"),g(a,"class","nav flex-column nav-pills nav-justified"),g(a,"aria-orientation","vertical"),g(a,"role","tablist"),g(i,"class","col-lg-2 pt-2 pt-lg-0"),g(f,"class","tab-content"),g(u,"class","col-lg-8 pt-2 pt-lg-0"),g(p,"type","text"),g(p,"class","hidden"),g(p,"name",y=t[0].name),p.value=_=t[0].value,g(e,"class","row px-4 px-lg-3 pb-4")},m(t,g){j(t,e,g),h(e,n),h(n,o),h(n,l),M&&M.m(n,null),h(n,r),h(e,c),h(e,i),h(i,a);for(let e=0;e<T.length;e+=1)T[e].m(a,null);h(e,s),h(e,u),h(u,f);for(let e=0;e<H.length;e+=1)H[e].m(f,null);h(e,d),h(e,p),w=!0},p(t,[e]){if((!w||1&e)&&x!==(x=t[0].label+"")&&E(o,x),t[0].description?M?M.p(t,e):((M=P(t)).c(),M.m(n,r)):M&&(M.d(1),M=null),1&e){let n;for(S=Object.keys(t[0].choices),n=0;n<S.length;n+=1){const o=B(t,S,n);T[n]?T[n].p(o,e):(T[n]=z(o),T[n].c(),T[n].m(a,null))}for(;n<T.length;n+=1)T[n].d(1);T.length=S.length}if(1&e){let n;for(q=Object.keys(t[0].choices),n=0;n<q.length;n+=1){const o=F(t,q,n);H[n]?(H[n].p(o,e),L(H[n],1)):(H[n]=G(o),H[n].c(),L(H[n],1),H[n].m(f,null))}for(k(),n=q.length;n<H.length;n+=1)N(n);m()}(!w||1&e&&y!==(y=t[0].name))&&g(p,"name",y),(!w||1&e&&_!==(_=t[0].value)&&p.value!==_)&&(p.value=_)},i(t){if(!w){for(let t=0;t<q.length;t+=1)L(H[t]);w=!0}},o(t){H=H.filter(Boolean);for(let e=0;e<H.length;e+=1)C(H[e]);w=!1},d(t){t&&$(e),M&&M.d(),b(T,t),b(H,t)}}}function J(t,e,n){let{args:o}=e;return t.$$set=t=>{"args"in t&&n(0,o=t.args)},[o,t=>n(0,o.value=t,o)]}return class extends p{constructor(t){super(),x(this,t,J,I,q,{args:0})}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy8ucG5wbS9icm93c2VyLXBhY2stZmxhdEAzLjQuMi9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrLWZsYXQvX3ByZWx1ZGUiLCJub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDMuMzEuMi9ub2RlX21vZHVsZXMvc3ZlbHRlL2ludGVybmFsL25vZGVfbW9kdWxlcy9zdmVsdGUvaW50ZXJuYWwvaW5kZXguanMiLCJjb21wb25lbnRzL0hUTUwuc3ZlbHRlIiwicHJvZmlsZXMvZGVmYXVsdC9zdGF0aWMvanMvZmllbGRzL1RhYkZpZWxkLnN2ZWx0ZSJdLCJuYW1lcyI6WyJmIiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImciLCJ3aW5kb3ciLCJnbG9iYWwiLCJzZWxmIiwidGhpcyIsIlRhYkZpZWxkIiwic3ZlbHRlIiwiXyRpbnRlcm5hbF8yIiwibm9vcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJydW4iLCJmbiIsImJsYW5rX29iamVjdCIsImNyZWF0ZSIsInJ1bl9hbGwiLCJmbnMiLCJmb3JFYWNoIiwiaXNfZnVuY3Rpb24iLCJ0aGluZyIsImlzX2VtcHR5Iiwib2JqIiwia2V5cyIsImxlbmd0aCIsImlzX2NsaWVudCIsInJhZiIsImNiIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiU2V0IiwiYXBwZW5kIiwidGFyZ2V0Iiwibm9kZSIsImFwcGVuZENoaWxkIiwiaW5zZXJ0IiwiYW5jaG9yIiwiaW5zZXJ0QmVmb3JlIiwiZGV0YWNoIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZWxlbWVudCIsIm5hbWUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiZGF0YSIsImNyZWF0ZVRleHROb2RlIiwibGlzdGVuIiwiZXZlbnQiLCJoYW5kbGVyIiwib3B0aW9ucyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYXR0ciIsImF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImNoaWxkcmVuIiwiQXJyYXkiLCJmcm9tIiwiY2hpbGROb2RlcyIsInNldF9jdXJyZW50X2NvbXBvbmVudCIsImNvbXBvbmVudCIsImN1cnJlbnRfY29tcG9uZW50IiwiZGlydHlfY29tcG9uZW50cyIsImJpbmRpbmdfY2FsbGJhY2tzIiwicmVuZGVyX2NhbGxiYWNrcyIsImZsdXNoX2NhbGxiYWNrcyIsInJlc29sdmVkX3Byb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInVwZGF0ZV9zY2hlZHVsZWQiLCJzY2hlZHVsZV91cGRhdGUiLCJ0aGVuIiwiZmx1c2giLCJhZGRfcmVuZGVyX2NhbGxiYWNrIiwicHVzaCIsImZsdXNoaW5nIiwic2Vlbl9jYWxsYmFja3MiLCJpIiwidXBkYXRlIiwiJCQiLCJwb3AiLCJjYWxsYmFjayIsImhhcyIsImFkZCIsImNsZWFyIiwiZnJhZ21lbnQiLCJiZWZvcmVfdXBkYXRlIiwiZGlydHkiLCJwIiwiY3R4IiwiYWZ0ZXJfdXBkYXRlIiwib3V0cm9pbmciLCJvdXRyb3MiLCJncm91cF9vdXRyb3MiLCJyIiwiYyIsImNoZWNrX291dHJvcyIsInRyYW5zaXRpb25faW4iLCJibG9jayIsImxvY2FsIiwiZGVsZXRlIiwidHJhbnNpdGlvbl9vdXQiLCJvIiwiZCIsImdsb2JhbFRoaXMiLCJvdXRyb19hbmRfZGVzdHJveV9ibG9jayIsImxvb2t1cCIsImtleSIsIm1vdW50X2NvbXBvbmVudCIsIm9uX21vdW50Iiwib25fZGVzdHJveSIsIm0iLCJuZXdfb25fZGVzdHJveSIsIm1hcCIsImZpbHRlciIsImRlc3Ryb3lfY29tcG9uZW50IiwiZGV0YWNoaW5nIiwiSFRNTEVsZW1lbnQiLCJTdmVsdGVDb21wb25lbnQiLCJbb2JqZWN0IE9iamVjdF0iLCIkZGVzdHJveSIsInR5cGUiLCJjYWxsYmFja3MiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCIkJHByb3BzIiwiJCRzZXQiLCJza2lwX2JvdW5kIiwiY3JlYXRlX2NvbXBvbmVudCIsImRlc3Ryb3lfZWFjaCIsIml0ZXJhdGlvbnMiLCJlbXB0eSIsImluaXQiLCJpbnN0YW5jZSIsImNyZWF0ZV9mcmFnbWVudCIsIm5vdF9lcXVhbCIsInByb3BzIiwicGFyZW50X2NvbXBvbmVudCIsInByb3BfdmFsdWVzIiwiYm91bmQiLCJjb250ZXh0IiwiTWFwIiwicmVhZHkiLCJyZXQiLCJyZXN0IiwiZmlsbCIsImh5ZHJhdGUiLCJub2RlcyIsImwiLCJpbnRybyIsInNhZmVfbm90X2VxdWFsIiwiYSIsImIiLCJzZXRfZGF0YSIsIndob2xlVGV4dCIsInNwYWNlIiwidXBkYXRlX2tleWVkX2VhY2giLCJvbGRfYmxvY2tzIiwiZ2V0X2tleSIsImR5bmFtaWMiLCJsaXN0IiwiZGVzdHJveSIsImNyZWF0ZV9lYWNoX2Jsb2NrIiwibmV4dCIsImdldF9jb250ZXh0IiwibiIsIm9sZF9pbmRleGVzIiwibmV3X2Jsb2NrcyIsIm5ld19sb29rdXAiLCJkZWx0YXMiLCJjaGlsZF9jdHgiLCJnZXQiLCJzZXQiLCJNYXRoIiwiYWJzIiwid2lsbF9tb3ZlIiwiZGlkX21vdmUiLCJmaXJzdCIsIm5ld19ibG9jayIsIm9sZF9ibG9jayIsIm5ld19rZXkiLCJvbGRfa2V5IiwiZGl2IiwiaW5uZXJIVE1MIiwiJCRzZWxmIiwiJCRpbnZhbGlkYXRlIiwicmVmIiwiY2xhc3NlcyIsImV2YWxlZCIsInRyeV9ldmFsX29uY2UiLCJzcmMiLCJGdW5jdGlvbiIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJzY3JpcHRzIiwicXVlcnlTZWxlY3RvckFsbCIsImVsIiwiJCR2YWx1ZSIsIl8kSFRNTF8xIiwic3VwZXIiLCJfX1N2ZWx0ZUNvbXBvbmVudF8zIiwiX19hdHRyXzMiLCJfX2RldGFjaF8zIiwiX19lbGVtZW50XzMiLCJfX2luaXRfMyIsIl9faW5zZXJ0XzMiLCJfX3NhZmVfbm90X2VxdWFsXzMiLCJnZXRfZWFjaF9jb250ZXh0Iiwic2xpY2UiLCJnZXRfZWFjaF9jb250ZXh0XzEiLCJnZXRfZWFjaF9jb250ZXh0XzIiLCJjcmVhdGVfaWZfYmxvY2siLCJzdXAiLCJzdXBfdGl0bGVfdmFsdWUiLCJ0IiwiZGVzY3JpcHRpb24iLCJjcmVhdGVfZWFjaF9ibG9ja18yIiwidDAiLCJ0MSIsImFfY2xhc3NfdmFsdWUiLCJhX2FyaWFfY29udHJvbHNfdmFsdWUiLCJtb3VudGVkIiwiZGlzcG9zZSIsInQwX3ZhbHVlIiwiY2xpY2tfaGFuZGxlciIsIm5ld19jdHgiLCJjcmVhdGVfZWFjaF9ibG9ja18xIiwia2V5XzEiLCJodG1sIiwiY3VycmVudCIsImZpZWxkX3JlbmRlcnMiLCJhcmdzIiwiaHRtbF9jaGFuZ2VzIiwiJHNldCIsImRpdl9jbGFzc192YWx1ZSIsImVhY2hfYmxvY2tzIiwiZWFjaF8xX2xvb2t1cCIsImVhY2hfdmFsdWVfMSIsImNob2ljZXMiLCJfX2NyZWF0ZV9mcmFnbWVudF8zIiwiZGl2NSIsImRpdjAiLCJ0MiIsInQzIiwiZGl2MiIsImRpdjEiLCJ0NCIsImRpdjQiLCJkaXYzIiwidDUiLCJpbnB1dCIsImlucHV0X25hbWVfdmFsdWUiLCJpbnB1dF92YWx1ZV92YWx1ZSIsImxhYmVsIiwiaWZfYmxvY2siLCJlYWNoX3ZhbHVlXzIiLCJlYWNoX2Jsb2Nrc18xIiwiZWFjaF92YWx1ZSIsIm91dCIsIkJvb2xlYW4iLCJfX2luc3RhbmNlXzMiLCJjaG9pY2VfbmFtZSJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsR0FBQSxHQUFBLGlCQUFBQyxTQUFBLG9CQUFBQyxPQUFBQSxPQUFBRCxRQUFBRCxTQUFBLEdBQUEsbUJBQUFHLFFBQUFBLE9BQUFDLElBQUFELE9BQUEsR0FBQUgsT0FBQSxDQUFBLElBQUFLLElBQUFBLEVBQUEsb0JBQUFDLE9BQUFBLE9BQUEsb0JBQUFDLE9BQUFBLE9BQUEsb0JBQUFDLEtBQUFBLEtBQUFDLE1BQUFDLFdBQUFMLEVBQUFLLFNBQUEsS0FBQUMsT0FBQVgsS0FBQSxFQUFBLFdBQUEsSUFDQVksRUFBQSw0QkNEQSxhQUlBLFNBQVNDLEtBRlRDLE9B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QWdJLEVBQUE5SSxHQUFBYyxFQUFBMkcsRUFBQXpILEtBQUEsU0FBQWtKLEVBQUE3RSxFQUFBM0QsRUFBQTRELEdBQUEsSUFBQStDLEtBQUFBLEdBQUEzRyxFQUFBLE9BQUEyRCxFQUFBMUQsTUFBQUQsSUFBQSxTQUFBQSxHQUFBNEQsRUFBQSxFQUFBK0MsRUFBQTNHLEVBQUEyRyxPQUFBLENBQUFBLEVBQUE4QixHQUFBN0UsRUFBQSxFQUFBK0MsRUFBQWpPLE1BQUErUCxFQUFBOUIsSUNBQSxPREFBLGNBQUEvQixFQUFBbkYsWUFBQXhFLEdBQUEwSixRQUFBSyxFQUFBN00sS0FBQThDLEVBQUF1TixFQUFBckIsRUFBQWpDLEVBQUEsQ0FBQXlCLEtBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oZil7aWYodHlwZW9mIGV4cG9ydHM9PT1cIm9iamVjdFwiJiZ0eXBlb2YgbW9kdWxlIT09XCJ1bmRlZmluZWRcIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFtdLGYpfWVsc2V7dmFyIGc7aWYodHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCIpe2c9d2luZG93fWVsc2UgaWYodHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT1cInVuZGVmaW5lZFwiKXtnPXNlbGZ9ZWxzZXtnPXRoaXN9KGcuVGFiRmllbGQgfHwgKGcuVGFiRmllbGQgPSB7fSkpLnN2ZWx0ZSA9IGYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7IH1cbmNvbnN0IGlkZW50aXR5ID0geCA9PiB4O1xuZnVuY3Rpb24gYXNzaWduKHRhciwgc3JjKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZvciAoY29uc3QgayBpbiBzcmMpXG4gICAgICAgIHRhcltrXSA9IHNyY1trXTtcbiAgICByZXR1cm4gdGFyO1xufVxuZnVuY3Rpb24gaXNfcHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gYWRkX2xvY2F0aW9uKGVsZW1lbnQsIGZpbGUsIGxpbmUsIGNvbHVtbiwgY2hhcikge1xuICAgIGVsZW1lbnQuX19zdmVsdGVfbWV0YSA9IHtcbiAgICAgICAgbG9jOiB7IGZpbGUsIGxpbmUsIGNvbHVtbiwgY2hhciB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJ1bihmbikge1xuICAgIHJldHVybiBmbigpO1xufVxuZnVuY3Rpb24gYmxhbmtfb2JqZWN0KCkge1xuICAgIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuZnVuY3Rpb24gcnVuX2FsbChmbnMpIHtcbiAgICBmbnMuZm9yRWFjaChydW4pO1xufVxuZnVuY3Rpb24gaXNfZnVuY3Rpb24odGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gc2FmZV9ub3RfZXF1YWwoYSwgYikge1xuICAgIHJldHVybiBhICE9IGEgPyBiID09IGIgOiBhICE9PSBiIHx8ICgoYSAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHx8IHR5cGVvZiBhID09PSAnZnVuY3Rpb24nKTtcbn1cbmZ1bmN0aW9uIG5vdF9lcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGI7XG59XG5mdW5jdGlvbiBpc19lbXB0eShvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9zdG9yZShzdG9yZSwgbmFtZSkge1xuICAgIGlmIChzdG9yZSAhPSBudWxsICYmIHR5cGVvZiBzdG9yZS5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHtuYW1lfScgaXMgbm90IGEgc3RvcmUgd2l0aCBhICdzdWJzY3JpYmUnIG1ldGhvZGApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN1YnNjcmliZShzdG9yZSwgLi4uY2FsbGJhY2tzKSB7XG4gICAgaWYgKHN0b3JlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfVxuICAgIGNvbnN0IHVuc3ViID0gc3RvcmUuc3Vic2NyaWJlKC4uLmNhbGxiYWNrcyk7XG4gICAgcmV0dXJuIHVuc3ViLnVuc3Vic2NyaWJlID8gKCkgPT4gdW5zdWIudW5zdWJzY3JpYmUoKSA6IHVuc3ViO1xufVxuZnVuY3Rpb24gZ2V0X3N0b3JlX3ZhbHVlKHN0b3JlKSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIHN1YnNjcmliZShzdG9yZSwgXyA9PiB2YWx1ZSA9IF8pKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY29tcG9uZW50X3N1YnNjcmliZShjb21wb25lbnQsIHN0b3JlLCBjYWxsYmFjaykge1xuICAgIGNvbXBvbmVudC4kJC5vbl9kZXN0cm95LnB1c2goc3Vic2NyaWJlKHN0b3JlLCBjYWxsYmFjaykpO1xufVxuZnVuY3Rpb24gY3JlYXRlX3Nsb3QoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuICAgIGlmIChkZWZpbml0aW9uKSB7XG4gICAgICAgIGNvbnN0IHNsb3RfY3R4ID0gZ2V0X3Nsb3RfY29udGV4dChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKTtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25bMF0oc2xvdF9jdHgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldF9zbG90X2NvbnRleHQoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuICAgIHJldHVybiBkZWZpbml0aW9uWzFdICYmIGZuXG4gICAgICAgID8gYXNzaWduKCQkc2NvcGUuY3R4LnNsaWNlKCksIGRlZmluaXRpb25bMV0oZm4oY3R4KSkpXG4gICAgICAgIDogJCRzY29wZS5jdHg7XG59XG5mdW5jdGlvbiBnZXRfc2xvdF9jaGFuZ2VzKGRlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBmbikge1xuICAgIGlmIChkZWZpbml0aW9uWzJdICYmIGZuKSB7XG4gICAgICAgIGNvbnN0IGxldHMgPSBkZWZpbml0aW9uWzJdKGZuKGRpcnR5KSk7XG4gICAgICAgIGlmICgkJHNjb3BlLmRpcnR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZXRzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbGV0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZCA9IFtdO1xuICAgICAgICAgICAgY29uc3QgbGVuID0gTWF0aC5tYXgoJCRzY29wZS5kaXJ0eS5sZW5ndGgsIGxldHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBtZXJnZWRbaV0gPSAkJHNjb3BlLmRpcnR5W2ldIHwgbGV0c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQkc2NvcGUuZGlydHkgfCBsZXRzO1xuICAgIH1cbiAgICByZXR1cm4gJCRzY29wZS5kaXJ0eTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9zbG90KHNsb3QsIHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBkaXJ0eSwgZ2V0X3Nsb3RfY2hhbmdlc19mbiwgZ2V0X3Nsb3RfY29udGV4dF9mbikge1xuICAgIGNvbnN0IHNsb3RfY2hhbmdlcyA9IGdldF9zbG90X2NoYW5nZXMoc2xvdF9kZWZpbml0aW9uLCAkJHNjb3BlLCBkaXJ0eSwgZ2V0X3Nsb3RfY2hhbmdlc19mbik7XG4gICAgaWYgKHNsb3RfY2hhbmdlcykge1xuICAgICAgICBjb25zdCBzbG90X2NvbnRleHQgPSBnZXRfc2xvdF9jb250ZXh0KHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBnZXRfc2xvdF9jb250ZXh0X2ZuKTtcbiAgICAgICAgc2xvdC5wKHNsb3RfY29udGV4dCwgc2xvdF9jaGFuZ2VzKTtcbiAgICB9XG59XG5mdW5jdGlvbiB1cGRhdGVfc2xvdF9zcHJlYWQoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGRpcnR5LCBnZXRfc2xvdF9jaGFuZ2VzX2ZuLCBnZXRfc2xvdF9zcHJlYWRfY2hhbmdlc19mbiwgZ2V0X3Nsb3RfY29udGV4dF9mbikge1xuICAgIGNvbnN0IHNsb3RfY2hhbmdlcyA9IGdldF9zbG90X3NwcmVhZF9jaGFuZ2VzX2ZuKGRpcnR5KSB8IGdldF9zbG90X2NoYW5nZXMoc2xvdF9kZWZpbml0aW9uLCAkJHNjb3BlLCBkaXJ0eSwgZ2V0X3Nsb3RfY2hhbmdlc19mbik7XG4gICAgaWYgKHNsb3RfY2hhbmdlcykge1xuICAgICAgICBjb25zdCBzbG90X2NvbnRleHQgPSBnZXRfc2xvdF9jb250ZXh0KHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBnZXRfc2xvdF9jb250ZXh0X2ZuKTtcbiAgICAgICAgc2xvdC5wKHNsb3RfY29udGV4dCwgc2xvdF9jaGFuZ2VzKTtcbiAgICB9XG59XG5mdW5jdGlvbiBleGNsdWRlX2ludGVybmFsX3Byb3BzKHByb3BzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrIGluIHByb3BzKVxuICAgICAgICBpZiAoa1swXSAhPT0gJyQnKVxuICAgICAgICAgICAgcmVzdWx0W2tdID0gcHJvcHNba107XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVfcmVzdF9wcm9wcyhwcm9wcywga2V5cykge1xuICAgIGNvbnN0IHJlc3QgPSB7fTtcbiAgICBrZXlzID0gbmV3IFNldChrZXlzKTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gcHJvcHMpXG4gICAgICAgIGlmICgha2V5cy5oYXMoaykgJiYga1swXSAhPT0gJyQnKVxuICAgICAgICAgICAgcmVzdFtrXSA9IHByb3BzW2tdO1xuICAgIHJldHVybiByZXN0O1xufVxuZnVuY3Rpb24gY29tcHV0ZV9zbG90cyhzbG90cykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNsb3RzKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG9uY2UoZm4pIHtcbiAgICBsZXQgcmFuID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGlmIChyYW4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJhbiA9IHRydWU7XG4gICAgICAgIGZuLmNhbGwodGhpcywgLi4uYXJncyk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG51bGxfdG9fZW1wdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5mdW5jdGlvbiBzZXRfc3RvcmVfdmFsdWUoc3RvcmUsIHJldCwgdmFsdWUgPSByZXQpIHtcbiAgICBzdG9yZS5zZXQodmFsdWUpO1xuICAgIHJldHVybiByZXQ7XG59XG5jb25zdCBoYXNfcHJvcCA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xuZnVuY3Rpb24gYWN0aW9uX2Rlc3Ryb3llcihhY3Rpb25fcmVzdWx0KSB7XG4gICAgcmV0dXJuIGFjdGlvbl9yZXN1bHQgJiYgaXNfZnVuY3Rpb24oYWN0aW9uX3Jlc3VsdC5kZXN0cm95KSA/IGFjdGlvbl9yZXN1bHQuZGVzdHJveSA6IG5vb3A7XG59XG5cbmNvbnN0IGlzX2NsaWVudCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuZXhwb3J0cy5ub3cgPSBpc19jbGllbnRcbiAgICA/ICgpID0+IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKVxuICAgIDogKCkgPT4gRGF0ZS5ub3coKTtcbmV4cG9ydHMucmFmID0gaXNfY2xpZW50ID8gY2IgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKSA6IG5vb3A7XG4vLyB1c2VkIGludGVybmFsbHkgZm9yIHRlc3RpbmdcbmZ1bmN0aW9uIHNldF9ub3coZm4pIHtcbiAgICBleHBvcnRzLm5vdyA9IGZuO1xufVxuZnVuY3Rpb24gc2V0X3JhZihmbikge1xuICAgIGV4cG9ydHMucmFmID0gZm47XG59XG5cbmNvbnN0IHRhc2tzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gcnVuX3Rhc2tzKG5vdykge1xuICAgIHRhc2tzLmZvckVhY2godGFzayA9PiB7XG4gICAgICAgIGlmICghdGFzay5jKG5vdykpIHtcbiAgICAgICAgICAgIHRhc2tzLmRlbGV0ZSh0YXNrKTtcbiAgICAgICAgICAgIHRhc2suZigpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHRhc2tzLnNpemUgIT09IDApXG4gICAgICAgIGV4cG9ydHMucmFmKHJ1bl90YXNrcyk7XG59XG4vKipcbiAqIEZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkhXG4gKi9cbmZ1bmN0aW9uIGNsZWFyX2xvb3BzKCkge1xuICAgIHRhc2tzLmNsZWFyKCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdGFzayB0aGF0IHJ1bnMgb24gZWFjaCByYWYgZnJhbWVcbiAqIHVudGlsIGl0IHJldHVybnMgYSBmYWxzeSB2YWx1ZSBvciBpcyBhYm9ydGVkXG4gKi9cbmZ1bmN0aW9uIGxvb3AoY2FsbGJhY2spIHtcbiAgICBsZXQgdGFzaztcbiAgICBpZiAodGFza3Muc2l6ZSA9PT0gMClcbiAgICAgICAgZXhwb3J0cy5yYWYocnVuX3Rhc2tzKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwcm9taXNlOiBuZXcgUHJvbWlzZShmdWxmaWxsID0+IHtcbiAgICAgICAgICAgIHRhc2tzLmFkZCh0YXNrID0geyBjOiBjYWxsYmFjaywgZjogZnVsZmlsbCB9KTtcbiAgICAgICAgfSksXG4gICAgICAgIGFib3J0KCkge1xuICAgICAgICAgICAgdGFza3MuZGVsZXRlKHRhc2spO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kKHRhcmdldCwgbm9kZSkge1xuICAgIHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcbn1cbmZ1bmN0aW9uIGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgYW5jaG9yIHx8IG51bGwpO1xufVxuZnVuY3Rpb24gZGV0YWNoKG5vZGUpIHtcbiAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG59XG5mdW5jdGlvbiBkZXN0cm95X2VhY2goaXRlcmF0aW9ucywgZGV0YWNoaW5nKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyYXRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChpdGVyYXRpb25zW2ldKVxuICAgICAgICAgICAgaXRlcmF0aW9uc1tpXS5kKGRldGFjaGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZWxlbWVudChuYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSk7XG59XG5mdW5jdGlvbiBlbGVtZW50X2lzKG5hbWUsIGlzKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSwgeyBpcyB9KTtcbn1cbmZ1bmN0aW9uIG9iamVjdF93aXRob3V0X3Byb3BlcnRpZXMob2JqLCBleGNsdWRlKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0ge307XG4gICAgZm9yIChjb25zdCBrIGluIG9iaikge1xuICAgICAgICBpZiAoaGFzX3Byb3Aob2JqLCBrKVxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgJiYgZXhjbHVkZS5pbmRleE9mKGspID09PSAtMSkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGFyZ2V0W2tdID0gb2JqW2tdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBzdmdfZWxlbWVudChuYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBuYW1lKTtcbn1cbmZ1bmN0aW9uIHRleHQoZGF0YSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkYXRhKTtcbn1cbmZ1bmN0aW9uIHNwYWNlKCkge1xuICAgIHJldHVybiB0ZXh0KCcgJyk7XG59XG5mdW5jdGlvbiBlbXB0eSgpIHtcbiAgICByZXR1cm4gdGV4dCgnJyk7XG59XG5mdW5jdGlvbiBsaXN0ZW4obm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcHJldmVudF9kZWZhdWx0KGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gc3RvcF9wcm9wYWdhdGlvbihmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzZWxmKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMpXG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgZWxzZSBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSAhPT0gdmFsdWUpXG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gc2V0X2F0dHJpYnV0ZXMobm9kZSwgYXR0cmlidXRlcykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG5vZGUuX19wcm90b19fKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuY3NzVGV4dCA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdfX3ZhbHVlJykge1xuICAgICAgICAgICAgbm9kZS52YWx1ZSA9IG5vZGVba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZXNjcmlwdG9yc1trZXldICYmIGRlc2NyaXB0b3JzW2tleV0uc2V0KSB7XG4gICAgICAgICAgICBub2RlW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhdHRyKG5vZGUsIGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9zdmdfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICBhdHRyKG5vZGUsIGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YShub2RlLCBwcm9wLCB2YWx1ZSkge1xuICAgIGlmIChwcm9wIGluIG5vZGUpIHtcbiAgICAgICAgbm9kZVtwcm9wXSA9IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXR0cihub2RlLCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24geGxpbmtfYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWUoZ3JvdXAsIF9fdmFsdWUsIGNoZWNrZWQpIHtcbiAgICBjb25zdCB2YWx1ZSA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChncm91cFtpXS5jaGVja2VkKVxuICAgICAgICAgICAgdmFsdWUuYWRkKGdyb3VwW2ldLl9fdmFsdWUpO1xuICAgIH1cbiAgICBpZiAoIWNoZWNrZWQpIHtcbiAgICAgICAgdmFsdWUuZGVsZXRlKF9fdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuZnJvbSh2YWx1ZSk7XG59XG5mdW5jdGlvbiB0b19udW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09ICcnID8gbnVsbCA6ICt2YWx1ZTtcbn1cbmZ1bmN0aW9uIHRpbWVfcmFuZ2VzX3RvX2FycmF5KHJhbmdlcykge1xuICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyYXkucHVzaCh7IHN0YXJ0OiByYW5nZXMuc3RhcnQoaSksIGVuZDogcmFuZ2VzLmVuZChpKSB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuZnVuY3Rpb24gY2hpbGRyZW4oZWxlbWVudCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGROb2Rlcyk7XG59XG5mdW5jdGlvbiBjbGFpbV9lbGVtZW50KG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBzdmcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKG5vZGUubm9kZU5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgIGxldCBqID0gMDtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZSA9IFtdO1xuICAgICAgICAgICAgd2hpbGUgKGogPCBub2RlLmF0dHJpYnV0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gbm9kZS5hdHRyaWJ1dGVzW2orK107XG4gICAgICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmUucHVzaChhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCByZW1vdmUubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShyZW1vdmVba10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5vZGVzLnNwbGljZShpLCAxKVswXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3ZnID8gc3ZnX2VsZW1lbnQobmFtZSkgOiBlbGVtZW50KG5hbWUpO1xufVxuZnVuY3Rpb24gY2xhaW1fdGV4dChub2RlcywgZGF0YSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgICAgICAgbm9kZS5kYXRhID0gJycgKyBkYXRhO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGVzLnNwbGljZShpLCAxKVswXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGV4dChkYXRhKTtcbn1cbmZ1bmN0aW9uIGNsYWltX3NwYWNlKG5vZGVzKSB7XG4gICAgcmV0dXJuIGNsYWltX3RleHQobm9kZXMsICcgJyk7XG59XG5mdW5jdGlvbiBzZXRfZGF0YSh0ZXh0LCBkYXRhKSB7XG4gICAgZGF0YSA9ICcnICsgZGF0YTtcbiAgICBpZiAodGV4dC53aG9sZVRleHQgIT09IGRhdGEpXG4gICAgICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdmFsdWUoaW5wdXQsIHZhbHVlKSB7XG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNldF9pbnB1dF90eXBlKGlucHV0LCB0eXBlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaW5wdXQudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfc3R5bGUobm9kZSwga2V5LCB2YWx1ZSwgaW1wb3J0YW50KSB7XG4gICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhbHVlLCBpbXBvcnRhbnQgPyAnaW1wb3J0YW50JyA6ICcnKTtcbn1cbmZ1bmN0aW9uIHNlbGVjdF9vcHRpb24oc2VsZWN0LCB2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0Lm9wdGlvbnNbaV07XG4gICAgICAgIGlmIChvcHRpb24uX192YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBzZWxlY3Rfb3B0aW9ucyhzZWxlY3QsIHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gfnZhbHVlLmluZGV4T2Yob3B0aW9uLl9fdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNlbGVjdF92YWx1ZShzZWxlY3QpIHtcbiAgICBjb25zdCBzZWxlY3RlZF9vcHRpb24gPSBzZWxlY3QucXVlcnlTZWxlY3RvcignOmNoZWNrZWQnKSB8fCBzZWxlY3Qub3B0aW9uc1swXTtcbiAgICByZXR1cm4gc2VsZWN0ZWRfb3B0aW9uICYmIHNlbGVjdGVkX29wdGlvbi5fX3ZhbHVlO1xufVxuZnVuY3Rpb24gc2VsZWN0X211bHRpcGxlX3ZhbHVlKHNlbGVjdCkge1xuICAgIHJldHVybiBbXS5tYXAuY2FsbChzZWxlY3QucXVlcnlTZWxlY3RvckFsbCgnOmNoZWNrZWQnKSwgb3B0aW9uID0+IG9wdGlvbi5fX3ZhbHVlKTtcbn1cbi8vIHVuZm9ydHVuYXRlbHkgdGhpcyBjYW4ndCBiZSBhIGNvbnN0YW50IGFzIHRoYXQgd291bGRuJ3QgYmUgdHJlZS1zaGFrZWFibGVcbi8vIHNvIHdlIGNhY2hlIHRoZSByZXN1bHQgaW5zdGVhZFxubGV0IGNyb3Nzb3JpZ2luO1xuZnVuY3Rpb24gaXNfY3Jvc3NvcmlnaW4oKSB7XG4gICAgaWYgKGNyb3Nzb3JpZ2luID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY3Jvc3NvcmlnaW4gPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgdm9pZCB3aW5kb3cucGFyZW50LmRvY3VtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY3Jvc3NvcmlnaW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjcm9zc29yaWdpbjtcbn1cbmZ1bmN0aW9uIGFkZF9yZXNpemVfbGlzdGVuZXIobm9kZSwgZm4pIHtcbiAgICBjb25zdCBjb21wdXRlZF9zdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgaWYgKGNvbXB1dGVkX3N0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICB9XG4gICAgY29uc3QgaWZyYW1lID0gZWxlbWVudCgnaWZyYW1lJyk7XG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZGlzcGxheTogYmxvY2s7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyAnICtcbiAgICAgICAgJ292ZXJmbG93OiBoaWRkZW47IGJvcmRlcjogMDsgb3BhY2l0eTogMDsgcG9pbnRlci1ldmVudHM6IG5vbmU7IHotaW5kZXg6IC0xOycpO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICBpZnJhbWUudGFiSW5kZXggPSAtMTtcbiAgICBjb25zdCBjcm9zc29yaWdpbiA9IGlzX2Nyb3Nzb3JpZ2luKCk7XG4gICAgbGV0IHVuc3Vic2NyaWJlO1xuICAgIGlmIChjcm9zc29yaWdpbikge1xuICAgICAgICBpZnJhbWUuc3JjID0gXCJkYXRhOnRleHQvaHRtbCw8c2NyaXB0Pm9ucmVzaXplPWZ1bmN0aW9uKCl7cGFyZW50LnBvc3RNZXNzYWdlKDAsJyonKX08L3NjcmlwdD5cIjtcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBsaXN0ZW4od2luZG93LCAnbWVzc2FnZScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gaWZyYW1lLmNvbnRlbnRXaW5kb3cpXG4gICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZnJhbWUuc3JjID0gJ2Fib3V0OmJsYW5rJztcbiAgICAgICAgaWZyYW1lLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gbGlzdGVuKGlmcmFtZS5jb250ZW50V2luZG93LCAncmVzaXplJywgZm4pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBhcHBlbmQobm9kZSwgaWZyYW1lKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoY3Jvc3NvcmlnaW4pIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodW5zdWJzY3JpYmUgJiYgaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZGV0YWNoKGlmcmFtZSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvZ2dsZV9jbGFzcyhlbGVtZW50LCBuYW1lLCB0b2dnbGUpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdFt0b2dnbGUgPyAnYWRkJyA6ICdyZW1vdmUnXShuYW1lKTtcbn1cbmZ1bmN0aW9uIGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwpIHtcbiAgICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgZS5pbml0Q3VzdG9tRXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlLCBkZXRhaWwpO1xuICAgIHJldHVybiBlO1xufVxuZnVuY3Rpb24gcXVlcnlfc2VsZWN0b3JfYWxsKHNlbGVjdG9yLCBwYXJlbnQgPSBkb2N1bWVudC5ib2R5KSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbn1cbmNsYXNzIEh0bWxUYWcge1xuICAgIGNvbnN0cnVjdG9yKGFuY2hvciA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5hID0gYW5jaG9yO1xuICAgICAgICB0aGlzLmUgPSB0aGlzLm4gPSBudWxsO1xuICAgIH1cbiAgICBtKGh0bWwsIHRhcmdldCwgYW5jaG9yID0gbnVsbCkge1xuICAgICAgICBpZiAoIXRoaXMuZSkge1xuICAgICAgICAgICAgdGhpcy5lID0gZWxlbWVudCh0YXJnZXQubm9kZU5hbWUpO1xuICAgICAgICAgICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgICAgICAgICAgdGhpcy5oKGh0bWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaShhbmNob3IpO1xuICAgIH1cbiAgICBoKGh0bWwpIHtcbiAgICAgICAgdGhpcy5lLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHRoaXMubiA9IEFycmF5LmZyb20odGhpcy5lLmNoaWxkTm9kZXMpO1xuICAgIH1cbiAgICBpKGFuY2hvcikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaW5zZXJ0KHRoaXMudCwgdGhpcy5uW2ldLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHAoaHRtbCkge1xuICAgICAgICB0aGlzLmQoKTtcbiAgICAgICAgdGhpcy5oKGh0bWwpO1xuICAgICAgICB0aGlzLmkodGhpcy5hKTtcbiAgICB9XG4gICAgZCgpIHtcbiAgICAgICAgdGhpcy5uLmZvckVhY2goZGV0YWNoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhdHRyaWJ1dGVfdG9fb2JqZWN0KGF0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIHJlc3VsdFthdHRyaWJ1dGUubmFtZV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXRfY3VzdG9tX2VsZW1lbnRzX3Nsb3RzKGVsZW1lbnQpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBlbGVtZW50LmNoaWxkTm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICByZXN1bHRbbm9kZS5zbG90IHx8ICdkZWZhdWx0J10gPSB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmNvbnN0IGFjdGl2ZV9kb2NzID0gbmV3IFNldCgpO1xubGV0IGFjdGl2ZSA9IDA7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZGFya3NreWFwcC9zdHJpbmctaGFzaC9ibG9iL21hc3Rlci9pbmRleC5qc1xuZnVuY3Rpb24gaGFzaChzdHIpIHtcbiAgICBsZXQgaGFzaCA9IDUzODE7XG4gICAgbGV0IGkgPSBzdHIubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pXG4gICAgICAgIGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSBeIHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBoYXNoID4+PiAwO1xufVxuZnVuY3Rpb24gY3JlYXRlX3J1bGUobm9kZSwgYSwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNlLCBmbiwgdWlkID0gMCkge1xuICAgIGNvbnN0IHN0ZXAgPSAxNi42NjYgLyBkdXJhdGlvbjtcbiAgICBsZXQga2V5ZnJhbWVzID0gJ3tcXG4nO1xuICAgIGZvciAobGV0IHAgPSAwOyBwIDw9IDE7IHAgKz0gc3RlcCkge1xuICAgICAgICBjb25zdCB0ID0gYSArIChiIC0gYSkgKiBlYXNlKHApO1xuICAgICAgICBrZXlmcmFtZXMgKz0gcCAqIDEwMCArIGAleyR7Zm4odCwgMSAtIHQpfX1cXG5gO1xuICAgIH1cbiAgICBjb25zdCBydWxlID0ga2V5ZnJhbWVzICsgYDEwMCUgeyR7Zm4oYiwgMSAtIGIpfX1cXG59YDtcbiAgICBjb25zdCBuYW1lID0gYF9fc3ZlbHRlXyR7aGFzaChydWxlKX1fJHt1aWR9YDtcbiAgICBjb25zdCBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgYWN0aXZlX2RvY3MuYWRkKGRvYyk7XG4gICAgY29uc3Qgc3R5bGVzaGVldCA9IGRvYy5fX3N2ZWx0ZV9zdHlsZXNoZWV0IHx8IChkb2MuX19zdmVsdGVfc3R5bGVzaGVldCA9IGRvYy5oZWFkLmFwcGVuZENoaWxkKGVsZW1lbnQoJ3N0eWxlJykpLnNoZWV0KTtcbiAgICBjb25zdCBjdXJyZW50X3J1bGVzID0gZG9jLl9fc3ZlbHRlX3J1bGVzIHx8IChkb2MuX19zdmVsdGVfcnVsZXMgPSB7fSk7XG4gICAgaWYgKCFjdXJyZW50X3J1bGVzW25hbWVdKSB7XG4gICAgICAgIGN1cnJlbnRfcnVsZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgICBzdHlsZXNoZWV0Lmluc2VydFJ1bGUoYEBrZXlmcmFtZXMgJHtuYW1lfSAke3J1bGV9YCwgc3R5bGVzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgIH1cbiAgICBjb25zdCBhbmltYXRpb24gPSBub2RlLnN0eWxlLmFuaW1hdGlvbiB8fCAnJztcbiAgICBub2RlLnN0eWxlLmFuaW1hdGlvbiA9IGAke2FuaW1hdGlvbiA/IGAke2FuaW1hdGlvbn0sIGAgOiAnJ30ke25hbWV9ICR7ZHVyYXRpb259bXMgbGluZWFyICR7ZGVsYXl9bXMgMSBib3RoYDtcbiAgICBhY3RpdmUgKz0gMTtcbiAgICByZXR1cm4gbmFtZTtcbn1cbmZ1bmN0aW9uIGRlbGV0ZV9ydWxlKG5vZGUsIG5hbWUpIHtcbiAgICBjb25zdCBwcmV2aW91cyA9IChub2RlLnN0eWxlLmFuaW1hdGlvbiB8fCAnJykuc3BsaXQoJywgJyk7XG4gICAgY29uc3QgbmV4dCA9IHByZXZpb3VzLmZpbHRlcihuYW1lXG4gICAgICAgID8gYW5pbSA9PiBhbmltLmluZGV4T2YobmFtZSkgPCAwIC8vIHJlbW92ZSBzcGVjaWZpYyBhbmltYXRpb25cbiAgICAgICAgOiBhbmltID0+IGFuaW0uaW5kZXhPZignX19zdmVsdGUnKSA9PT0gLTEgLy8gcmVtb3ZlIGFsbCBTdmVsdGUgYW5pbWF0aW9uc1xuICAgICk7XG4gICAgY29uc3QgZGVsZXRlZCA9IHByZXZpb3VzLmxlbmd0aCAtIG5leHQubGVuZ3RoO1xuICAgIGlmIChkZWxldGVkKSB7XG4gICAgICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gbmV4dC5qb2luKCcsICcpO1xuICAgICAgICBhY3RpdmUgLT0gZGVsZXRlZDtcbiAgICAgICAgaWYgKCFhY3RpdmUpXG4gICAgICAgICAgICBjbGVhcl9ydWxlcygpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsZWFyX3J1bGVzKCkge1xuICAgIGV4cG9ydHMucmFmKCgpID0+IHtcbiAgICAgICAgaWYgKGFjdGl2ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgYWN0aXZlX2RvY3MuZm9yRWFjaChkb2MgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3R5bGVzaGVldCA9IGRvYy5fX3N2ZWx0ZV9zdHlsZXNoZWV0O1xuICAgICAgICAgICAgbGV0IGkgPSBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pXG4gICAgICAgICAgICAgICAgc3R5bGVzaGVldC5kZWxldGVSdWxlKGkpO1xuICAgICAgICAgICAgZG9jLl9fc3ZlbHRlX3J1bGVzID0ge307XG4gICAgICAgIH0pO1xuICAgICAgICBhY3RpdmVfZG9jcy5jbGVhcigpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVfYW5pbWF0aW9uKG5vZGUsIGZyb20sIGZuLCBwYXJhbXMpIHtcbiAgICBpZiAoIWZyb20pXG4gICAgICAgIHJldHVybiBub29wO1xuICAgIGNvbnN0IHRvID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoZnJvbS5sZWZ0ID09PSB0by5sZWZ0ICYmIGZyb20ucmlnaHQgPT09IHRvLnJpZ2h0ICYmIGZyb20udG9wID09PSB0by50b3AgJiYgZnJvbS5ib3R0b20gPT09IHRvLmJvdHRvbSlcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgXG4gICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBzaG91bGQgdGhpcyBiZSBzZXBhcmF0ZWQgZnJvbSBkZXN0cnVjdHVyaW5nPyBPciBzdGFydC9lbmQgYWRkZWQgdG8gcHVibGljIGFwaSBhbmQgZG9jdW1lbnRhdGlvbj9cbiAgICBzdGFydDogc3RhcnRfdGltZSA9IGV4cG9ydHMubm93KCkgKyBkZWxheSwgXG4gICAgLy8gQHRzLWlnbm9yZSB0b2RvOlxuICAgIGVuZCA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbiwgdGljayA9IG5vb3AsIGNzcyB9ID0gZm4obm9kZSwgeyBmcm9tLCB0byB9LCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gdHJ1ZTtcbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIGxldCBuYW1lO1xuICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICBuYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWxheSkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIG5hbWUpO1xuICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgaWYgKCFzdGFydGVkICYmIG5vdyA+PSBzdGFydF90aW1lKSB7XG4gICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRlZCAmJiBub3cgPj0gZW5kKSB7XG4gICAgICAgICAgICB0aWNrKDEsIDApO1xuICAgICAgICAgICAgc3RvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydGVkKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gbm93IC0gc3RhcnRfdGltZTtcbiAgICAgICAgICAgIGNvbnN0IHQgPSAwICsgMSAqIGVhc2luZyhwIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgc3RhcnQoKTtcbiAgICB0aWNrKDAsIDEpO1xuICAgIHJldHVybiBzdG9wO1xufVxuZnVuY3Rpb24gZml4X3Bvc2l0aW9uKG5vZGUpIHtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgaWYgKHN0eWxlLnBvc2l0aW9uICE9PSAnYWJzb2x1dGUnICYmIHN0eWxlLnBvc2l0aW9uICE9PSAnZml4ZWQnKSB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gc3R5bGU7XG4gICAgICAgIGNvbnN0IGEgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgbm9kZS5zdHlsZS53aWR0aCA9IHdpZHRoO1xuICAgICAgICBub2RlLnN0eWxlLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgYWRkX3RyYW5zZm9ybShub2RlLCBhKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhZGRfdHJhbnNmb3JtKG5vZGUsIGEpIHtcbiAgICBjb25zdCBiID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoYS5sZWZ0ICE9PSBiLmxlZnQgfHwgYS50b3AgIT09IGIudG9wKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcbiAgICAgICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSBgJHt0cmFuc2Zvcm19IHRyYW5zbGF0ZSgke2EubGVmdCAtIGIubGVmdH1weCwgJHthLnRvcCAtIGIudG9wfXB4KWA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgZXhwb3J0cy5jdXJyZW50X2NvbXBvbmVudCA9IGNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGdldF9jdXJyZW50X2NvbXBvbmVudCgpIHtcbiAgICBpZiAoIWV4cG9ydHMuY3VycmVudF9jb21wb25lbnQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRnVuY3Rpb24gY2FsbGVkIG91dHNpZGUgY29tcG9uZW50IGluaXRpYWxpemF0aW9uJyk7XG4gICAgcmV0dXJuIGV4cG9ydHMuY3VycmVudF9jb21wb25lbnQ7XG59XG5mdW5jdGlvbiBiZWZvcmVVcGRhdGUoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5iZWZvcmVfdXBkYXRlLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gb25Nb3VudChmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX21vdW50LnB1c2goZm4pO1xufVxuZnVuY3Rpb24gYWZ0ZXJVcGRhdGUoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5hZnRlcl91cGRhdGUucHVzaChmbik7XG59XG5mdW5jdGlvbiBvbkRlc3Ryb3koZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5vbl9kZXN0cm95LnB1c2goZm4pO1xufVxuZnVuY3Rpb24gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCkge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudCgpO1xuICAgIHJldHVybiAodHlwZSwgZGV0YWlsKSA9PiB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IGNvbXBvbmVudC4kJC5jYWxsYmFja3NbdHlwZV07XG4gICAgICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gYXJlIHRoZXJlIHNpdHVhdGlvbnMgd2hlcmUgZXZlbnRzIGNvdWxkIGJlIGRpc3BhdGNoZWRcbiAgICAgICAgICAgIC8vIGluIGEgc2VydmVyIChub24tRE9NKSBlbnZpcm9ubWVudD9cbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gY3VzdG9tX2V2ZW50KHR5cGUsIGRldGFpbCk7XG4gICAgICAgICAgICBjYWxsYmFja3Muc2xpY2UoKS5mb3JFYWNoKGZuID0+IHtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKGNvbXBvbmVudCwgZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gc2V0Q29udGV4dChrZXksIGNvbnRleHQpIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5jb250ZXh0LnNldChrZXksIGNvbnRleHQpO1xufVxuZnVuY3Rpb24gZ2V0Q29udGV4dChrZXkpIHtcbiAgICByZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5nZXQoa2V5KTtcbn1cbmZ1bmN0aW9uIGhhc0NvbnRleHQoa2V5KSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuaGFzKGtleSk7XG59XG4vLyBUT0RPIGZpZ3VyZSBvdXQgaWYgd2Ugc3RpbGwgd2FudCB0byBzdXBwb3J0XG4vLyBzaG9ydGhhbmQgZXZlbnRzLCBvciBpZiB3ZSB3YW50IHRvIGltcGxlbWVudFxuLy8gYSByZWFsIGJ1YmJsaW5nIG1lY2hhbmlzbVxuZnVuY3Rpb24gYnViYmxlKGNvbXBvbmVudCwgZXZlbnQpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW2V2ZW50LnR5cGVdO1xuICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgY2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaChmbiA9PiBmbihldmVudCkpO1xuICAgIH1cbn1cblxuY29uc3QgZGlydHlfY29tcG9uZW50cyA9IFtdO1xuY29uc3QgaW50cm9zID0geyBlbmFibGVkOiBmYWxzZSB9O1xuY29uc3QgYmluZGluZ19jYWxsYmFja3MgPSBbXTtcbmNvbnN0IHJlbmRlcl9jYWxsYmFja3MgPSBbXTtcbmNvbnN0IGZsdXNoX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgcmVzb2x2ZWRfcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xubGV0IHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIHNjaGVkdWxlX3VwZGF0ZSgpIHtcbiAgICBpZiAoIXVwZGF0ZV9zY2hlZHVsZWQpIHtcbiAgICAgICAgdXBkYXRlX3NjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmVkX3Byb21pc2UudGhlbihmbHVzaCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdGljaygpIHtcbiAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICByZXR1cm4gcmVzb2x2ZWRfcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGFkZF9yZW5kZXJfY2FsbGJhY2soZm4pIHtcbiAgICByZW5kZXJfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gYWRkX2ZsdXNoX2NhbGxiYWNrKGZuKSB7XG4gICAgZmx1c2hfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxubGV0IGZsdXNoaW5nID0gZmFsc2U7XG5jb25zdCBzZWVuX2NhbGxiYWNrcyA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIGlmIChmbHVzaGluZylcbiAgICAgICAgcmV0dXJuO1xuICAgIGZsdXNoaW5nID0gdHJ1ZTtcbiAgICBkbyB7XG4gICAgICAgIC8vIGZpcnN0LCBjYWxsIGJlZm9yZVVwZGF0ZSBmdW5jdGlvbnNcbiAgICAgICAgLy8gYW5kIHVwZGF0ZSBjb21wb25lbnRzXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlydHlfY29tcG9uZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gZGlydHlfY29tcG9uZW50c1tpXTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGNvbXBvbmVudC4kJCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICBkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIHdoaWxlIChiaW5kaW5nX2NhbGxiYWNrcy5sZW5ndGgpXG4gICAgICAgICAgICBiaW5kaW5nX2NhbGxiYWNrcy5wb3AoKSgpO1xuICAgICAgICAvLyB0aGVuLCBvbmNlIGNvbXBvbmVudHMgYXJlIHVwZGF0ZWQsIGNhbGxcbiAgICAgICAgLy8gYWZ0ZXJVcGRhdGUgZnVuY3Rpb25zLiBUaGlzIG1heSBjYXVzZVxuICAgICAgICAvLyBzdWJzZXF1ZW50IHVwZGF0ZXMuLi5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW5kZXJfY2FsbGJhY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IHJlbmRlcl9jYWxsYmFja3NbaV07XG4gICAgICAgICAgICBpZiAoIXNlZW5fY2FsbGJhY2tzLmhhcyhjYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICAvLyAuLi5zbyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGxvb3BzXG4gICAgICAgICAgICAgICAgc2Vlbl9jYWxsYmFja3MuYWRkKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlbmRlcl9jYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICB9IHdoaWxlIChkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCk7XG4gICAgd2hpbGUgKGZsdXNoX2NhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgZmx1c2hfY2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgfVxuICAgIHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBmbHVzaGluZyA9IGZhbHNlO1xuICAgIHNlZW5fY2FsbGJhY2tzLmNsZWFyKCk7XG59XG5mdW5jdGlvbiB1cGRhdGUoJCQpIHtcbiAgICBpZiAoJCQuZnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgJCQudXBkYXRlKCk7XG4gICAgICAgIHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG4gICAgICAgIGNvbnN0IGRpcnR5ID0gJCQuZGlydHk7XG4gICAgICAgICQkLmRpcnR5ID0gWy0xXTtcbiAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQucCgkJC5jdHgsIGRpcnR5KTtcbiAgICAgICAgJCQuYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG4gICAgfVxufVxuXG5sZXQgcHJvbWlzZTtcbmZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgaWYgKCFwcm9taXNlKSB7XG4gICAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBkaXNwYXRjaChub2RlLCBkaXJlY3Rpb24sIGtpbmQpIHtcbiAgICBub2RlLmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KGAke2RpcmVjdGlvbiA/ICdpbnRybycgOiAnb3V0cm8nfSR7a2luZH1gKSk7XG59XG5jb25zdCBvdXRyb2luZyA9IG5ldyBTZXQoKTtcbmxldCBvdXRyb3M7XG5mdW5jdGlvbiBncm91cF9vdXRyb3MoKSB7XG4gICAgb3V0cm9zID0ge1xuICAgICAgICByOiAwLFxuICAgICAgICBjOiBbXSxcbiAgICAgICAgcDogb3V0cm9zIC8vIHBhcmVudCBncm91cFxuICAgIH07XG59XG5mdW5jdGlvbiBjaGVja19vdXRyb3MoKSB7XG4gICAgaWYgKCFvdXRyb3Mucikge1xuICAgICAgICBydW5fYWxsKG91dHJvcy5jKTtcbiAgICB9XG4gICAgb3V0cm9zID0gb3V0cm9zLnA7XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX2luKGJsb2NrLCBsb2NhbCkge1xuICAgIGlmIChibG9jayAmJiBibG9jay5pKSB7XG4gICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgIGJsb2NrLmkobG9jYWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb25fb3V0KGJsb2NrLCBsb2NhbCwgZGV0YWNoLCBjYWxsYmFjaykge1xuICAgIGlmIChibG9jayAmJiBibG9jay5vKSB7XG4gICAgICAgIGlmIChvdXRyb2luZy5oYXMoYmxvY2spKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBvdXRyb2luZy5hZGQoYmxvY2spO1xuICAgICAgICBvdXRyb3MuYy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoZGV0YWNoKVxuICAgICAgICAgICAgICAgICAgICBibG9jay5kKDEpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBibG9jay5vKGxvY2FsKTtcbiAgICB9XG59XG5jb25zdCBudWxsX3RyYW5zaXRpb24gPSB7IGR1cmF0aW9uOiAwIH07XG5mdW5jdGlvbiBjcmVhdGVfaW5fdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSBmYWxzZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgbGV0IHRhc2s7XG4gICAgbGV0IHVpZCA9IDA7XG4gICAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbygpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcywgdWlkKyspO1xuICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICBjb25zdCBzdGFydF90aW1lID0gZXhwb3J0cy5ub3coKSArIGRlbGF5O1xuICAgICAgICBjb25zdCBlbmRfdGltZSA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbjtcbiAgICAgICAgaWYgKHRhc2spXG4gICAgICAgICAgICB0YXNrLmFib3J0KCk7XG4gICAgICAgIHJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIHRydWUsICdzdGFydCcpKTtcbiAgICAgICAgdGFzayA9IGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBlbmRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDEsIDApO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCB0cnVlLCAnZW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBzdGFydF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlYXNpbmcoKG5vdyAtIHN0YXJ0X3RpbWUpIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnVubmluZztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBzdGFydGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQoKSB7XG4gICAgICAgICAgICBpZiAoc3RhcnRlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlKTtcbiAgICAgICAgICAgIGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICAgICAgd2FpdCgpLnRoZW4oZ28pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ28oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW52YWxpZGF0ZSgpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW5kKCkge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9vdXRfdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSB0cnVlO1xuICAgIGxldCBhbmltYXRpb25fbmFtZTtcbiAgICBjb25zdCBncm91cCA9IG91dHJvcztcbiAgICBncm91cC5yICs9IDE7XG4gICAgZnVuY3Rpb24gZ28oKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDEsIDAsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICBjb25zdCBzdGFydF90aW1lID0gZXhwb3J0cy5ub3coKSArIGRlbGF5O1xuICAgICAgICBjb25zdCBlbmRfdGltZSA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbjtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ3N0YXJ0JykpO1xuICAgICAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gZW5kX3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgZmFsc2UsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEtLWdyb3VwLnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCByZXN1bHQgaW4gYGVuZCgpYCBiZWluZyBjYWxsZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzbyB3ZSBkb24ndCBuZWVkIHRvIGNsZWFuIHVwIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bl9hbGwoZ3JvdXAuYyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGVhc2luZygobm93IC0gc3RhcnRfdGltZSkgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMSAtIHQsIHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydW5uaW5nO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgd2FpdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICBnbygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdvKCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGVuZChyZXNldCkge1xuICAgICAgICAgICAgaWYgKHJlc2V0ICYmIGNvbmZpZy50aWNrKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLnRpY2soMSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMsIGludHJvKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHQgPSBpbnRybyA/IDAgOiAxO1xuICAgIGxldCBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgIGxldCBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgIGxldCBhbmltYXRpb25fbmFtZSA9IG51bGw7XG4gICAgZnVuY3Rpb24gY2xlYXJfYW5pbWF0aW9uKCkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uX25hbWUpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGluaXQocHJvZ3JhbSwgZHVyYXRpb24pIHtcbiAgICAgICAgY29uc3QgZCA9IHByb2dyYW0uYiAtIHQ7XG4gICAgICAgIGR1cmF0aW9uICo9IE1hdGguYWJzKGQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYTogdCxcbiAgICAgICAgICAgIGI6IHByb2dyYW0uYixcbiAgICAgICAgICAgIGQsXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgIHN0YXJ0OiBwcm9ncmFtLnN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBwcm9ncmFtLnN0YXJ0ICsgZHVyYXRpb24sXG4gICAgICAgICAgICBncm91cDogcHJvZ3JhbS5ncm91cFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbyhiKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGNvbnN0IHByb2dyYW0gPSB7XG4gICAgICAgICAgICBzdGFydDogZXhwb3J0cy5ub3coKSArIGRlbGF5LFxuICAgICAgICAgICAgYlxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWIpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICBwcm9ncmFtLmdyb3VwID0gb3V0cm9zO1xuICAgICAgICAgICAgb3V0cm9zLnIgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocnVubmluZ19wcm9ncmFtIHx8IHBlbmRpbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgcGVuZGluZ19wcm9ncmFtID0gcHJvZ3JhbTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYW4gaW50cm8sIGFuZCB0aGVyZSdzIGEgZGVsYXksIHdlIG5lZWQgdG8gZG9cbiAgICAgICAgICAgIC8vIGFuIGluaXRpYWwgdGljayBhbmQvb3IgYXBwbHkgQ1NTIGFuaW1hdGlvbiBpbW1lZGlhdGVseVxuICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgdCwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYilcbiAgICAgICAgICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gaW5pdChwcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGIsICdzdGFydCcpKTtcbiAgICAgICAgICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGVuZGluZ19wcm9ncmFtICYmIG5vdyA+IHBlbmRpbmdfcHJvZ3JhbS5zdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0KHBlbmRpbmdfcHJvZ3JhbSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ3N0YXJ0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBydW5uaW5nX3Byb2dyYW0uYiwgcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uLCAwLCBlYXNpbmcsIGNvbmZpZy5jc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrKHQgPSBydW5uaW5nX3Byb2dyYW0uYiwgMSAtIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgcnVubmluZ19wcm9ncmFtLmIsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGVuZGluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UncmUgZG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0uYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnRybyDigJQgd2UgY2FuIHRpZHkgdXAgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvdXRybyDigJQgbmVlZHMgdG8gYmUgY29vcmRpbmF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEtLXJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVuX2FsbChydW5uaW5nX3Byb2dyYW0uZ3JvdXAuYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChub3cgPj0gcnVubmluZ19wcm9ncmFtLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwID0gbm93IC0gcnVubmluZ19wcm9ncmFtLnN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IHJ1bm5pbmdfcHJvZ3JhbS5hICsgcnVubmluZ19wcm9ncmFtLmQgKiBlYXNpbmcocCAvIHJ1bm5pbmdfcHJvZ3JhbS5kdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gISEocnVubmluZ19wcm9ncmFtIHx8IHBlbmRpbmdfcHJvZ3JhbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBydW4oYikge1xuICAgICAgICAgICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICB3YWl0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICAgICAgICAgIGdvKGIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ28oYik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVuZCgpIHtcbiAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gcGVuZGluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZV9wcm9taXNlKHByb21pc2UsIGluZm8pIHtcbiAgICBjb25zdCB0b2tlbiA9IGluZm8udG9rZW4gPSB7fTtcbiAgICBmdW5jdGlvbiB1cGRhdGUodHlwZSwgaW5kZXgsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGluZm8udG9rZW4gIT09IHRva2VuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpbmZvLnJlc29sdmVkID0gdmFsdWU7XG4gICAgICAgIGxldCBjaGlsZF9jdHggPSBpbmZvLmN0eDtcbiAgICAgICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjaGlsZF9jdHggPSBjaGlsZF9jdHguc2xpY2UoKTtcbiAgICAgICAgICAgIGNoaWxkX2N0eFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxvY2sgPSB0eXBlICYmIChpbmZvLmN1cnJlbnQgPSB0eXBlKShjaGlsZF9jdHgpO1xuICAgICAgICBsZXQgbmVlZHNfZmx1c2ggPSBmYWxzZTtcbiAgICAgICAgaWYgKGluZm8uYmxvY2spIHtcbiAgICAgICAgICAgIGlmIChpbmZvLmJsb2Nrcykge1xuICAgICAgICAgICAgICAgIGluZm8uYmxvY2tzLmZvckVhY2goKGJsb2NrLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpICE9PSBpbmRleCAmJiBibG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uX291dChibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLmJsb2Nrc1tpXSA9PT0gYmxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5ibG9ja3NbaV0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGluZm8uYmxvY2suZCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb2NrLmMoKTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuICAgICAgICAgICAgYmxvY2subShpbmZvLm1vdW50KCksIGluZm8uYW5jaG9yKTtcbiAgICAgICAgICAgIG5lZWRzX2ZsdXNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpbmZvLmJsb2NrID0gYmxvY2s7XG4gICAgICAgIGlmIChpbmZvLmJsb2NrcylcbiAgICAgICAgICAgIGluZm8uYmxvY2tzW2luZGV4XSA9IGJsb2NrO1xuICAgICAgICBpZiAobmVlZHNfZmx1c2gpIHtcbiAgICAgICAgICAgIGZsdXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzX3Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgY29uc3QgY3VycmVudF9jb21wb25lbnQgPSBnZXRfY3VycmVudF9jb21wb25lbnQoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby5jYXRjaCwgMiwgaW5mby5lcnJvciwgZXJyb3IpO1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICAgICAgaWYgKCFpbmZvLmhhc0NhdGNoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBpZiB3ZSBwcmV2aW91c2x5IGhhZCBhIHRoZW4vY2F0Y2ggYmxvY2ssIGRlc3Ryb3kgaXRcbiAgICAgICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby5wZW5kaW5nKSB7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby5wZW5kaW5nLCAwKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoaW5mby5jdXJyZW50ICE9PSBpbmZvLnRoZW4pIHtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnRoZW4sIDEsIGluZm8udmFsdWUsIHByb21pc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaW5mby5yZXNvbHZlZCA9IHByb21pc2U7XG4gICAgfVxufVxuXG5jb25zdCBnbG9iYWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGdsb2JhbFRoaXNcbiAgICAgICAgOiBnbG9iYWwpO1xuXG5mdW5jdGlvbiBkZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5kKDEpO1xuICAgIGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcbn1cbmZ1bmN0aW9uIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICB0cmFuc2l0aW9uX291dChibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICBsb29rdXAuZGVsZXRlKGJsb2NrLmtleSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBmaXhfYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmYoKTtcbiAgICBkZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApO1xufVxuZnVuY3Rpb24gZml4X2FuZF9vdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZigpO1xuICAgIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApO1xufVxuZnVuY3Rpb24gdXBkYXRlX2tleWVkX2VhY2gob2xkX2Jsb2NrcywgZGlydHksIGdldF9rZXksIGR5bmFtaWMsIGN0eCwgbGlzdCwgbG9va3VwLCBub2RlLCBkZXN0cm95LCBjcmVhdGVfZWFjaF9ibG9jaywgbmV4dCwgZ2V0X2NvbnRleHQpIHtcbiAgICBsZXQgbyA9IG9sZF9ibG9ja3MubGVuZ3RoO1xuICAgIGxldCBuID0gbGlzdC5sZW5ndGg7XG4gICAgbGV0IGkgPSBvO1xuICAgIGNvbnN0IG9sZF9pbmRleGVzID0ge307XG4gICAgd2hpbGUgKGktLSlcbiAgICAgICAgb2xkX2luZGV4ZXNbb2xkX2Jsb2Nrc1tpXS5rZXldID0gaTtcbiAgICBjb25zdCBuZXdfYmxvY2tzID0gW107XG4gICAgY29uc3QgbmV3X2xvb2t1cCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBkZWx0YXMgPSBuZXcgTWFwKCk7XG4gICAgaSA9IG47XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb25zdCBjaGlsZF9jdHggPSBnZXRfY29udGV4dChjdHgsIGxpc3QsIGkpO1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRfa2V5KGNoaWxkX2N0eCk7XG4gICAgICAgIGxldCBibG9jayA9IGxvb2t1cC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFibG9jaykge1xuICAgICAgICAgICAgYmxvY2sgPSBjcmVhdGVfZWFjaF9ibG9jayhrZXksIGNoaWxkX2N0eCk7XG4gICAgICAgICAgICBibG9jay5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZHluYW1pYykge1xuICAgICAgICAgICAgYmxvY2sucChjaGlsZF9jdHgsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgICBuZXdfbG9va3VwLnNldChrZXksIG5ld19ibG9ja3NbaV0gPSBibG9jayk7XG4gICAgICAgIGlmIChrZXkgaW4gb2xkX2luZGV4ZXMpXG4gICAgICAgICAgICBkZWx0YXMuc2V0KGtleSwgTWF0aC5hYnMoaSAtIG9sZF9pbmRleGVzW2tleV0pKTtcbiAgICB9XG4gICAgY29uc3Qgd2lsbF9tb3ZlID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IGRpZF9tb3ZlID0gbmV3IFNldCgpO1xuICAgIGZ1bmN0aW9uIGluc2VydChibG9jaykge1xuICAgICAgICB0cmFuc2l0aW9uX2luKGJsb2NrLCAxKTtcbiAgICAgICAgYmxvY2subShub2RlLCBuZXh0KTtcbiAgICAgICAgbG9va3VwLnNldChibG9jay5rZXksIGJsb2NrKTtcbiAgICAgICAgbmV4dCA9IGJsb2NrLmZpcnN0O1xuICAgICAgICBuLS07XG4gICAgfVxuICAgIHdoaWxlIChvICYmIG4pIHtcbiAgICAgICAgY29uc3QgbmV3X2Jsb2NrID0gbmV3X2Jsb2Nrc1tuIC0gMV07XG4gICAgICAgIGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3NbbyAtIDFdO1xuICAgICAgICBjb25zdCBuZXdfa2V5ID0gbmV3X2Jsb2NrLmtleTtcbiAgICAgICAgY29uc3Qgb2xkX2tleSA9IG9sZF9ibG9jay5rZXk7XG4gICAgICAgIGlmIChuZXdfYmxvY2sgPT09IG9sZF9ibG9jaykge1xuICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgICAgICAgbmV4dCA9IG5ld19ibG9jay5maXJzdDtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgICAgIG4tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2tleSkpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBvbGQgYmxvY2tcbiAgICAgICAgICAgIGRlc3Ryb3kob2xkX2Jsb2NrLCBsb29rdXApO1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFsb29rdXAuaGFzKG5ld19rZXkpIHx8IHdpbGxfbW92ZS5oYXMobmV3X2tleSkpIHtcbiAgICAgICAgICAgIGluc2VydChuZXdfYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRpZF9tb3ZlLmhhcyhvbGRfa2V5KSkge1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlbHRhcy5nZXQobmV3X2tleSkgPiBkZWx0YXMuZ2V0KG9sZF9rZXkpKSB7XG4gICAgICAgICAgICBkaWRfbW92ZS5hZGQobmV3X2tleSk7XG4gICAgICAgICAgICBpbnNlcnQobmV3X2Jsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdpbGxfbW92ZS5hZGQob2xkX2tleSk7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKG8tLSkge1xuICAgICAgICBjb25zdCBvbGRfYmxvY2sgPSBvbGRfYmxvY2tzW29dO1xuICAgICAgICBpZiAoIW5ld19sb29rdXAuaGFzKG9sZF9ibG9jay5rZXkpKVxuICAgICAgICAgICAgZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG4gICAgfVxuICAgIHdoaWxlIChuKVxuICAgICAgICBpbnNlcnQobmV3X2Jsb2Nrc1tuIC0gMV0pO1xuICAgIHJldHVybiBuZXdfYmxvY2tzO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfZWFjaF9rZXlzKGN0eCwgbGlzdCwgZ2V0X2NvbnRleHQsIGdldF9rZXkpIHtcbiAgICBjb25zdCBrZXlzID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRfa2V5KGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSkpO1xuICAgICAgICBpZiAoa2V5cy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaGF2ZSBkdXBsaWNhdGUga2V5cyBpbiBhIGtleWVkIGVhY2gnKTtcbiAgICAgICAgfVxuICAgICAgICBrZXlzLmFkZChrZXkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0X3NwcmVhZF91cGRhdGUobGV2ZWxzLCB1cGRhdGVzKSB7XG4gICAgY29uc3QgdXBkYXRlID0ge307XG4gICAgY29uc3QgdG9fbnVsbF9vdXQgPSB7fTtcbiAgICBjb25zdCBhY2NvdW50ZWRfZm9yID0geyAkJHNjb3BlOiAxIH07XG4gICAgbGV0IGkgPSBsZXZlbHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29uc3QgbyA9IGxldmVsc1tpXTtcbiAgICAgICAgY29uc3QgbiA9IHVwZGF0ZXNbaV07XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIG4pKVxuICAgICAgICAgICAgICAgICAgICB0b19udWxsX291dFtrZXldID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFjY291bnRlZF9mb3Jba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVba2V5XSA9IG5ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudGVkX2ZvcltrZXldID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXZlbHNbaV0gPSBuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbykge1xuICAgICAgICAgICAgICAgIGFjY291bnRlZF9mb3Jba2V5XSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdG9fbnVsbF9vdXQpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIHVwZGF0ZSkpXG4gICAgICAgICAgICB1cGRhdGVba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZTtcbn1cbmZ1bmN0aW9uIGdldF9zcHJlYWRfb2JqZWN0KHNwcmVhZF9wcm9wcykge1xuICAgIHJldHVybiB0eXBlb2Ygc3ByZWFkX3Byb3BzID09PSAnb2JqZWN0JyAmJiBzcHJlYWRfcHJvcHMgIT09IG51bGwgPyBzcHJlYWRfcHJvcHMgOiB7fTtcbn1cblxuLy8gc291cmNlOiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWxcbmNvbnN0IGJvb2xlYW5fYXR0cmlidXRlcyA9IG5ldyBTZXQoW1xuICAgICdhbGxvd2Z1bGxzY3JlZW4nLFxuICAgICdhbGxvd3BheW1lbnRyZXF1ZXN0JyxcbiAgICAnYXN5bmMnLFxuICAgICdhdXRvZm9jdXMnLFxuICAgICdhdXRvcGxheScsXG4gICAgJ2NoZWNrZWQnLFxuICAgICdjb250cm9scycsXG4gICAgJ2RlZmF1bHQnLFxuICAgICdkZWZlcicsXG4gICAgJ2Rpc2FibGVkJyxcbiAgICAnZm9ybW5vdmFsaWRhdGUnLFxuICAgICdoaWRkZW4nLFxuICAgICdpc21hcCcsXG4gICAgJ2xvb3AnLFxuICAgICdtdWx0aXBsZScsXG4gICAgJ211dGVkJyxcbiAgICAnbm9tb2R1bGUnLFxuICAgICdub3ZhbGlkYXRlJyxcbiAgICAnb3BlbicsXG4gICAgJ3BsYXlzaW5saW5lJyxcbiAgICAncmVhZG9ubHknLFxuICAgICdyZXF1aXJlZCcsXG4gICAgJ3JldmVyc2VkJyxcbiAgICAnc2VsZWN0ZWQnXG5dKTtcblxuY29uc3QgaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIgPSAvW1xccydcIj4vPVxcdXtGREQwfS1cXHV7RkRFRn1cXHV7RkZGRX1cXHV7RkZGRn1cXHV7MUZGRkV9XFx1ezFGRkZGfVxcdXsyRkZGRX1cXHV7MkZGRkZ9XFx1ezNGRkZFfVxcdXszRkZGRn1cXHV7NEZGRkV9XFx1ezRGRkZGfVxcdXs1RkZGRX1cXHV7NUZGRkZ9XFx1ezZGRkZFfVxcdXs2RkZGRn1cXHV7N0ZGRkV9XFx1ezdGRkZGfVxcdXs4RkZGRX1cXHV7OEZGRkZ9XFx1ezlGRkZFfVxcdXs5RkZGRn1cXHV7QUZGRkV9XFx1e0FGRkZGfVxcdXtCRkZGRX1cXHV7QkZGRkZ9XFx1e0NGRkZFfVxcdXtDRkZGRn1cXHV7REZGRkV9XFx1e0RGRkZGfVxcdXtFRkZGRX1cXHV7RUZGRkZ9XFx1e0ZGRkZFfVxcdXtGRkZGRn1cXHV7MTBGRkZFfVxcdXsxMEZGRkZ9XS91O1xuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG4vLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jbm9uY2hhcmFjdGVyXG5mdW5jdGlvbiBzcHJlYWQoYXJncywgY2xhc3Nlc190b19hZGQpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbih7fSwgLi4uYXJncyk7XG4gICAgaWYgKGNsYXNzZXNfdG9fYWRkKSB7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzLmNsYXNzID09IG51bGwpIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMuY2xhc3MgPSBjbGFzc2VzX3RvX2FkZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMuY2xhc3MgKz0gJyAnICsgY2xhc3Nlc190b19hZGQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgIGlmIChpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3Rlci50ZXN0KG5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIHN0ciArPSAnICcgKyBuYW1lO1xuICAgICAgICBlbHNlIGlmIChib29sZWFuX2F0dHJpYnV0ZXMuaGFzKG5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSlcbiAgICAgICAgICAgICAgICBzdHIgKz0gJyAnICsgbmFtZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzdHIgKz0gYCAke25hbWV9PVwiJHtTdHJpbmcodmFsdWUpLnJlcGxhY2UoL1wiL2csICcmIzM0OycpLnJlcGxhY2UoLycvZywgJyYjMzk7Jyl9XCJgO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0cjtcbn1cbmNvbnN0IGVzY2FwZWQgPSB7XG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmIzM5OycsXG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnXG59O1xuZnVuY3Rpb24gZXNjYXBlKGh0bWwpIHtcbiAgICByZXR1cm4gU3RyaW5nKGh0bWwpLnJlcGxhY2UoL1tcIicmPD5dL2csIG1hdGNoID0+IGVzY2FwZWRbbWF0Y2hdKTtcbn1cbmZ1bmN0aW9uIGVhY2goaXRlbXMsIGZuKSB7XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IGZuKGl0ZW1zW2ldLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cbmNvbnN0IG1pc3NpbmdfY29tcG9uZW50ID0ge1xuICAgICQkcmVuZGVyOiAoKSA9PiAnJ1xufTtcbmZ1bmN0aW9uIHZhbGlkYXRlX2NvbXBvbmVudChjb21wb25lbnQsIG5hbWUpIHtcbiAgICBpZiAoIWNvbXBvbmVudCB8fCAhY29tcG9uZW50LiQkcmVuZGVyKSB7XG4gICAgICAgIGlmIChuYW1lID09PSAnc3ZlbHRlOmNvbXBvbmVudCcpXG4gICAgICAgICAgICBuYW1lICs9ICcgdGhpcz17Li4ufSc7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgPCR7bmFtZX0+IGlzIG5vdCBhIHZhbGlkIFNTUiBjb21wb25lbnQuIFlvdSBtYXkgbmVlZCB0byByZXZpZXcgeW91ciBidWlsZCBjb25maWcgdG8gZW5zdXJlIHRoYXQgZGVwZW5kZW5jaWVzIGFyZSBjb21waWxlZCwgcmF0aGVyIHRoYW4gaW1wb3J0ZWQgYXMgcHJlLWNvbXBpbGVkIG1vZHVsZXNgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGRlYnVnKGZpbGUsIGxpbmUsIGNvbHVtbiwgdmFsdWVzKSB7XG4gICAgY29uc29sZS5sb2coYHtAZGVidWd9ICR7ZmlsZSA/IGZpbGUgKyAnICcgOiAnJ30oJHtsaW5lfToke2NvbHVtbn0pYCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKHZhbHVlcyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIHJldHVybiAnJztcbn1cbmxldCBvbl9kZXN0cm95O1xuZnVuY3Rpb24gY3JlYXRlX3Nzcl9jb21wb25lbnQoZm4pIHtcbiAgICBmdW5jdGlvbiAkJHJlbmRlcihyZXN1bHQsIHByb3BzLCBiaW5kaW5ncywgc2xvdHMpIHtcbiAgICAgICAgY29uc3QgcGFyZW50X2NvbXBvbmVudCA9IGV4cG9ydHMuY3VycmVudF9jb21wb25lbnQ7XG4gICAgICAgIGNvbnN0ICQkID0ge1xuICAgICAgICAgICAgb25fZGVzdHJveSxcbiAgICAgICAgICAgIGNvbnRleHQ6IG5ldyBNYXAocGFyZW50X2NvbXBvbmVudCA/IHBhcmVudF9jb21wb25lbnQuJCQuY29udGV4dCA6IFtdKSxcbiAgICAgICAgICAgIC8vIHRoZXNlIHdpbGwgYmUgaW1tZWRpYXRlbHkgZGlzY2FyZGVkXG4gICAgICAgICAgICBvbl9tb3VudDogW10sXG4gICAgICAgICAgICBiZWZvcmVfdXBkYXRlOiBbXSxcbiAgICAgICAgICAgIGFmdGVyX3VwZGF0ZTogW10sXG4gICAgICAgICAgICBjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpXG4gICAgICAgIH07XG4gICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudCh7ICQkIH0pO1xuICAgICAgICBjb25zdCBodG1sID0gZm4ocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzKTtcbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHBhcmVudF9jb21wb25lbnQpO1xuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVuZGVyOiAocHJvcHMgPSB7fSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICAgICAgICBvbl9kZXN0cm95ID0gW107XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7IHRpdGxlOiAnJywgaGVhZDogJycsIGNzczogbmV3IFNldCgpIH07XG4gICAgICAgICAgICBjb25zdCBodG1sID0gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywge30sIG9wdGlvbnMpO1xuICAgICAgICAgICAgcnVuX2FsbChvbl9kZXN0cm95KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaHRtbCxcbiAgICAgICAgICAgICAgICBjc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogQXJyYXkuZnJvbShyZXN1bHQuY3NzKS5tYXAoY3NzID0+IGNzcy5jb2RlKS5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgICAgICAgICAgbWFwOiBudWxsIC8vIFRPRE9cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhlYWQ6IHJlc3VsdC50aXRsZSArIHJlc3VsdC5oZWFkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAkJHJlbmRlclxuICAgIH07XG59XG5mdW5jdGlvbiBhZGRfYXR0cmlidXRlKG5hbWUsIHZhbHVlLCBib29sZWFuKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgKGJvb2xlYW4gJiYgIXZhbHVlKSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIHJldHVybiBgICR7bmFtZX0ke3ZhbHVlID09PSB0cnVlID8gJycgOiBgPSR7dHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IEpTT04uc3RyaW5naWZ5KGVzY2FwZSh2YWx1ZSkpIDogYFwiJHt2YWx1ZX1cImB9YH1gO1xufVxuZnVuY3Rpb24gYWRkX2NsYXNzZXMoY2xhc3Nlcykge1xuICAgIHJldHVybiBjbGFzc2VzID8gYCBjbGFzcz1cIiR7Y2xhc3Nlc31cImAgOiAnJztcbn1cblxuZnVuY3Rpb24gYmluZChjb21wb25lbnQsIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgaW5kZXggPSBjb21wb25lbnQuJCQucHJvcHNbbmFtZV07XG4gICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29tcG9uZW50LiQkLmJvdW5kW2luZGV4XSA9IGNhbGxiYWNrO1xuICAgICAgICBjYWxsYmFjayhjb21wb25lbnQuJCQuY3R4W2luZGV4XSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlX2NvbXBvbmVudChibG9jaykge1xuICAgIGJsb2NrICYmIGJsb2NrLmMoKTtcbn1cbmZ1bmN0aW9uIGNsYWltX2NvbXBvbmVudChibG9jaywgcGFyZW50X25vZGVzKSB7XG4gICAgYmxvY2sgJiYgYmxvY2subChwYXJlbnRfbm9kZXMpO1xufVxuZnVuY3Rpb24gbW91bnRfY29tcG9uZW50KGNvbXBvbmVudCwgdGFyZ2V0LCBhbmNob3IpIHtcbiAgICBjb25zdCB7IGZyYWdtZW50LCBvbl9tb3VudCwgb25fZGVzdHJveSwgYWZ0ZXJfdXBkYXRlIH0gPSBjb21wb25lbnQuJCQ7XG4gICAgZnJhZ21lbnQgJiYgZnJhZ21lbnQubSh0YXJnZXQsIGFuY2hvcik7XG4gICAgLy8gb25Nb3VudCBoYXBwZW5zIGJlZm9yZSB0aGUgaW5pdGlhbCBhZnRlclVwZGF0ZVxuICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdfb25fZGVzdHJveSA9IG9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG4gICAgICAgIGlmIChvbl9kZXN0cm95KSB7XG4gICAgICAgICAgICBvbl9kZXN0cm95LnB1c2goLi4ubmV3X29uX2Rlc3Ryb3kpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gRWRnZSBjYXNlIC0gY29tcG9uZW50IHdhcyBkZXN0cm95ZWQgaW1tZWRpYXRlbHksXG4gICAgICAgICAgICAvLyBtb3N0IGxpa2VseSBhcyBhIHJlc3VsdCBvZiBhIGJpbmRpbmcgaW5pdGlhbGlzaW5nXG4gICAgICAgICAgICBydW5fYWxsKG5ld19vbl9kZXN0cm95KTtcbiAgICAgICAgfVxuICAgICAgICBjb21wb25lbnQuJCQub25fbW91bnQgPSBbXTtcbiAgICB9KTtcbiAgICBhZnRlcl91cGRhdGUuZm9yRWFjaChhZGRfcmVuZGVyX2NhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfY29tcG9uZW50KGNvbXBvbmVudCwgZGV0YWNoaW5nKSB7XG4gICAgY29uc3QgJCQgPSBjb21wb25lbnQuJCQ7XG4gICAgaWYgKCQkLmZyYWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHJ1bl9hbGwoJCQub25fZGVzdHJveSk7XG4gICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LmQoZGV0YWNoaW5nKTtcbiAgICAgICAgLy8gVE9ETyBudWxsIG91dCBvdGhlciByZWZzLCBpbmNsdWRpbmcgY29tcG9uZW50LiQkIChidXQgbmVlZCB0b1xuICAgICAgICAvLyBwcmVzZXJ2ZSBmaW5hbCBzdGF0ZT8pXG4gICAgICAgICQkLm9uX2Rlc3Ryb3kgPSAkJC5mcmFnbWVudCA9IG51bGw7XG4gICAgICAgICQkLmN0eCA9IFtdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1ha2VfZGlydHkoY29tcG9uZW50LCBpKSB7XG4gICAgaWYgKGNvbXBvbmVudC4kJC5kaXJ0eVswXSA9PT0gLTEpIHtcbiAgICAgICAgZGlydHlfY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgICAgIHNjaGVkdWxlX3VwZGF0ZSgpO1xuICAgICAgICBjb21wb25lbnQuJCQuZGlydHkuZmlsbCgwKTtcbiAgICB9XG4gICAgY29tcG9uZW50LiQkLmRpcnR5WyhpIC8gMzEpIHwgMF0gfD0gKDEgPDwgKGkgJSAzMSkpO1xufVxuZnVuY3Rpb24gaW5pdChjb21wb25lbnQsIG9wdGlvbnMsIGluc3RhbmNlLCBjcmVhdGVfZnJhZ21lbnQsIG5vdF9lcXVhbCwgcHJvcHMsIGRpcnR5ID0gWy0xXSkge1xuICAgIGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBleHBvcnRzLmN1cnJlbnRfY29tcG9uZW50O1xuICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuICAgIGNvbnN0IHByb3BfdmFsdWVzID0gb3B0aW9ucy5wcm9wcyB8fCB7fTtcbiAgICBjb25zdCAkJCA9IGNvbXBvbmVudC4kJCA9IHtcbiAgICAgICAgZnJhZ21lbnQ6IG51bGwsXG4gICAgICAgIGN0eDogbnVsbCxcbiAgICAgICAgLy8gc3RhdGVcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHVwZGF0ZTogbm9vcCxcbiAgICAgICAgbm90X2VxdWFsLFxuICAgICAgICBib3VuZDogYmxhbmtfb2JqZWN0KCksXG4gICAgICAgIC8vIGxpZmVjeWNsZVxuICAgICAgICBvbl9tb3VudDogW10sXG4gICAgICAgIG9uX2Rlc3Ryb3k6IFtdLFxuICAgICAgICBiZWZvcmVfdXBkYXRlOiBbXSxcbiAgICAgICAgYWZ0ZXJfdXBkYXRlOiBbXSxcbiAgICAgICAgY29udGV4dDogbmV3IE1hcChwYXJlbnRfY29tcG9uZW50ID8gcGFyZW50X2NvbXBvbmVudC4kJC5jb250ZXh0IDogW10pLFxuICAgICAgICAvLyBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgY2FsbGJhY2tzOiBibGFua19vYmplY3QoKSxcbiAgICAgICAgZGlydHksXG4gICAgICAgIHNraXBfYm91bmQ6IGZhbHNlXG4gICAgfTtcbiAgICBsZXQgcmVhZHkgPSBmYWxzZTtcbiAgICAkJC5jdHggPSBpbnN0YW5jZVxuICAgICAgICA/IGluc3RhbmNlKGNvbXBvbmVudCwgcHJvcF92YWx1ZXMsIChpLCByZXQsIC4uLnJlc3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmVzdC5sZW5ndGggPyByZXN0WzBdIDogcmV0O1xuICAgICAgICAgICAgaWYgKCQkLmN0eCAmJiBub3RfZXF1YWwoJCQuY3R4W2ldLCAkJC5jdHhbaV0gPSB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoISQkLnNraXBfYm91bmQgJiYgJCQuYm91bmRbaV0pXG4gICAgICAgICAgICAgICAgICAgICQkLmJvdW5kW2ldKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVhZHkpXG4gICAgICAgICAgICAgICAgICAgIG1ha2VfZGlydHkoY29tcG9uZW50LCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH0pXG4gICAgICAgIDogW107XG4gICAgJCQudXBkYXRlKCk7XG4gICAgcmVhZHkgPSB0cnVlO1xuICAgIHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG4gICAgLy8gYGZhbHNlYCBhcyBhIHNwZWNpYWwgY2FzZSBvZiBubyBET00gY29tcG9uZW50XG4gICAgJCQuZnJhZ21lbnQgPSBjcmVhdGVfZnJhZ21lbnQgPyBjcmVhdGVfZnJhZ21lbnQoJCQuY3R4KSA6IGZhbHNlO1xuICAgIGlmIChvcHRpb25zLnRhcmdldCkge1xuICAgICAgICBpZiAob3B0aW9ucy5oeWRyYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlcyA9IGNoaWxkcmVuKG9wdGlvbnMudGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5sKG5vZGVzKTtcbiAgICAgICAgICAgIG5vZGVzLmZvckVhY2goZGV0YWNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW50cm8pXG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGNvbXBvbmVudC4kJC5mcmFnbWVudCk7XG4gICAgICAgIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIG9wdGlvbnMudGFyZ2V0LCBvcHRpb25zLmFuY2hvcik7XG4gICAgICAgIGZsdXNoKCk7XG4gICAgfVxuICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChwYXJlbnRfY29tcG9uZW50KTtcbn1cbmlmICh0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBleHBvcnRzLlN2ZWx0ZUVsZW1lbnQgPSBjbGFzcyBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy4kJC5zbG90dGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuJCQuc2xvdHRlZFtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ciwgX29sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpc1thdHRyXSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgICRkZXN0cm95KCkge1xuICAgICAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIFRPRE8gc2hvdWxkIHRoaXMgZGVsZWdhdGUgdG8gYWRkRXZlbnRMaXN0ZW5lcj9cbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgJHNldCgkJHByb3BzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy4kJHNldCAmJiAhaXNfZW1wdHkoJCRwcm9wcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRzZXQoJCRwcm9wcyk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBTdmVsdGUgY29tcG9uZW50cy4gVXNlZCB3aGVuIGRldj1mYWxzZS5cbiAqL1xuY2xhc3MgU3ZlbHRlQ29tcG9uZW50IHtcbiAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSBub29wO1xuICAgIH1cbiAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdIHx8ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSA9IFtdKSk7XG4gICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gY2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgJHNldCgkJHByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLiQkc2V0ICYmICFpc19lbXB0eSgkJHByb3BzKSkge1xuICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuJCRzZXQoJCRwcm9wcyk7XG4gICAgICAgICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hfZGV2KHR5cGUsIGRldGFpbCkge1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KHR5cGUsIE9iamVjdC5hc3NpZ24oeyB2ZXJzaW9uOiAnMy4zMS4yJyB9LCBkZXRhaWwpKSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfZGV2KHRhcmdldCwgbm9kZSkge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUgfSk7XG4gICAgYXBwZW5kKHRhcmdldCwgbm9kZSk7XG59XG5mdW5jdGlvbiBpbnNlcnRfZGV2KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSwgYW5jaG9yIH0pO1xuICAgIGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcik7XG59XG5mdW5jdGlvbiBkZXRhY2hfZGV2KG5vZGUpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZScsIHsgbm9kZSB9KTtcbiAgICBkZXRhY2gobm9kZSk7XG59XG5mdW5jdGlvbiBkZXRhY2hfYmV0d2Vlbl9kZXYoYmVmb3JlLCBhZnRlcikge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcgJiYgYmVmb3JlLm5leHRTaWJsaW5nICE9PSBhZnRlcikge1xuICAgICAgICBkZXRhY2hfZGV2KGJlZm9yZS5uZXh0U2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoX2JlZm9yZV9kZXYoYWZ0ZXIpIHtcbiAgICB3aGlsZSAoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2hfYWZ0ZXJfZGV2KGJlZm9yZSkge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgZGV0YWNoX2RldihiZWZvcmUubmV4dFNpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxpc3Rlbl9kZXYobm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMsIGhhc19wcmV2ZW50X2RlZmF1bHQsIGhhc19zdG9wX3Byb3BhZ2F0aW9uKSB7XG4gICAgY29uc3QgbW9kaWZpZXJzID0gb3B0aW9ucyA9PT0gdHJ1ZSA/IFsnY2FwdHVyZSddIDogb3B0aW9ucyA/IEFycmF5LmZyb20oT2JqZWN0LmtleXMob3B0aW9ucykpIDogW107XG4gICAgaWYgKGhhc19wcmV2ZW50X2RlZmF1bHQpXG4gICAgICAgIG1vZGlmaWVycy5wdXNoKCdwcmV2ZW50RGVmYXVsdCcpO1xuICAgIGlmIChoYXNfc3RvcF9wcm9wYWdhdGlvbilcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3N0b3BQcm9wYWdhdGlvbicpO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NQWRkRXZlbnRMaXN0ZW5lcicsIHsgbm9kZSwgZXZlbnQsIGhhbmRsZXIsIG1vZGlmaWVycyB9KTtcbiAgICBjb25zdCBkaXNwb3NlID0gbGlzdGVuKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZUV2ZW50TGlzdGVuZXInLCB7IG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBtb2RpZmllcnMgfSk7XG4gICAgICAgIGRpc3Bvc2UoKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cl9kZXYobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIGF0dHIobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NUmVtb3ZlQXR0cmlidXRlJywgeyBub2RlLCBhdHRyaWJ1dGUgfSk7XG4gICAgZWxzZVxuICAgICAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldEF0dHJpYnV0ZScsIHsgbm9kZSwgYXR0cmlidXRlLCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIHByb3BfZGV2KG5vZGUsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIG5vZGVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXRQcm9wZXJ0eScsIHsgbm9kZSwgcHJvcGVydHksIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gZGF0YXNldF9kZXYobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgbm9kZS5kYXRhc2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0RGF0YXNldCcsIHsgbm9kZSwgcHJvcGVydHksIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gc2V0X2RhdGFfZGV2KHRleHQsIGRhdGEpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICAgIGlmICh0ZXh0Lndob2xlVGV4dCA9PT0gZGF0YSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0RGF0YScsIHsgbm9kZTogdGV4dCwgZGF0YSB9KTtcbiAgICB0ZXh0LmRhdGEgPSBkYXRhO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfZWFjaF9hcmd1bWVudChhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ3N0cmluZycgJiYgIShhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gYXJnKSkge1xuICAgICAgICBsZXQgbXNnID0gJ3sjZWFjaH0gb25seSBpdGVyYXRlcyBvdmVyIGFycmF5LWxpa2Ugb2JqZWN0cy4nO1xuICAgICAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBhcmcgJiYgU3ltYm9sLml0ZXJhdG9yIGluIGFyZykge1xuICAgICAgICAgICAgbXNnICs9ICcgWW91IGNhbiB1c2UgYSBzcHJlYWQgdG8gY29udmVydCB0aGlzIGl0ZXJhYmxlIGludG8gYW4gYXJyYXkuJztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9zbG90cyhuYW1lLCBzbG90LCBrZXlzKSB7XG4gICAgZm9yIChjb25zdCBzbG90X2tleSBvZiBPYmplY3Qua2V5cyhzbG90KSkge1xuICAgICAgICBpZiAoIX5rZXlzLmluZGV4T2Yoc2xvdF9rZXkpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYDwke25hbWV9PiByZWNlaXZlZCBhbiB1bmV4cGVjdGVkIHNsb3QgXCIke3Nsb3Rfa2V5fVwiLmApO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBTdmVsdGUgY29tcG9uZW50cyB3aXRoIHNvbWUgbWlub3IgZGV2LWVuaGFuY2VtZW50cy4gVXNlZCB3aGVuIGRldj10cnVlLlxuICovXG5jbGFzcyBTdmVsdGVDb21wb25lbnREZXYgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICghb3B0aW9ucy50YXJnZXQgJiYgIW9wdGlvbnMuJCRpbmxpbmUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIndGFyZ2V0JyBpcyBhIHJlcXVpcmVkIG9wdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgc3VwZXIuJGRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy4kZGVzdHJveSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignQ29tcG9uZW50IHdhcyBhbHJlYWR5IGRlc3Ryb3llZCcpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgJGNhcHR1cmVfc3RhdGUoKSB7IH1cbiAgICAkaW5qZWN0X3N0YXRlKCkgeyB9XG59XG4vKipcbiAqIEJhc2UgY2xhc3MgdG8gY3JlYXRlIHN0cm9uZ2x5IHR5cGVkIFN2ZWx0ZSBjb21wb25lbnRzLlxuICogVGhpcyBvbmx5IGV4aXN0cyBmb3IgdHlwaW5nIHB1cnBvc2VzIGFuZCBzaG91bGQgYmUgdXNlZCBpbiBgLmQudHNgIGZpbGVzLlxuICpcbiAqICMjIyBFeGFtcGxlOlxuICpcbiAqIFlvdSBoYXZlIGNvbXBvbmVudCBsaWJyYXJ5IG9uIG5wbSBjYWxsZWQgYGNvbXBvbmVudC1saWJyYXJ5YCwgZnJvbSB3aGljaFxuICogeW91IGV4cG9ydCBhIGNvbXBvbmVudCBjYWxsZWQgYE15Q29tcG9uZW50YC4gRm9yIFN2ZWx0ZStUeXBlU2NyaXB0IHVzZXJzLFxuICogeW91IHdhbnQgdG8gcHJvdmlkZSB0eXBpbmdzLiBUaGVyZWZvcmUgeW91IGNyZWF0ZSBhIGBpbmRleC5kLnRzYDpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBTdmVsdGVDb21wb25lbnRUeXBlZCB9IGZyb20gXCJzdmVsdGVcIjtcbiAqIGV4cG9ydCBjbGFzcyBNeUNvbXBvbmVudCBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudFR5cGVkPHtmb286IHN0cmluZ30+IHt9XG4gKiBgYGBcbiAqIFR5cGluZyB0aGlzIG1ha2VzIGl0IHBvc3NpYmxlIGZvciBJREVzIGxpa2UgVlMgQ29kZSB3aXRoIHRoZSBTdmVsdGUgZXh0ZW5zaW9uXG4gKiB0byBwcm92aWRlIGludGVsbGlzZW5zZSBhbmQgdG8gdXNlIHRoZSBjb21wb25lbnQgbGlrZSB0aGlzIGluIGEgU3ZlbHRlIGZpbGVcbiAqIHdpdGggVHlwZVNjcmlwdDpcbiAqIGBgYHN2ZWx0ZVxuICogPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAqIFx0aW1wb3J0IHsgTXlDb21wb25lbnQgfSBmcm9tIFwiY29tcG9uZW50LWxpYnJhcnlcIjtcbiAqIDwvc2NyaXB0PlxuICogPE15Q29tcG9uZW50IGZvbz17J2Jhcid9IC8+XG4gKiBgYGBcbiAqXG4gKiAjIyMjIFdoeSBub3QgbWFrZSB0aGlzIHBhcnQgb2YgYFN2ZWx0ZUNvbXBvbmVudChEZXYpYD9cbiAqIEJlY2F1c2VcbiAqIGBgYHRzXG4gKiBjbGFzcyBBU3ViY2xhc3NPZlN2ZWx0ZUNvbXBvbmVudCBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudDx7Zm9vOiBzdHJpbmd9PiB7fVxuICogY29uc3QgY29tcG9uZW50OiB0eXBlb2YgU3ZlbHRlQ29tcG9uZW50ID0gQVN1YmNsYXNzT2ZTdmVsdGVDb21wb25lbnQ7XG4gKiBgYGBcbiAqIHdpbGwgdGhyb3cgYSB0eXBlIGVycm9yLCBzbyB3ZSBuZWVkIHRvIHNlcGVyYXRlIHRoZSBtb3JlIHN0cmljdGx5IHR5cGVkIGNsYXNzLlxuICovXG5jbGFzcyBTdmVsdGVDb21wb25lbnRUeXBlZCBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudERldiB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICB9XG59XG5mdW5jdGlvbiBsb29wX2d1YXJkKHRpbWVvdXQpIHtcbiAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKERhdGUubm93KCkgLSBzdGFydCA+IHRpbWVvdXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5maW5pdGUgbG9vcCBkZXRlY3RlZCcpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZXhwb3J0cy5IdG1sVGFnID0gSHRtbFRhZztcbmV4cG9ydHMuU3ZlbHRlQ29tcG9uZW50ID0gU3ZlbHRlQ29tcG9uZW50O1xuZXhwb3J0cy5TdmVsdGVDb21wb25lbnREZXYgPSBTdmVsdGVDb21wb25lbnREZXY7XG5leHBvcnRzLlN2ZWx0ZUNvbXBvbmVudFR5cGVkID0gU3ZlbHRlQ29tcG9uZW50VHlwZWQ7XG5leHBvcnRzLmFjdGlvbl9kZXN0cm95ZXIgPSBhY3Rpb25fZGVzdHJveWVyO1xuZXhwb3J0cy5hZGRfYXR0cmlidXRlID0gYWRkX2F0dHJpYnV0ZTtcbmV4cG9ydHMuYWRkX2NsYXNzZXMgPSBhZGRfY2xhc3NlcztcbmV4cG9ydHMuYWRkX2ZsdXNoX2NhbGxiYWNrID0gYWRkX2ZsdXNoX2NhbGxiYWNrO1xuZXhwb3J0cy5hZGRfbG9jYXRpb24gPSBhZGRfbG9jYXRpb247XG5leHBvcnRzLmFkZF9yZW5kZXJfY2FsbGJhY2sgPSBhZGRfcmVuZGVyX2NhbGxiYWNrO1xuZXhwb3J0cy5hZGRfcmVzaXplX2xpc3RlbmVyID0gYWRkX3Jlc2l6ZV9saXN0ZW5lcjtcbmV4cG9ydHMuYWRkX3RyYW5zZm9ybSA9IGFkZF90cmFuc2Zvcm07XG5leHBvcnRzLmFmdGVyVXBkYXRlID0gYWZ0ZXJVcGRhdGU7XG5leHBvcnRzLmFwcGVuZCA9IGFwcGVuZDtcbmV4cG9ydHMuYXBwZW5kX2RldiA9IGFwcGVuZF9kZXY7XG5leHBvcnRzLmFzc2lnbiA9IGFzc2lnbjtcbmV4cG9ydHMuYXR0ciA9IGF0dHI7XG5leHBvcnRzLmF0dHJfZGV2ID0gYXR0cl9kZXY7XG5leHBvcnRzLmF0dHJpYnV0ZV90b19vYmplY3QgPSBhdHRyaWJ1dGVfdG9fb2JqZWN0O1xuZXhwb3J0cy5iZWZvcmVVcGRhdGUgPSBiZWZvcmVVcGRhdGU7XG5leHBvcnRzLmJpbmQgPSBiaW5kO1xuZXhwb3J0cy5iaW5kaW5nX2NhbGxiYWNrcyA9IGJpbmRpbmdfY2FsbGJhY2tzO1xuZXhwb3J0cy5ibGFua19vYmplY3QgPSBibGFua19vYmplY3Q7XG5leHBvcnRzLmJ1YmJsZSA9IGJ1YmJsZTtcbmV4cG9ydHMuY2hlY2tfb3V0cm9zID0gY2hlY2tfb3V0cm9zO1xuZXhwb3J0cy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuZXhwb3J0cy5jbGFpbV9jb21wb25lbnQgPSBjbGFpbV9jb21wb25lbnQ7XG5leHBvcnRzLmNsYWltX2VsZW1lbnQgPSBjbGFpbV9lbGVtZW50O1xuZXhwb3J0cy5jbGFpbV9zcGFjZSA9IGNsYWltX3NwYWNlO1xuZXhwb3J0cy5jbGFpbV90ZXh0ID0gY2xhaW1fdGV4dDtcbmV4cG9ydHMuY2xlYXJfbG9vcHMgPSBjbGVhcl9sb29wcztcbmV4cG9ydHMuY29tcG9uZW50X3N1YnNjcmliZSA9IGNvbXBvbmVudF9zdWJzY3JpYmU7XG5leHBvcnRzLmNvbXB1dGVfcmVzdF9wcm9wcyA9IGNvbXB1dGVfcmVzdF9wcm9wcztcbmV4cG9ydHMuY29tcHV0ZV9zbG90cyA9IGNvbXB1dGVfc2xvdHM7XG5leHBvcnRzLmNyZWF0ZUV2ZW50RGlzcGF0Y2hlciA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcjtcbmV4cG9ydHMuY3JlYXRlX2FuaW1hdGlvbiA9IGNyZWF0ZV9hbmltYXRpb247XG5leHBvcnRzLmNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24gPSBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uO1xuZXhwb3J0cy5jcmVhdGVfY29tcG9uZW50ID0gY3JlYXRlX2NvbXBvbmVudDtcbmV4cG9ydHMuY3JlYXRlX2luX3RyYW5zaXRpb24gPSBjcmVhdGVfaW5fdHJhbnNpdGlvbjtcbmV4cG9ydHMuY3JlYXRlX291dF90cmFuc2l0aW9uID0gY3JlYXRlX291dF90cmFuc2l0aW9uO1xuZXhwb3J0cy5jcmVhdGVfc2xvdCA9IGNyZWF0ZV9zbG90O1xuZXhwb3J0cy5jcmVhdGVfc3NyX2NvbXBvbmVudCA9IGNyZWF0ZV9zc3JfY29tcG9uZW50O1xuZXhwb3J0cy5jdXN0b21fZXZlbnQgPSBjdXN0b21fZXZlbnQ7XG5leHBvcnRzLmRhdGFzZXRfZGV2ID0gZGF0YXNldF9kZXY7XG5leHBvcnRzLmRlYnVnID0gZGVidWc7XG5leHBvcnRzLmRlc3Ryb3lfYmxvY2sgPSBkZXN0cm95X2Jsb2NrO1xuZXhwb3J0cy5kZXN0cm95X2NvbXBvbmVudCA9IGRlc3Ryb3lfY29tcG9uZW50O1xuZXhwb3J0cy5kZXN0cm95X2VhY2ggPSBkZXN0cm95X2VhY2g7XG5leHBvcnRzLmRldGFjaCA9IGRldGFjaDtcbmV4cG9ydHMuZGV0YWNoX2FmdGVyX2RldiA9IGRldGFjaF9hZnRlcl9kZXY7XG5leHBvcnRzLmRldGFjaF9iZWZvcmVfZGV2ID0gZGV0YWNoX2JlZm9yZV9kZXY7XG5leHBvcnRzLmRldGFjaF9iZXR3ZWVuX2RldiA9IGRldGFjaF9iZXR3ZWVuX2RldjtcbmV4cG9ydHMuZGV0YWNoX2RldiA9IGRldGFjaF9kZXY7XG5leHBvcnRzLmRpcnR5X2NvbXBvbmVudHMgPSBkaXJ0eV9jb21wb25lbnRzO1xuZXhwb3J0cy5kaXNwYXRjaF9kZXYgPSBkaXNwYXRjaF9kZXY7XG5leHBvcnRzLmVhY2ggPSBlYWNoO1xuZXhwb3J0cy5lbGVtZW50ID0gZWxlbWVudDtcbmV4cG9ydHMuZWxlbWVudF9pcyA9IGVsZW1lbnRfaXM7XG5leHBvcnRzLmVtcHR5ID0gZW1wdHk7XG5leHBvcnRzLmVzY2FwZSA9IGVzY2FwZTtcbmV4cG9ydHMuZXNjYXBlZCA9IGVzY2FwZWQ7XG5leHBvcnRzLmV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMgPSBleGNsdWRlX2ludGVybmFsX3Byb3BzO1xuZXhwb3J0cy5maXhfYW5kX2Rlc3Ryb3lfYmxvY2sgPSBmaXhfYW5kX2Rlc3Ryb3lfYmxvY2s7XG5leHBvcnRzLmZpeF9hbmRfb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2sgPSBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrO1xuZXhwb3J0cy5maXhfcG9zaXRpb24gPSBmaXhfcG9zaXRpb247XG5leHBvcnRzLmZsdXNoID0gZmx1c2g7XG5leHBvcnRzLmdldENvbnRleHQgPSBnZXRDb250ZXh0O1xuZXhwb3J0cy5nZXRfYmluZGluZ19ncm91cF92YWx1ZSA9IGdldF9iaW5kaW5nX2dyb3VwX3ZhbHVlO1xuZXhwb3J0cy5nZXRfY3VycmVudF9jb21wb25lbnQgPSBnZXRfY3VycmVudF9jb21wb25lbnQ7XG5leHBvcnRzLmdldF9jdXN0b21fZWxlbWVudHNfc2xvdHMgPSBnZXRfY3VzdG9tX2VsZW1lbnRzX3Nsb3RzO1xuZXhwb3J0cy5nZXRfc2xvdF9jaGFuZ2VzID0gZ2V0X3Nsb3RfY2hhbmdlcztcbmV4cG9ydHMuZ2V0X3Nsb3RfY29udGV4dCA9IGdldF9zbG90X2NvbnRleHQ7XG5leHBvcnRzLmdldF9zcHJlYWRfb2JqZWN0ID0gZ2V0X3NwcmVhZF9vYmplY3Q7XG5leHBvcnRzLmdldF9zcHJlYWRfdXBkYXRlID0gZ2V0X3NwcmVhZF91cGRhdGU7XG5leHBvcnRzLmdldF9zdG9yZV92YWx1ZSA9IGdldF9zdG9yZV92YWx1ZTtcbmV4cG9ydHMuZ2xvYmFscyA9IGdsb2JhbHM7XG5leHBvcnRzLmdyb3VwX291dHJvcyA9IGdyb3VwX291dHJvcztcbmV4cG9ydHMuaGFuZGxlX3Byb21pc2UgPSBoYW5kbGVfcHJvbWlzZTtcbmV4cG9ydHMuaGFzQ29udGV4dCA9IGhhc0NvbnRleHQ7XG5leHBvcnRzLmhhc19wcm9wID0gaGFzX3Byb3A7XG5leHBvcnRzLmlkZW50aXR5ID0gaWRlbnRpdHk7XG5leHBvcnRzLmluaXQgPSBpbml0O1xuZXhwb3J0cy5pbnNlcnQgPSBpbnNlcnQ7XG5leHBvcnRzLmluc2VydF9kZXYgPSBpbnNlcnRfZGV2O1xuZXhwb3J0cy5pbnRyb3MgPSBpbnRyb3M7XG5leHBvcnRzLmludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyID0gaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXI7XG5leHBvcnRzLmlzX2NsaWVudCA9IGlzX2NsaWVudDtcbmV4cG9ydHMuaXNfY3Jvc3NvcmlnaW4gPSBpc19jcm9zc29yaWdpbjtcbmV4cG9ydHMuaXNfZW1wdHkgPSBpc19lbXB0eTtcbmV4cG9ydHMuaXNfZnVuY3Rpb24gPSBpc19mdW5jdGlvbjtcbmV4cG9ydHMuaXNfcHJvbWlzZSA9IGlzX3Byb21pc2U7XG5leHBvcnRzLmxpc3RlbiA9IGxpc3RlbjtcbmV4cG9ydHMubGlzdGVuX2RldiA9IGxpc3Rlbl9kZXY7XG5leHBvcnRzLmxvb3AgPSBsb29wO1xuZXhwb3J0cy5sb29wX2d1YXJkID0gbG9vcF9ndWFyZDtcbmV4cG9ydHMubWlzc2luZ19jb21wb25lbnQgPSBtaXNzaW5nX2NvbXBvbmVudDtcbmV4cG9ydHMubW91bnRfY29tcG9uZW50ID0gbW91bnRfY29tcG9uZW50O1xuZXhwb3J0cy5ub29wID0gbm9vcDtcbmV4cG9ydHMubm90X2VxdWFsID0gbm90X2VxdWFsO1xuZXhwb3J0cy5udWxsX3RvX2VtcHR5ID0gbnVsbF90b19lbXB0eTtcbmV4cG9ydHMub2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcyA9IG9iamVjdF93aXRob3V0X3Byb3BlcnRpZXM7XG5leHBvcnRzLm9uRGVzdHJveSA9IG9uRGVzdHJveTtcbmV4cG9ydHMub25Nb3VudCA9IG9uTW91bnQ7XG5leHBvcnRzLm9uY2UgPSBvbmNlO1xuZXhwb3J0cy5vdXRyb19hbmRfZGVzdHJveV9ibG9jayA9IG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrO1xuZXhwb3J0cy5wcmV2ZW50X2RlZmF1bHQgPSBwcmV2ZW50X2RlZmF1bHQ7XG5leHBvcnRzLnByb3BfZGV2ID0gcHJvcF9kZXY7XG5leHBvcnRzLnF1ZXJ5X3NlbGVjdG9yX2FsbCA9IHF1ZXJ5X3NlbGVjdG9yX2FsbDtcbmV4cG9ydHMucnVuID0gcnVuO1xuZXhwb3J0cy5ydW5fYWxsID0gcnVuX2FsbDtcbmV4cG9ydHMuc2FmZV9ub3RfZXF1YWwgPSBzYWZlX25vdF9lcXVhbDtcbmV4cG9ydHMuc2NoZWR1bGVfdXBkYXRlID0gc2NoZWR1bGVfdXBkYXRlO1xuZXhwb3J0cy5zZWxlY3RfbXVsdGlwbGVfdmFsdWUgPSBzZWxlY3RfbXVsdGlwbGVfdmFsdWU7XG5leHBvcnRzLnNlbGVjdF9vcHRpb24gPSBzZWxlY3Rfb3B0aW9uO1xuZXhwb3J0cy5zZWxlY3Rfb3B0aW9ucyA9IHNlbGVjdF9vcHRpb25zO1xuZXhwb3J0cy5zZWxlY3RfdmFsdWUgPSBzZWxlY3RfdmFsdWU7XG5leHBvcnRzLnNlbGYgPSBzZWxmO1xuZXhwb3J0cy5zZXRDb250ZXh0ID0gc2V0Q29udGV4dDtcbmV4cG9ydHMuc2V0X2F0dHJpYnV0ZXMgPSBzZXRfYXR0cmlidXRlcztcbmV4cG9ydHMuc2V0X2N1cnJlbnRfY29tcG9uZW50ID0gc2V0X2N1cnJlbnRfY29tcG9uZW50O1xuZXhwb3J0cy5zZXRfY3VzdG9tX2VsZW1lbnRfZGF0YSA9IHNldF9jdXN0b21fZWxlbWVudF9kYXRhO1xuZXhwb3J0cy5zZXRfZGF0YSA9IHNldF9kYXRhO1xuZXhwb3J0cy5zZXRfZGF0YV9kZXYgPSBzZXRfZGF0YV9kZXY7XG5leHBvcnRzLnNldF9pbnB1dF90eXBlID0gc2V0X2lucHV0X3R5cGU7XG5leHBvcnRzLnNldF9pbnB1dF92YWx1ZSA9IHNldF9pbnB1dF92YWx1ZTtcbmV4cG9ydHMuc2V0X25vdyA9IHNldF9ub3c7XG5leHBvcnRzLnNldF9yYWYgPSBzZXRfcmFmO1xuZXhwb3J0cy5zZXRfc3RvcmVfdmFsdWUgPSBzZXRfc3RvcmVfdmFsdWU7XG5leHBvcnRzLnNldF9zdHlsZSA9IHNldF9zdHlsZTtcbmV4cG9ydHMuc2V0X3N2Z19hdHRyaWJ1dGVzID0gc2V0X3N2Z19hdHRyaWJ1dGVzO1xuZXhwb3J0cy5zcGFjZSA9IHNwYWNlO1xuZXhwb3J0cy5zcHJlYWQgPSBzcHJlYWQ7XG5leHBvcnRzLnN0b3BfcHJvcGFnYXRpb24gPSBzdG9wX3Byb3BhZ2F0aW9uO1xuZXhwb3J0cy5zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG5leHBvcnRzLnN2Z19lbGVtZW50ID0gc3ZnX2VsZW1lbnQ7XG5leHBvcnRzLnRleHQgPSB0ZXh0O1xuZXhwb3J0cy50aWNrID0gdGljaztcbmV4cG9ydHMudGltZV9yYW5nZXNfdG9fYXJyYXkgPSB0aW1lX3Jhbmdlc190b19hcnJheTtcbmV4cG9ydHMudG9fbnVtYmVyID0gdG9fbnVtYmVyO1xuZXhwb3J0cy50b2dnbGVfY2xhc3MgPSB0b2dnbGVfY2xhc3M7XG5leHBvcnRzLnRyYW5zaXRpb25faW4gPSB0cmFuc2l0aW9uX2luO1xuZXhwb3J0cy50cmFuc2l0aW9uX291dCA9IHRyYW5zaXRpb25fb3V0O1xuZXhwb3J0cy51cGRhdGVfa2V5ZWRfZWFjaCA9IHVwZGF0ZV9rZXllZF9lYWNoO1xuZXhwb3J0cy51cGRhdGVfc2xvdCA9IHVwZGF0ZV9zbG90O1xuZXhwb3J0cy51cGRhdGVfc2xvdF9zcHJlYWQgPSB1cGRhdGVfc2xvdF9zcHJlYWQ7XG5leHBvcnRzLnZhbGlkYXRlX2NvbXBvbmVudCA9IHZhbGlkYXRlX2NvbXBvbmVudDtcbmV4cG9ydHMudmFsaWRhdGVfZWFjaF9hcmd1bWVudCA9IHZhbGlkYXRlX2VhY2hfYXJndW1lbnQ7XG5leHBvcnRzLnZhbGlkYXRlX2VhY2hfa2V5cyA9IHZhbGlkYXRlX2VhY2hfa2V5cztcbmV4cG9ydHMudmFsaWRhdGVfc2xvdHMgPSB2YWxpZGF0ZV9zbG90cztcbmV4cG9ydHMudmFsaWRhdGVfc3RvcmUgPSB2YWxpZGF0ZV9zdG9yZTtcbmV4cG9ydHMueGxpbmtfYXR0ciA9IHhsaW5rX2F0dHI7XG4iLCJcInVzZSBzdHJpY3RcIjtjb25zdHtTdmVsdGVDb21wb25lbnQ6U3ZlbHRlQ29tcG9uZW50LGF0dHI6YXR0cixiaW5kaW5nX2NhbGxiYWNrczpiaW5kaW5nX2NhbGxiYWNrcyxkZXRhY2g6ZGV0YWNoLGVsZW1lbnQ6ZWxlbWVudCxpbml0OmluaXQsaW5zZXJ0Omluc2VydCxub29wOm5vb3Asc2FmZV9ub3RfZXF1YWw6c2FmZV9ub3RfZXF1YWx9PV8kaW50ZXJuYWxfMjtmdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQoY3R4KXtsZXQgZGl2O3JldHVybntjKCl7ZGl2PWVsZW1lbnQoXCJkaXZcIiksYXR0cihkaXYsXCJjbGFzc1wiLGN0eFswXSl9LG0odGFyZ2V0LGFuY2hvcil7aW5zZXJ0KHRhcmdldCxkaXYsYW5jaG9yKSxkaXYuaW5uZXJIVE1MPWN0eFsxXSxjdHhbM10oZGl2KX0scChjdHgsW2RpcnR5XSl7MiZkaXJ0eSYmKGRpdi5pbm5lckhUTUw9Y3R4WzFdKSwxJmRpcnR5JiZhdHRyKGRpdixcImNsYXNzXCIsY3R4WzBdKX0saTpub29wLG86bm9vcCxkKGRldGFjaGluZyl7ZGV0YWNoaW5nJiZkZXRhY2goZGl2KSxjdHhbM10obnVsbCl9fX1mdW5jdGlvbiBpbnN0YW5jZSgkJHNlbGYsJCRwcm9wcywkJGludmFsaWRhdGUpe2xldCByZWYse2NsYXNzZXM6Y2xhc3Nlcz1cIlwifT0kJHByb3BzLHtkYXRhOmRhdGE9XCJcIn09JCRwcm9wcyxldmFsZWQ9e307ZnVuY3Rpb24gdHJ5X2V2YWxfb25jZShzcmMpe2lmKHZvaWQgMD09PWV2YWxlZFtzcmNdKXtldmFsZWRbc3JjXT0hMDt0cnl7bmV3IEZ1bmN0aW9uKHNyYykoKX1jYXRjaChlKXtjb25zb2xlLmVycm9yKGUpfX19cmV0dXJuICQkc2VsZi4kJHNldD0oJCRwcm9wcz0+e1wiY2xhc3Nlc1wiaW4gJCRwcm9wcyYmJCRpbnZhbGlkYXRlKDAsY2xhc3Nlcz0kJHByb3BzLmNsYXNzZXMpLFwiZGF0YVwiaW4gJCRwcm9wcyYmJCRpbnZhbGlkYXRlKDEsZGF0YT0kJHByb3BzLmRhdGEpfSksJCRzZWxmLiQkLnVwZGF0ZT0oKCk9PntpZig0JiQkc2VsZi4kJC5kaXJ0eSYmcmVmKXtjb25zdCBzY3JpcHRzPXJlZi5xdWVyeVNlbGVjdG9yQWxsKFwic2NyaXB0XCIpO2ZvcihsZXQgaT0wO2k8c2NyaXB0cy5sZW5ndGg7aSsrKXtjb25zdCBlbD1zY3JpcHRzW2ldO1wiYXBwbGljYXRpb24vamF2YXNjcmlwdFwiIT09ZWwuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSYmbnVsbCE9PWVsLmdldEF0dHJpYnV0ZShcInR5cGVcIil8fHRyeV9ldmFsX29uY2UoZWwuaW5uZXJIVE1MKX19fSksW2NsYXNzZXMsZGF0YSxyZWYsZnVuY3Rpb24oJCR2YWx1ZSl7YmluZGluZ19jYWxsYmFja3NbJCR2YWx1ZT9cInVuc2hpZnRcIjpcInB1c2hcIl0oKCk9PnskJGludmFsaWRhdGUoMixyZWY9JCR2YWx1ZSl9KX1dfXZhciBfJEhUTUxfMT1jbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudHtjb25zdHJ1Y3RvcihvcHRpb25zKXtzdXBlcigpLGluaXQodGhpcyxvcHRpb25zLGluc3RhbmNlLGNyZWF0ZV9mcmFnbWVudCxzYWZlX25vdF9lcXVhbCx7Y2xhc3NlczowLGRhdGE6MX0pfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklraFVUVXd1YzNabGJIUmxJbDBzSW01aGJXVnpJanBiSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSjNkME5CTkVaQlFTeFpRVUZCUXl4RFFVRkJRU3hqUVVGQlFTeGxRVUZCUVN4RFFVRkJRU3hYUVVGQlFTeERRVUZCUVN4UFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4TFFVRkJRU3hGUVVGQlFTeERRVUZCUVN4SlFVRkJRU3hEUVVGQlFTeEpRVUZCUVN4RFFVRkJRU3hQUVVGQlFTeERRVUZCUVN4UlFVRkJRU3hEUVVGQlFTeGxRVUZCUVN4RFFVRkJRU3hqUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hQUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeEpRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4RFFVRkJRU0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiYm5Wc2JGMTkiLCJcInVzZSBzdHJpY3RcIjtjb25zdHtTdmVsdGVDb21wb25lbnQ6X19TdmVsdGVDb21wb25lbnRfMyxhcHBlbmQ6YXBwZW5kLGF0dHI6X19hdHRyXzMsY2hlY2tfb3V0cm9zOmNoZWNrX291dHJvcyxjcmVhdGVfY29tcG9uZW50OmNyZWF0ZV9jb21wb25lbnQsZGVzdHJveV9jb21wb25lbnQ6ZGVzdHJveV9jb21wb25lbnQsZGVzdHJveV9lYWNoOmRlc3Ryb3lfZWFjaCxkZXRhY2g6X19kZXRhY2hfMyxlbGVtZW50Ol9fZWxlbWVudF8zLGVtcHR5OmVtcHR5LGdyb3VwX291dHJvczpncm91cF9vdXRyb3MsaW5pdDpfX2luaXRfMyxpbnNlcnQ6X19pbnNlcnRfMyxsaXN0ZW46bGlzdGVuLG1vdW50X2NvbXBvbmVudDptb3VudF9jb21wb25lbnQsb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2s6b3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2ssc2FmZV9ub3RfZXF1YWw6X19zYWZlX25vdF9lcXVhbF8zLHNldF9kYXRhOnNldF9kYXRhLHNwYWNlOnNwYWNlLHRleHQ6dGV4dCx0cmFuc2l0aW9uX2luOnRyYW5zaXRpb25faW4sdHJhbnNpdGlvbl9vdXQ6dHJhbnNpdGlvbl9vdXQsdXBkYXRlX2tleWVkX2VhY2g6dXBkYXRlX2tleWVkX2VhY2h9PV8kaW50ZXJuYWxfMjtmdW5jdGlvbiBnZXRfZWFjaF9jb250ZXh0KGN0eCxsaXN0LGkpe2NvbnN0IGNoaWxkX2N0eD1jdHguc2xpY2UoKTtyZXR1cm4gY2hpbGRfY3R4WzJdPWxpc3RbaV0sY2hpbGRfY3R4fWZ1bmN0aW9uIGdldF9lYWNoX2NvbnRleHRfMShjdHgsbGlzdCxpKXtjb25zdCBjaGlsZF9jdHg9Y3R4LnNsaWNlKCk7cmV0dXJuIGNoaWxkX2N0eFs1XT1saXN0W2ldLGNoaWxkX2N0eH1mdW5jdGlvbiBnZXRfZWFjaF9jb250ZXh0XzIoY3R4LGxpc3QsaSl7Y29uc3QgY2hpbGRfY3R4PWN0eC5zbGljZSgpO3JldHVybiBjaGlsZF9jdHhbMl09bGlzdFtpXSxjaGlsZF9jdHh9ZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrKGN0eCl7bGV0IHN1cCxpLHN1cF90aXRsZV92YWx1ZSx0O3JldHVybntjKCl7c3VwPV9fZWxlbWVudF8zKFwic3VwXCIpLGk9X19lbGVtZW50XzMoXCJpXCIpLHQ9c3BhY2UoKSxfX2F0dHJfMyhpLFwiY2xhc3NcIixcImZhciBmYS1xdWVzdGlvbi1jaXJjbGVcIiksX19hdHRyXzMoc3VwLFwiZGF0YS10b2dnbGVcIixcInRvb2x0aXBcIiksX19hdHRyXzMoc3VwLFwidGl0bGVcIixzdXBfdGl0bGVfdmFsdWU9Y3R4WzBdLmRlc2NyaXB0aW9uKX0sbSh0YXJnZXQsYW5jaG9yKXtfX2luc2VydF8zKHRhcmdldCxzdXAsYW5jaG9yKSxhcHBlbmQoc3VwLGkpLF9faW5zZXJ0XzModGFyZ2V0LHQsYW5jaG9yKX0scChjdHgsZGlydHkpezEmZGlydHkmJnN1cF90aXRsZV92YWx1ZSE9PShzdXBfdGl0bGVfdmFsdWU9Y3R4WzBdLmRlc2NyaXB0aW9uKSYmX19hdHRyXzMoc3VwLFwidGl0bGVcIixzdXBfdGl0bGVfdmFsdWUpfSxkKGRldGFjaGluZyl7ZGV0YWNoaW5nJiZfX2RldGFjaF8zKHN1cCksZGV0YWNoaW5nJiZfX2RldGFjaF8zKHQpfX19ZnVuY3Rpb24gY3JlYXRlX2VhY2hfYmxvY2tfMihjdHgpe2xldCBhLHQwLHQxLGFfY2xhc3NfdmFsdWUsYV9hcmlhX2NvbnRyb2xzX3ZhbHVlLG1vdW50ZWQsZGlzcG9zZSx0MF92YWx1ZT1jdHhbMl0rXCJcIjtmdW5jdGlvbiBjbGlja19oYW5kbGVyKCl7cmV0dXJuIGN0eFsxXShjdHhbMl0pfXJldHVybntjKCl7YT1fX2VsZW1lbnRfMyhcImFcIiksdDA9dGV4dCh0MF92YWx1ZSksdDE9c3BhY2UoKSxfX2F0dHJfMyhhLFwiaHJlZlwiLFwiamF2YXNjcmlwdDpcIiksX19hdHRyXzMoYSxcImNsYXNzXCIsYV9jbGFzc192YWx1ZT1cIm5hdi1saW5rXCIrKGN0eFswXS52YWx1ZT09Y3R4WzJdP1wiIGFjdGl2ZVwiOlwiXCIpKSxfX2F0dHJfMyhhLFwiYXJpYS1jb250cm9sc1wiLGFfYXJpYV9jb250cm9sc192YWx1ZT1cInRhYi1jb250ZW50LVwiK2N0eFswXS5uYW1lK1wiLVwiK2N0eFsyXSksX19hdHRyXzMoYSxcImRhdGEtdG9nZ2xlXCIsXCJ0YWJcIiksX19hdHRyXzMoYSxcInJvbGVcIixcInRhYlwiKX0sbSh0YXJnZXQsYW5jaG9yKXtfX2luc2VydF8zKHRhcmdldCxhLGFuY2hvciksYXBwZW5kKGEsdDApLGFwcGVuZChhLHQxKSxtb3VudGVkfHwoZGlzcG9zZT1saXN0ZW4oYSxcImNsaWNrXCIsY2xpY2tfaGFuZGxlciksbW91bnRlZD0hMCl9LHAobmV3X2N0eCxkaXJ0eSl7Y3R4PW5ld19jdHgsMSZkaXJ0eSYmdDBfdmFsdWUhPT0odDBfdmFsdWU9Y3R4WzJdK1wiXCIpJiZzZXRfZGF0YSh0MCx0MF92YWx1ZSksMSZkaXJ0eSYmYV9jbGFzc192YWx1ZSE9PShhX2NsYXNzX3ZhbHVlPVwibmF2LWxpbmtcIisoY3R4WzBdLnZhbHVlPT1jdHhbMl0/XCIgYWN0aXZlXCI6XCJcIikpJiZfX2F0dHJfMyhhLFwiY2xhc3NcIixhX2NsYXNzX3ZhbHVlKSwxJmRpcnR5JiZhX2FyaWFfY29udHJvbHNfdmFsdWUhPT0oYV9hcmlhX2NvbnRyb2xzX3ZhbHVlPVwidGFiLWNvbnRlbnQtXCIrY3R4WzBdLm5hbWUrXCItXCIrY3R4WzJdKSYmX19hdHRyXzMoYSxcImFyaWEtY29udHJvbHNcIixhX2FyaWFfY29udHJvbHNfdmFsdWUpfSxkKGRldGFjaGluZyl7ZGV0YWNoaW5nJiZfX2RldGFjaF8zKGEpLG1vdW50ZWQ9ITEsZGlzcG9zZSgpfX19ZnVuY3Rpb24gY3JlYXRlX2VhY2hfYmxvY2tfMShrZXlfMSxjdHgpe2xldCBmaXJzdCxodG1sLGN1cnJlbnQ7cmV0dXJuIGh0bWw9bmV3IF8kSFRNTF8xKHtwcm9wczp7ZGF0YTpjdHhbMF0uZmllbGRfcmVuZGVyc1tjdHhbNV0uYXJncy5uYW1lXX19KSx7a2V5OmtleV8xLGZpcnN0Om51bGwsYygpe2ZpcnN0PWVtcHR5KCksY3JlYXRlX2NvbXBvbmVudChodG1sLiQkLmZyYWdtZW50KSx0aGlzLmZpcnN0PWZpcnN0fSxtKHRhcmdldCxhbmNob3Ipe19faW5zZXJ0XzModGFyZ2V0LGZpcnN0LGFuY2hvciksbW91bnRfY29tcG9uZW50KGh0bWwsdGFyZ2V0LGFuY2hvciksY3VycmVudD0hMH0scChuZXdfY3R4LGRpcnR5KXtjdHg9bmV3X2N0eDtjb25zdCBodG1sX2NoYW5nZXM9e307MSZkaXJ0eSYmKGh0bWxfY2hhbmdlcy5kYXRhPWN0eFswXS5maWVsZF9yZW5kZXJzW2N0eFs1XS5hcmdzLm5hbWVdKSxodG1sLiRzZXQoaHRtbF9jaGFuZ2VzKX0saShsb2NhbCl7Y3VycmVudHx8KHRyYW5zaXRpb25faW4oaHRtbC4kJC5mcmFnbWVudCxsb2NhbCksY3VycmVudD0hMCl9LG8obG9jYWwpe3RyYW5zaXRpb25fb3V0KGh0bWwuJCQuZnJhZ21lbnQsbG9jYWwpLGN1cnJlbnQ9ITF9LGQoZGV0YWNoaW5nKXtkZXRhY2hpbmcmJl9fZGV0YWNoXzMoZmlyc3QpLGRlc3Ryb3lfY29tcG9uZW50KGh0bWwsZGV0YWNoaW5nKX19fWZ1bmN0aW9uIGNyZWF0ZV9lYWNoX2Jsb2NrKGN0eCl7bGV0IGRpdix0LGRpdl9jbGFzc192YWx1ZSxjdXJyZW50LGVhY2hfYmxvY2tzPVtdLGVhY2hfMV9sb29rdXA9bmV3IE1hcCxlYWNoX3ZhbHVlXzE9Y3R4WzBdLmNob2ljZXNbY3R4WzJdXTtjb25zdCBnZXRfa2V5PWN0eD0+Y3R4WzVdLmFyZ3MubmFtZTtmb3IobGV0IGk9MDtpPGVhY2hfdmFsdWVfMS5sZW5ndGg7aSs9MSl7bGV0IGNoaWxkX2N0eD1nZXRfZWFjaF9jb250ZXh0XzEoY3R4LGVhY2hfdmFsdWVfMSxpKSxrZXk9Z2V0X2tleShjaGlsZF9jdHgpO2VhY2hfMV9sb29rdXAuc2V0KGtleSxlYWNoX2Jsb2Nrc1tpXT1jcmVhdGVfZWFjaF9ibG9ja18xKGtleSxjaGlsZF9jdHgpKX1yZXR1cm57Yygpe2Rpdj1fX2VsZW1lbnRfMyhcImRpdlwiKTtmb3IobGV0IGk9MDtpPGVhY2hfYmxvY2tzLmxlbmd0aDtpKz0xKWVhY2hfYmxvY2tzW2ldLmMoKTt0PXNwYWNlKCksX19hdHRyXzMoZGl2LFwiY2xhc3NcIixkaXZfY2xhc3NfdmFsdWU9XCJ0YWItcGFuZSBmYWRlXCIrKGN0eFswXS52YWx1ZT09Y3R4WzJdP1wiIHNob3cgYWN0aXZlXCI6XCJcIikpLF9fYXR0cl8zKGRpdixcInJvbGVcIixcInRhYnBhbmVsXCIpfSxtKHRhcmdldCxhbmNob3Ipe19faW5zZXJ0XzModGFyZ2V0LGRpdixhbmNob3IpO2ZvcihsZXQgaT0wO2k8ZWFjaF9ibG9ja3MubGVuZ3RoO2krPTEpZWFjaF9ibG9ja3NbaV0ubShkaXYsbnVsbCk7YXBwZW5kKGRpdix0KSxjdXJyZW50PSEwfSxwKGN0eCxkaXJ0eSl7MSZkaXJ0eSYmKGVhY2hfdmFsdWVfMT1jdHhbMF0uY2hvaWNlc1tjdHhbMl1dLGdyb3VwX291dHJvcygpLGVhY2hfYmxvY2tzPXVwZGF0ZV9rZXllZF9lYWNoKGVhY2hfYmxvY2tzLGRpcnR5LGdldF9rZXksMSxjdHgsZWFjaF92YWx1ZV8xLGVhY2hfMV9sb29rdXAsZGl2LG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrLGNyZWF0ZV9lYWNoX2Jsb2NrXzEsdCxnZXRfZWFjaF9jb250ZXh0XzEpLGNoZWNrX291dHJvcygpKSwoIWN1cnJlbnR8fDEmZGlydHkmJmRpdl9jbGFzc192YWx1ZSE9PShkaXZfY2xhc3NfdmFsdWU9XCJ0YWItcGFuZSBmYWRlXCIrKGN0eFswXS52YWx1ZT09Y3R4WzJdP1wiIHNob3cgYWN0aXZlXCI6XCJcIikpKSYmX19hdHRyXzMoZGl2LFwiY2xhc3NcIixkaXZfY2xhc3NfdmFsdWUpfSxpKGxvY2FsKXtpZighY3VycmVudCl7Zm9yKGxldCBpPTA7aTxlYWNoX3ZhbHVlXzEubGVuZ3RoO2krPTEpdHJhbnNpdGlvbl9pbihlYWNoX2Jsb2Nrc1tpXSk7Y3VycmVudD0hMH19LG8obG9jYWwpe2ZvcihsZXQgaT0wO2k8ZWFjaF9ibG9ja3MubGVuZ3RoO2krPTEpdHJhbnNpdGlvbl9vdXQoZWFjaF9ibG9ja3NbaV0pO2N1cnJlbnQ9ITF9LGQoZGV0YWNoaW5nKXtkZXRhY2hpbmcmJl9fZGV0YWNoXzMoZGl2KTtmb3IobGV0IGk9MDtpPGVhY2hfYmxvY2tzLmxlbmd0aDtpKz0xKWVhY2hfYmxvY2tzW2ldLmQoKX19fWZ1bmN0aW9uIF9fY3JlYXRlX2ZyYWdtZW50XzMoY3R4KXtsZXQgZGl2NSxkaXYwLHQwLHQxLHQyLHQzLGRpdjIsZGl2MSx0NCxkaXY0LGRpdjMsdDUsaW5wdXQsaW5wdXRfbmFtZV92YWx1ZSxpbnB1dF92YWx1ZV92YWx1ZSxjdXJyZW50LHQwX3ZhbHVlPWN0eFswXS5sYWJlbCtcIlwiLGlmX2Jsb2NrPWN0eFswXS5kZXNjcmlwdGlvbiYmY3JlYXRlX2lmX2Jsb2NrKGN0eCksZWFjaF92YWx1ZV8yPU9iamVjdC5rZXlzKGN0eFswXS5jaG9pY2VzKSxlYWNoX2Jsb2Nrc18xPVtdO2ZvcihsZXQgaT0wO2k8ZWFjaF92YWx1ZV8yLmxlbmd0aDtpKz0xKWVhY2hfYmxvY2tzXzFbaV09Y3JlYXRlX2VhY2hfYmxvY2tfMihnZXRfZWFjaF9jb250ZXh0XzIoY3R4LGVhY2hfdmFsdWVfMixpKSk7bGV0IGVhY2hfdmFsdWU9T2JqZWN0LmtleXMoY3R4WzBdLmNob2ljZXMpLGVhY2hfYmxvY2tzPVtdO2ZvcihsZXQgaT0wO2k8ZWFjaF92YWx1ZS5sZW5ndGg7aSs9MSllYWNoX2Jsb2Nrc1tpXT1jcmVhdGVfZWFjaF9ibG9jayhnZXRfZWFjaF9jb250ZXh0KGN0eCxlYWNoX3ZhbHVlLGkpKTtjb25zdCBvdXQ9aT0+dHJhbnNpdGlvbl9vdXQoZWFjaF9ibG9ja3NbaV0sMSwxLCgpPT57ZWFjaF9ibG9ja3NbaV09bnVsbH0pO3JldHVybntjKCl7ZGl2NT1fX2VsZW1lbnRfMyhcImRpdlwiKSxkaXYwPV9fZWxlbWVudF8zKFwiZGl2XCIpLHQwPXRleHQodDBfdmFsdWUpLHQxPXNwYWNlKCksaWZfYmxvY2smJmlmX2Jsb2NrLmMoKSx0Mj10ZXh0KFwiOlwiKSx0Mz1zcGFjZSgpLGRpdjI9X19lbGVtZW50XzMoXCJkaXZcIiksZGl2MT1fX2VsZW1lbnRfMyhcImRpdlwiKTtmb3IobGV0IGk9MDtpPGVhY2hfYmxvY2tzXzEubGVuZ3RoO2krPTEpZWFjaF9ibG9ja3NfMVtpXS5jKCk7dDQ9c3BhY2UoKSxkaXY0PV9fZWxlbWVudF8zKFwiZGl2XCIpLGRpdjM9X19lbGVtZW50XzMoXCJkaXZcIik7Zm9yKGxldCBpPTA7aTxlYWNoX2Jsb2Nrcy5sZW5ndGg7aSs9MSllYWNoX2Jsb2Nrc1tpXS5jKCk7dDU9c3BhY2UoKSxpbnB1dD1fX2VsZW1lbnRfMyhcImlucHV0XCIpLF9fYXR0cl8zKGRpdjAsXCJjbGFzc1wiLFwiY29sLWxnLTIgYm9sZCB0ZXh0LWxnLXJpZ2h0IG15LWF1dG9cIiksX19hdHRyXzMoZGl2MSxcImNsYXNzXCIsXCJuYXYgZmxleC1jb2x1bW4gbmF2LXBpbGxzIG5hdi1qdXN0aWZpZWRcIiksX19hdHRyXzMoZGl2MSxcImFyaWEtb3JpZW50YXRpb25cIixcInZlcnRpY2FsXCIpLF9fYXR0cl8zKGRpdjEsXCJyb2xlXCIsXCJ0YWJsaXN0XCIpLF9fYXR0cl8zKGRpdjIsXCJjbGFzc1wiLFwiY29sLWxnLTIgcHQtMiBwdC1sZy0wXCIpLF9fYXR0cl8zKGRpdjMsXCJjbGFzc1wiLFwidGFiLWNvbnRlbnRcIiksX19hdHRyXzMoZGl2NCxcImNsYXNzXCIsXCJjb2wtbGctOCBwdC0yIHB0LWxnLTBcIiksX19hdHRyXzMoaW5wdXQsXCJ0eXBlXCIsXCJ0ZXh0XCIpLF9fYXR0cl8zKGlucHV0LFwiY2xhc3NcIixcImhpZGRlblwiKSxfX2F0dHJfMyhpbnB1dCxcIm5hbWVcIixpbnB1dF9uYW1lX3ZhbHVlPWN0eFswXS5uYW1lKSxpbnB1dC52YWx1ZT1pbnB1dF92YWx1ZV92YWx1ZT1jdHhbMF0udmFsdWUsX19hdHRyXzMoZGl2NSxcImNsYXNzXCIsXCJyb3cgcHgtNCBweC1sZy0zIHBiLTRcIil9LG0odGFyZ2V0LGFuY2hvcil7X19pbnNlcnRfMyh0YXJnZXQsZGl2NSxhbmNob3IpLGFwcGVuZChkaXY1LGRpdjApLGFwcGVuZChkaXYwLHQwKSxhcHBlbmQoZGl2MCx0MSksaWZfYmxvY2smJmlmX2Jsb2NrLm0oZGl2MCxudWxsKSxhcHBlbmQoZGl2MCx0MiksYXBwZW5kKGRpdjUsdDMpLGFwcGVuZChkaXY1LGRpdjIpLGFwcGVuZChkaXYyLGRpdjEpO2ZvcihsZXQgaT0wO2k8ZWFjaF9ibG9ja3NfMS5sZW5ndGg7aSs9MSllYWNoX2Jsb2Nrc18xW2ldLm0oZGl2MSxudWxsKTthcHBlbmQoZGl2NSx0NCksYXBwZW5kKGRpdjUsZGl2NCksYXBwZW5kKGRpdjQsZGl2Myk7Zm9yKGxldCBpPTA7aTxlYWNoX2Jsb2Nrcy5sZW5ndGg7aSs9MSllYWNoX2Jsb2Nrc1tpXS5tKGRpdjMsbnVsbCk7YXBwZW5kKGRpdjUsdDUpLGFwcGVuZChkaXY1LGlucHV0KSxjdXJyZW50PSEwfSxwKGN0eCxbZGlydHldKXtpZigoIWN1cnJlbnR8fDEmZGlydHkpJiZ0MF92YWx1ZSE9PSh0MF92YWx1ZT1jdHhbMF0ubGFiZWwrXCJcIikmJnNldF9kYXRhKHQwLHQwX3ZhbHVlKSxjdHhbMF0uZGVzY3JpcHRpb24/aWZfYmxvY2s/aWZfYmxvY2sucChjdHgsZGlydHkpOigoaWZfYmxvY2s9Y3JlYXRlX2lmX2Jsb2NrKGN0eCkpLmMoKSxpZl9ibG9jay5tKGRpdjAsdDIpKTppZl9ibG9jayYmKGlmX2Jsb2NrLmQoMSksaWZfYmxvY2s9bnVsbCksMSZkaXJ0eSl7bGV0IGk7Zm9yKGVhY2hfdmFsdWVfMj1PYmplY3Qua2V5cyhjdHhbMF0uY2hvaWNlcyksaT0wO2k8ZWFjaF92YWx1ZV8yLmxlbmd0aDtpKz0xKXtjb25zdCBjaGlsZF9jdHg9Z2V0X2VhY2hfY29udGV4dF8yKGN0eCxlYWNoX3ZhbHVlXzIsaSk7ZWFjaF9ibG9ja3NfMVtpXT9lYWNoX2Jsb2Nrc18xW2ldLnAoY2hpbGRfY3R4LGRpcnR5KTooZWFjaF9ibG9ja3NfMVtpXT1jcmVhdGVfZWFjaF9ibG9ja18yKGNoaWxkX2N0eCksZWFjaF9ibG9ja3NfMVtpXS5jKCksZWFjaF9ibG9ja3NfMVtpXS5tKGRpdjEsbnVsbCkpfWZvcig7aTxlYWNoX2Jsb2Nrc18xLmxlbmd0aDtpKz0xKWVhY2hfYmxvY2tzXzFbaV0uZCgxKTtlYWNoX2Jsb2Nrc18xLmxlbmd0aD1lYWNoX3ZhbHVlXzIubGVuZ3RofWlmKDEmZGlydHkpe2xldCBpO2ZvcihlYWNoX3ZhbHVlPU9iamVjdC5rZXlzKGN0eFswXS5jaG9pY2VzKSxpPTA7aTxlYWNoX3ZhbHVlLmxlbmd0aDtpKz0xKXtjb25zdCBjaGlsZF9jdHg9Z2V0X2VhY2hfY29udGV4dChjdHgsZWFjaF92YWx1ZSxpKTtlYWNoX2Jsb2Nrc1tpXT8oZWFjaF9ibG9ja3NbaV0ucChjaGlsZF9jdHgsZGlydHkpLHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0sMSkpOihlYWNoX2Jsb2Nrc1tpXT1jcmVhdGVfZWFjaF9ibG9jayhjaGlsZF9jdHgpLGVhY2hfYmxvY2tzW2ldLmMoKSx0cmFuc2l0aW9uX2luKGVhY2hfYmxvY2tzW2ldLDEpLGVhY2hfYmxvY2tzW2ldLm0oZGl2MyxudWxsKSl9Zm9yKGdyb3VwX291dHJvcygpLGk9ZWFjaF92YWx1ZS5sZW5ndGg7aTxlYWNoX2Jsb2Nrcy5sZW5ndGg7aSs9MSlvdXQoaSk7Y2hlY2tfb3V0cm9zKCl9KCFjdXJyZW50fHwxJmRpcnR5JiZpbnB1dF9uYW1lX3ZhbHVlIT09KGlucHV0X25hbWVfdmFsdWU9Y3R4WzBdLm5hbWUpKSYmX19hdHRyXzMoaW5wdXQsXCJuYW1lXCIsaW5wdXRfbmFtZV92YWx1ZSksKCFjdXJyZW50fHwxJmRpcnR5JiZpbnB1dF92YWx1ZV92YWx1ZSE9PShpbnB1dF92YWx1ZV92YWx1ZT1jdHhbMF0udmFsdWUpJiZpbnB1dC52YWx1ZSE9PWlucHV0X3ZhbHVlX3ZhbHVlKSYmKGlucHV0LnZhbHVlPWlucHV0X3ZhbHVlX3ZhbHVlKX0saShsb2NhbCl7aWYoIWN1cnJlbnQpe2ZvcihsZXQgaT0wO2k8ZWFjaF92YWx1ZS5sZW5ndGg7aSs9MSl0cmFuc2l0aW9uX2luKGVhY2hfYmxvY2tzW2ldKTtjdXJyZW50PSEwfX0sbyhsb2NhbCl7ZWFjaF9ibG9ja3M9ZWFjaF9ibG9ja3MuZmlsdGVyKEJvb2xlYW4pO2ZvcihsZXQgaT0wO2k8ZWFjaF9ibG9ja3MubGVuZ3RoO2krPTEpdHJhbnNpdGlvbl9vdXQoZWFjaF9ibG9ja3NbaV0pO2N1cnJlbnQ9ITF9LGQoZGV0YWNoaW5nKXtkZXRhY2hpbmcmJl9fZGV0YWNoXzMoZGl2NSksaWZfYmxvY2smJmlmX2Jsb2NrLmQoKSxkZXN0cm95X2VhY2goZWFjaF9ibG9ja3NfMSxkZXRhY2hpbmcpLGRlc3Ryb3lfZWFjaChlYWNoX2Jsb2NrcyxkZXRhY2hpbmcpfX19ZnVuY3Rpb24gX19pbnN0YW5jZV8zKCQkc2VsZiwkJHByb3BzLCQkaW52YWxpZGF0ZSl7bGV0e2FyZ3M6YXJnc309JCRwcm9wcztyZXR1cm4gJCRzZWxmLiQkc2V0PSgkJHByb3BzPT57XCJhcmdzXCJpbiAkJHByb3BzJiYkJGludmFsaWRhdGUoMCxhcmdzPSQkcHJvcHMuYXJncyl9KSxbYXJncyxjaG9pY2VfbmFtZT0+JCRpbnZhbGlkYXRlKDAsYXJncy52YWx1ZT1jaG9pY2VfbmFtZSxhcmdzKV19dmFyIF8kVGFiRmllbGRfMz1jbGFzcyBleHRlbmRzIF9fU3ZlbHRlQ29tcG9uZW50XzN7Y29uc3RydWN0b3Iob3B0aW9ucyl7c3VwZXIoKSxfX2luaXRfMyh0aGlzLG9wdGlvbnMsX19pbnN0YW5jZV8zLF9fY3JlYXRlX2ZyYWdtZW50XzMsX19zYWZlX25vdF9lcXVhbF8zLHthcmdzOjB9KX19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbFJoWWtacFpXeGtMbk4yWld4MFpTSmRMQ0p1WVcxbGN5STZXeUp0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaWNUQlJRWFZrUVVFc1owSkJRVUZETEVOQlFVRkJMR05CUVVGQkxHMUNRVUZCUVN4RFFVRkJRU3hYUVVGQlFTeERRVUZCUVN4UFFVRkJRU3hEUVVGQlFTeERRVUZCUVN4TFFVRkJRU3hGUVVGQlFTeERRVUZCUVN4UlFVRkJRU3hEUVVGQlFTeEpRVUZCUVN4RFFVRkJRU3hQUVVGQlFTeERRVUZCUVN4WlFVRkJRU3hEUVVGQlFTeHRRa0ZCUVVFc1EwRkJRVUVzYTBKQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVsQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQkxFTkJRVUZCTEVOQlFVRkJMRU5CUVVGQklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sdHVkV3hzWFgwPSJdfQ==