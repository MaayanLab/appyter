!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;((t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).MultiCheckboxField||(t.MultiCheckboxField={})).svelte=e()}}((function(){var e={};(function(t){(function(){"use strict";function t(){}Object.defineProperty(e,"__esModule",{value:!0});function n(e){return e()}function o(){return Object.create(null)}function l(e){e.forEach(n)}function i(e){return"function"==typeof e}function r(e){return 0===Object.keys(e).length}const c="undefined"!=typeof window;e.raf=c?e=>requestAnimationFrame(e):t;new Set;function s(e,t){e.appendChild(t)}function u(e,t,n){e.insertBefore(t,n||null)}function a(e){e.parentNode.removeChild(e)}function d(e){return document.createElement(e)}function f(e){return document.createTextNode(e)}function p(e,t,n,o){return e.addEventListener(t,n,o),()=>e.removeEventListener(t,n,o)}function m(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function h(e){return Array.from(e.childNodes)}new Set;function g(t){e.current_component=t}const y=[],$=[],b=[],_=[],v=Promise.resolve();let x=!1;function w(){x||(x=!0,v.then(S))}function k(e){b.push(e)}let E=!1;const q=new Set;function S(){if(!E){E=!0;do{for(let e=0;e<y.length;e+=1){const t=y[e];g(t),C(t.$$)}for(g(null),y.length=0;$.length;)$.pop()();for(let e=0;e<b.length;e+=1){const t=b[e];q.has(t)||(q.add(t),t())}b.length=0}while(y.length);for(;_.length;)_.pop()();x=!1,E=!1,q.clear()}}function C(e){if(null!==e.fragment){e.update(),l(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(k)}}const j=new Set;function M(e,t){e&&e.i&&(j.delete(e),e.i(t))}"undefined"!=typeof window?window:"undefined"!=typeof globalThis&&globalThis;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);function O(e,t,o){const{fragment:r,on_mount:c,on_destroy:s,after_update:u}=e.$$;r&&r.m(t,o),k(()=>{const t=c.map(n).filter(i);s?s.push(...t):l(t),e.$$.on_mount=[]}),u.forEach(k)}function T(e,t){const n=e.$$;null!==n.fragment&&(l(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}"function"==typeof HTMLElement&&HTMLElement;class A{$destroy(){T(this,1),this.$destroy=t}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){this.$$set&&!r(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}e.SvelteComponent=A,e.append=s,e.attr=m,e.destroy_each=function(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)},e.detach=a,e.element=d,e.init=function(n,i,r,c,s,u,d=[-1]){const f=e.current_component;g(n);const p=i.props||{},m=n.$$={fragment:null,ctx:null,props:u,update:t,not_equal:s,bound:o(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(f?f.$$.context:[]),callbacks:o(),dirty:d,skip_bound:!1};let $=!1;if(m.ctx=r?r(n,p,(e,t,...o)=>{const l=o.length?o[0]:t;return m.ctx&&s(m.ctx[e],m.ctx[e]=l)&&(!m.skip_bound&&m.bound[e]&&m.bound[e](l),$&&function(e,t){-1===e.$$.dirty[0]&&(y.push(e),w(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(n,e)),t}):[],m.update(),$=!0,l(m.before_update),m.fragment=!!c&&c(m.ctx),i.target){if(i.hydrate){const e=h(i.target);m.fragment&&m.fragment.l(e),e.forEach(a)}else m.fragment&&m.fragment.c();i.intro&&M(n.$$.fragment),O(n,i.target,i.anchor),S()}g(f)},e.insert=u,e.listen=p,e.noop=t,e.safe_not_equal=function(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e},e.set_data=function(e,t){t=""+t,e.wholeText!==t&&(e.data=t)},e.set_style=function(e,t,n,o){e.style.setProperty(t,n,o?"important":"")},e.space=function(){return f(" ")},e.text=f}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});const{SvelteComponent:t,append:n,attr:o,destroy_each:l,detach:i,element:r,init:c,insert:s,listen:u,noop:a,safe_not_equal:d,set_data:f,set_style:p,space:m,text:h}=e;function g(e,t,n){const o=e.slice();return o[3]=t[n],o}function y(e){let t,l,c,u;return{c(){t=r("sup"),l=r("i"),u=m(),o(l,"class","far fa-question-circle"),o(l,"data-toggle","tooltip"),o(l,"title",""),o(l,"data-original-title",c=e[0].description)},m(e,o){s(e,t,o),n(t,l),s(e,u,o)},p(e,t){1&t&&c!==(c=e[0].description)&&o(l,"data-original-title",c)},d(e){e&&i(t),e&&i(u)}}}function $(e){let t,l,c;return{c(){t=r("sup"),l=r("i"),o(l,"class","far fa-question-circle"),o(l,"data-toggle","tooltip"),o(l,"title",""),o(l,"data-original-title",c=e[0].descriptions[e[3]])},m(e,o){s(e,t,o),n(t,l)},p(e,t){1&t&&c!==(c=e[0].descriptions[e[3]])&&o(l,"data-original-title",c)},d(e){e&&i(t)}}}function b(e){let t,l,c,a,d,p,g,y,b,_,v,x,w=e[3]+"",k=e[0].descriptions&&e[0].descriptions[e[3]]&&$(e);function E(){return e[2](e[3])}return{c(){t=r("li"),l=r("div"),c=r("input"),p=m(),g=r("span"),y=h(w),b=m(),k&&k.c(),_=m(),o(c,"id",a=e[0].name+"-"+e[3]+"-checkbox"),o(c,"type","checkbox"),o(c,"class","form-check-input"),c.checked=d=e[1][e[3]],o(g,"class","form-check-label"),o(l,"class","form-check"),o(t,"class","list-group-item cursor-pointer svelte-1662tr")},m(e,o){s(e,t,o),n(t,l),n(l,c),n(l,p),n(l,g),n(g,y),n(g,b),k&&k.m(g,null),n(t,_),v||(x=u(t,"click",E),v=!0)},p(t,n){e=t,1&n&&a!==(a=e[0].name+"-"+e[3]+"-checkbox")&&o(c,"id",a),3&n&&d!==(d=e[1][e[3]])&&(c.checked=d),1&n&&w!==(w=e[3]+"")&&f(y,w),e[0].descriptions&&e[0].descriptions[e[3]]?k?k.p(e,n):((k=$(e)).c(),k.m(g,null)):k&&(k.d(1),k=null)},d(e){e&&i(t),k&&k.d(),v=!1,x()}}}function _(e){let t,c,u,d,$,_,v,x,w,k,E,q,S,C=e[0].label+"",j=e[0].description&&y(e),M=e[0].choices,O=[];for(let n=0;n<M.length;n+=1)O[n]=b(g(e,M,n));return{c(){t=r("div"),c=r("div"),u=h(C),d=m(),j&&j.c(),$=h(":"),_=m(),v=r("div"),x=r("ul");for(let e=0;e<O.length;e+=1)O[e].c();w=m(),k=r("input"),o(c,"class","col-lg-3 bold text-lg-right my-auto"),o(x,"class","list-group multi-checkbox-field"),o(k,"id",E=e[0].name),o(k,"name",q=e[0].name),p(k,"display","none"),o(k,"type","text"),k.value=S=e[0].value,o(v,"class","col-lg-6 pt-2 pt-lg-0"),o(t,"class","row px-3 pb-3")},m(e,o){s(e,t,o),n(t,c),n(c,u),n(c,d),j&&j.m(c,null),n(c,$),n(t,_),n(t,v),n(v,x);for(let t=0;t<O.length;t+=1)O[t].m(x,null);n(v,w),n(v,k)},p(e,[t]){if(1&t&&C!==(C=e[0].label+"")&&f(u,C),e[0].description?j?j.p(e,t):((j=y(e)).c(),j.m(c,$)):j&&(j.d(1),j=null),3&t){let n;for(M=e[0].choices,n=0;n<M.length;n+=1){const o=g(e,M,n);O[n]?O[n].p(o,t):(O[n]=b(o),O[n].c(),O[n].m(x,null))}for(;n<O.length;n+=1)O[n].d(1);O.length=M.length}1&t&&E!==(E=e[0].name)&&o(k,"id",E),1&t&&q!==(q=e[0].name)&&o(k,"name",q),1&t&&S!==(S=e[0].value)&&k.value!==S&&(k.value=S)},i:a,o:a,d(e){e&&i(t),j&&j.d(),l(O,e)}}}function v(e,t,n){let{args:o}=t,l={};if(o.default)for(const i of o.default)l[i]=!0;return e.$$set=e=>{"args"in e&&n(0,o=e.args)},e.$$.update=()=>{2&e.$$.dirty&&n(0,o.value=JSON.stringify(Object.keys(l).filter(e=>l[e])),o)},[o,l,e=>n(1,l[e]=!l[e],l)]}return class extends t{constructor(e){var t;super(),document.getElementById("svelte-1662tr-style")||((t=r("style")).id="svelte-1662tr-style",t.textContent=".cursor-pointer.svelte-1662tr{cursor:pointer}",n(document.head,t)),c(this,e,v,_,d,{args:0})}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,