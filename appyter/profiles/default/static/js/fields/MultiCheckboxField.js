!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;((t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).MultiCheckboxField||(t.MultiCheckboxField={})).svelte=e()}}((function(){var e={};(function(t){(function(){"use strict";function t(){}Object.defineProperty(e,"__esModule",{value:!0});function n(e){return e()}function o(){return Object.create(null)}function l(e){e.forEach(n)}function i(e){return"function"==typeof e}function r(e){return 0===Object.keys(e).length}const c="undefined"!=typeof window;e.raf=c?e=>requestAnimationFrame(e):t;new Set;function u(e,t){e.appendChild(t)}function a(e,t,n){e.insertBefore(t,n||null)}function s(e){e.parentNode.removeChild(e)}function f(e){return document.createElement(e)}function d(e){return document.createTextNode(e)}function p(e,t,n,o){return e.addEventListener(t,n,o),()=>e.removeEventListener(t,n,o)}function h(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function m(e){return Array.from(e.childNodes)}new Set;function g(t){e.current_component=t}const y=[],b=[],$=[],_=[],v=Promise.resolve();let x=!1;function k(){x||(x=!0,v.then(q))}function w(e){$.push(e)}let E=!1;const S=new Set;function q(){if(!E){E=!0;do{for(let e=0;e<y.length;e+=1){const t=y[e];g(t),C(t.$$)}for(g(null),y.length=0;b.length;)b.pop()();for(let e=0;e<$.length;e+=1){const t=$[e];S.has(t)||(S.add(t),t())}$.length=0}while(y.length);for(;_.length;)_.pop()();x=!1,E=!1,S.clear()}}function C(e){if(null!==e.fragment){e.update(),l(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(w)}}const j=new Set;function M(e,t){e&&e.i&&(j.delete(e),e.i(t))}"undefined"!=typeof window?window:"undefined"!=typeof globalThis&&globalThis;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);function O(e,t,o){const{fragment:r,on_mount:c,on_destroy:u,after_update:a}=e.$$;r&&r.m(t,o),w(()=>{const t=c.map(n).filter(i);u?u.push(...t):l(t),e.$$.on_mount=[]}),a.forEach(w)}function T(e,t){const n=e.$$;null!==n.fragment&&(l(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}"function"==typeof HTMLElement&&HTMLElement;class A{$destroy(){T(this,1),this.$destroy=t}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){this.$$set&&!r(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}e.SvelteComponent=A,e.append=u,e.attr=h,e.destroy_each=function(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)},e.detach=s,e.element=f,e.init=function(n,i,r,c,u,a,f=[-1]){const d=e.current_component;g(n);const p=i.props||{},h=n.$$={fragment:null,ctx:null,props:a,update:t,not_equal:u,bound:o(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(d?d.$$.context:[]),callbacks:o(),dirty:f,skip_bound:!1};let b=!1;if(h.ctx=r?r(n,p,(e,t,...o)=>{const l=o.length?o[0]:t;return h.ctx&&u(h.ctx[e],h.ctx[e]=l)&&(!h.skip_bound&&h.bound[e]&&h.bound[e](l),b&&function(e,t){-1===e.$$.dirty[0]&&(y.push(e),k(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(n,e)),t}):[],h.update(),b=!0,l(h.before_update),h.fragment=!!c&&c(h.ctx),i.target){if(i.hydrate){const e=m(i.target);h.fragment&&h.fragment.l(e),e.forEach(s)}else h.fragment&&h.fragment.c();i.intro&&M(n.$$.fragment),O(n,i.target,i.anchor),q()}g(d)},e.insert=a,e.listen=p,e.noop=t,e.run_all=l,e.safe_not_equal=function(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e},e.set_data=function(e,t){t=""+t,e.wholeText!==t&&(e.data=t)},e.set_style=function(e,t,n,o){e.style.setProperty(t,n,o?"important":"")},e.space=function(){return d(" ")},e.text=d}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});const{SvelteComponent:t,append:n,attr:o,destroy_each:l,detach:i,element:r,init:c,insert:u,listen:a,noop:s,run_all:f,safe_not_equal:d,set_data:p,set_style:h,space:m,text:g}=e;function y(e,t,n){const o=e.slice();return o[4]=t[n],o[5]=t,o[6]=n,o}function b(e){let t,l,c,a;return{c(){t=r("sup"),l=r("i"),a=m(),o(l,"class","far fa-question-circle"),o(l,"data-toggle","tooltip"),o(l,"title",""),o(l,"data-original-title",c=e[0].description)},m(e,o){u(e,t,o),n(t,l),u(e,a,o)},p(e,t){1&t&&c!==(c=e[0].description)&&o(l,"data-original-title",c)},d(e){e&&i(t),e&&i(a)}}}function $(e){let t,l,c,s,d,h,y,b,$,_,v,x=e[4]+"";function k(){e[2].call(c,e[4])}function w(){return e[3](e[4])}return{c(){t=r("li"),l=r("div"),c=r("input"),d=m(),h=r("label"),y=g(x),$=m(),o(c,"id",s=e[0].name+"-"+e[4]+"-checkbox"),o(c,"type","checkbox"),o(c,"class","form-check-input"),o(h,"class","form-check-label"),o(h,"for",b=e[0].name+"-"+e[4]+"-checkbox"),o(l,"class","form-check"),o(t,"class","list-group-item cursor-pointer svelte-1662tr")},m(o,i){u(o,t,i),n(t,l),n(l,c),c.checked=e[1][e[4]],n(l,d),n(l,h),n(h,y),n(t,$),_||(v=[a(c,"change",k),a(t,"click",w)],_=!0)},p(t,n){e=t,1&n&&s!==(s=e[0].name+"-"+e[4]+"-checkbox")&&o(c,"id",s),3&n&&(c.checked=e[1][e[4]]),1&n&&x!==(x=e[4]+"")&&p(y,x),1&n&&b!==(b=e[0].name+"-"+e[4]+"-checkbox")&&o(h,"for",b)},d(e){e&&i(t),_=!1,f(v)}}}function _(e){let t,c,a,f,d,_,v,x,k,w,E,S,q,C=e[0].label+"",j=e[0].description&&b(e),M=e[0].choices,O=[];for(let n=0;n<M.length;n+=1)O[n]=$(y(e,M,n));return{c(){t=r("div"),c=r("div"),a=g(C),f=m(),j&&j.c(),d=g(":"),_=m(),v=r("div"),x=r("ul");for(let e=0;e<O.length;e+=1)O[e].c();k=m(),w=r("input"),o(c,"class","col-lg-3 bold text-lg-right my-auto"),o(x,"class","list-group multi-checkbox-field"),o(w,"id",E=e[0].name),o(w,"name",S=e[0].name),h(w,"display","none"),o(w,"type","text"),w.value=q=e[0].value,o(v,"class","col-lg-6 pt-2 pt-lg-0"),o(t,"class","row px-3 pb-3")},m(e,o){u(e,t,o),n(t,c),n(c,a),n(c,f),j&&j.m(c,null),n(c,d),n(t,_),n(t,v),n(v,x);for(let t=0;t<O.length;t+=1)O[t].m(x,null);n(v,k),n(v,w)},p(e,[t]){if(1&t&&C!==(C=e[0].label+"")&&p(a,C),e[0].description?j?j.p(e,t):((j=b(e)).c(),j.m(c,d)):j&&(j.d(1),j=null),3&t){let n;for(M=e[0].choices,n=0;n<M.length;n+=1){const o=y(e,M,n);O[n]?O[n].p(o,t):(O[n]=$(o),O[n].c(),O[n].m(x,null))}for(;n<O.length;n+=1)O[n].d(1);O.length=M.length}1&t&&E!==(E=e[0].name)&&o(w,"id",E),1&t&&S!==(S=e[0].name)&&o(w,"name",S),1&t&&q!==(q=e[0].value)&&w.value!==q&&(w.value=q)},i:s,o:s,d(e){e&&i(t),j&&j.d(),l(O,e)}}}function v(e,t,n){let{args:o}=t,l={};if(o.default)for(const i of o.default)l[i]=!0;return e.$$set=e=>{"args"in e&&n(0,o=e.args)},e.$$.update=()=>{2&e.$$.dirty&&n(0,o.value=JSON.stringify(Object.keys(l).filter(e=>l[e])),o)},[o,l,function(e){l[e]=this.checked,n(1,l),n(0,o),n(1,l)},e=>n(1,l[e]=!l[e],l)]}return class extends t{constructor(e){var t;super(),document.getElementById("svelte-1662tr-style")||((t=r("style")).id="svelte-1662tr-style",t.textContent=".cursor-pointer.svelte-1662tr{cursor:pointer}",n(document.head,t)),c(this,e,v,_,d,{args:0})}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,