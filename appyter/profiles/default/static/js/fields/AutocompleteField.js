!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;((t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).AutocompleteField||(t.AutocompleteField={})).svelte=e()}}((function(){var e={};(function(t){"use strict";function n(){}Object.defineProperty(e,"__esModule",{value:!0});function o(e){return e()}function r(){return Object.create(null)}function i(e){e.forEach(o)}function l(e){return"function"==typeof e}function s(e){return 0===Object.keys(e).length}const c="undefined"!=typeof window;e.raf=c?e=>requestAnimationFrame(e):n;new Set;function a(e,t){e.appendChild(t)}function u(e,t,n){e.insertBefore(t,n||null)}function d(e){e.parentNode.removeChild(e)}function p(e){return document.createElement(e)}function f(e){return document.createTextNode(e)}function m(e,t,n,o){return e.addEventListener(t,n,o),()=>e.removeEventListener(t,n,o)}function b(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function y(e){return Array.from(e.childNodes)}function h(e,t){const n=document.createEvent("CustomEvent");return n.initCustomEvent(e,!1,!1,t),n}new Set;function v(t){e.current_component=t}function g(){if(!e.current_component)throw new Error("Function called outside component initialization");return e.current_component}const w=[],$=[],_=[],x=[],k=Promise.resolve();let C=!1;function E(){C||(C=!0,k.then(S))}function j(e){_.push(e)}let O=!1;const P=new Set;function S(){if(!O){O=!0;do{for(let e=0;e<w.length;e+=1){const t=w[e];v(t),A(t.$$)}for(v(null),w.length=0;$.length;)$.pop()();for(let e=0;e<_.length;e+=1){const t=_[e];P.has(t)||(P.add(t),t())}_.length=0}while(w.length);for(;x.length;)x.pop()();C=!1,O=!1,P.clear()}}function A(e){if(null!==e.fragment){e.update(),i(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(j)}}const D=new Set;let M;function T(){M={r:0,c:[],p:M}}function q(){M.r||i(M.c),M=M.p}function L(e,t){e&&e.i&&(D.delete(e),e.i(t))}function U(e,t,n,o){if(e&&e.o){if(D.has(e))return;D.add(e),M.c.push(()=>{D.delete(e),o&&(n&&e.d(1),o())}),e.o(t)}}"undefined"!=typeof window?window:"undefined"!=typeof globalThis&&globalThis;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);function N(e,t,n,r){const{fragment:s,on_mount:c,on_destroy:a,after_update:u}=e.$$;s&&s.m(t,n),r||j(()=>{const t=c.map(o).filter(l);a?a.push(...t):i(t),e.$$.on_mount=[]}),u.forEach(j)}function z(e,t){const n=e.$$;null!==n.fragment&&(i(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}"function"==typeof HTMLElement&&HTMLElement;class F{$destroy(){z(this,1),this.$destroy=n}$on(e,t){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}$set(e){this.$$set&&!s(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}class B extends F{constructor(e){if(!e||!e.target&&!e.$$inline)throw new Error("'target' is a required option");super()}$destroy(){super.$destroy(),this.$destroy=()=>{console.warn("Component was already destroyed")}}$capture_state(){}$inject_state(){}}e.SvelteComponent=F,e.SvelteComponentDev=B,e.SvelteComponentTyped=class extends B{constructor(e){super(e)}},e.afterUpdate=function(e){g().$$.after_update.push(e)},e.append=a,e.attr=b,e.beforeUpdate=function(e){g().$$.before_update.push(e)},e.check_outros=q,e.createEventDispatcher=function(){const e=g();return(t,n)=>{const o=e.$$.callbacks[t];if(o){const r=h(t,n);o.slice().forEach(t=>{t.call(e,r)})}}},e.create_component=function(e){e&&e.c()},e.destroy_component=z,e.destroy_each=function(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)},e.detach=d,e.element=p,e.empty=function(){return f("")},e.getContext=function(e){return g().$$.context.get(e)},e.group_outros=T,e.hasContext=function(e){return g().$$.context.has(e)},e.init=function(t,o,l,s,c,a,u=[-1]){const p=e.current_component;v(t);const f=t.$$={fragment:null,ctx:null,props:a,update:n,not_equal:c,bound:r(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(p?p.$$.context:[]),callbacks:r(),dirty:u,skip_bound:!1};let m=!1;if(f.ctx=l?l(t,o.props||{},(e,n,...o)=>{const r=o.length?o[0]:n;return f.ctx&&c(f.ctx[e],f.ctx[e]=r)&&(!f.skip_bound&&f.bound[e]&&f.bound[e](r),m&&function(e,t){-1===e.$$.dirty[0]&&(w.push(e),E(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(t,e)),n}):[],f.update(),m=!0,i(f.before_update),f.fragment=!!s&&s(f.ctx),o.target){if(o.hydrate){const e=y(o.target);f.fragment&&f.fragment.l(e),e.forEach(d)}else f.fragment&&f.fragment.c();o.intro&&L(t.$$.fragment),N(t,o.target,o.anchor,o.customElement),S()}v(p)},e.insert=u,e.listen=m,e.mount_component=N,e.noop=n,e.onDestroy=function(e){g().$$.on_destroy.push(e)},e.onMount=function(e){g().$$.on_mount.push(e)},e.run_all=i,e.safe_not_equal=function(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e},e.setContext=function(e,t){g().$$.context.set(e,t)},e.set_data=function(e,t){t=""+t,e.wholeText!==t&&(e.data=t)},e.set_input_value=function(e,t){e.value=null==t?"":t},e.space=function(){return f(" ")},e.text=f,e.tick=function(){return E(),k},e.toggle_class=function(e,t,n){e.classList[n?"add":"remove"](t)},e.transition_in=L,e.transition_out=U}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var t={};Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"SvelteComponent",{enumerable:!0,get:function(){return e.SvelteComponentDev}}),Object.defineProperty(t,"SvelteComponentTyped",{enumerable:!0,get:function(){return e.SvelteComponentTyped}}),Object.defineProperty(t,"afterUpdate",{enumerable:!0,get:function(){return e.afterUpdate}}),Object.defineProperty(t,"beforeUpdate",{enumerable:!0,get:function(){return e.beforeUpdate}}),Object.defineProperty(t,"createEventDispatcher",{enumerable:!0,get:function(){return e.createEventDispatcher}}),Object.defineProperty(t,"getContext",{enumerable:!0,get:function(){return e.getContext}}),Object.defineProperty(t,"hasContext",{enumerable:!0,get:function(){return e.hasContext}}),Object.defineProperty(t,"onDestroy",{enumerable:!0,get:function(){return e.onDestroy}}),Object.defineProperty(t,"onMount",{enumerable:!0,get:function(){return e.onMount}}),Object.defineProperty(t,"setContext",{enumerable:!0,get:function(){return e.setContext}}),Object.defineProperty(t,"tick",{enumerable:!0,get:function(){return e.tick}});const{SvelteComponent:n,append:o,attr:r,detach:i,element:l,init:s,insert:c,noop:a,safe_not_equal:u}=e;function d(e){let t;return{c(){(t=l("div")).innerHTML='<div class="svelte-1p9bywm"></div><div class="svelte-1p9bywm"></div><div class="svelte-1p9bywm"></div><div class="svelte-1p9bywm"></div>',r(t,"class","lds-ellipsis svelte-1p9bywm")},m(e,n){c(e,t,n)},p:a,i:a,o:a,d(e){e&&i(t)}}}var p=class extends n{constructor(e){var t;super(),document.getElementById("svelte-1p9bywm-style")||((t=l("style")).id="svelte-1p9bywm-style",t.textContent=".lds-ellipsis.svelte-1p9bywm.svelte-1p9bywm{display:inline-block;position:relative;width:80px;height:80px}.lds-ellipsis.svelte-1p9bywm div.svelte-1p9bywm{position:absolute;top:33px;width:13px;height:13px;border-radius:50%;background:#000;animation-timing-function:cubic-bezier(0, 1, 1, 0)}.lds-ellipsis.svelte-1p9bywm div.svelte-1p9bywm:nth-child(1){left:8px;animation:svelte-1p9bywm-lds-ellipsis1 0.6s infinite}.lds-ellipsis.svelte-1p9bywm div.svelte-1p9bywm:nth-child(2){left:8px;animation:svelte-1p9bywm-lds-ellipsis2 0.6s infinite}.lds-ellipsis.svelte-1p9bywm div.svelte-1p9bywm:nth-child(3){left:32px;animation:svelte-1p9bywm-lds-ellipsis2 0.6s infinite}.lds-ellipsis.svelte-1p9bywm div.svelte-1p9bywm:nth-child(4){left:56px;animation:svelte-1p9bywm-lds-ellipsis3 0.6s infinite}@keyframes svelte-1p9bywm-lds-ellipsis1{0%{transform:scale(0)}100%{transform:scale(1)}}@keyframes svelte-1p9bywm-lds-ellipsis3{0%{transform:scale(1)}100%{transform:scale(0)}}@keyframes svelte-1p9bywm-lds-ellipsis2{0%{transform:translate(0, 0)}100%{transform:translate(24px, 0)}}",o(document.head,t)),s(this,e,null,d,u,{})}};const{SvelteComponent:f,append:m,attr:b,check_outros:y,create_component:h,destroy_component:v,destroy_each:g,detach:w,element:$,empty:_,group_outros:x,init:k,insert:C,listen:E,mount_component:j,noop:O,run_all:P,safe_not_equal:S,set_data:A,set_input_value:D,space:M,text:T,toggle_class:q,transition_in:L,transition_out:U}=e,{onMount:N}=t;function z(e,t,n){const o=e.slice();return o[12]=t[n],o[14]=n,o}function F(e){let t,n,o,r;return{c(){t=$("sup"),n=$("i"),r=M(),b(n,"class","far fa-question-circle"),b(n,"data-toggle","tooltip"),b(n,"title",""),b(n,"data-original-title",o=e[0].description)},m(e,o){C(e,t,o),m(t,n),C(e,r,o)},p(e,t){1&t&&o!==(o=e[0].description)&&b(n,"data-original-title",o)},d(e){e&&w(t),e&&w(r)}}}function B(e){let t,n,o;return{c(){t=$("div"),n=$("div"),o=T(e[4]),b(n,"class","alert alert-warning"),b(n,"role","alert"),b(t,"class","w-100")},m(e,r){C(e,t,r),m(t,n),m(n,o)},p(e,t){16&t&&A(o,e[4])},i:O,o:O,d(e){e&&w(t)}}}function H(e){let t,n,o=e[3]&&e[1]&&I(e);return{c(){o&&o.c(),t=_()},m(e,r){o&&o.m(e,r),C(e,t,r),n=!0},p(e,n){e[3]&&e[1]?o?(o.p(e,n),10&n&&L(o,1)):((o=I(e)).c(),L(o,1),o.m(t.parentNode,t)):o&&(x(),U(o,1,1,()=>{o=null}),y())},i(e){n||(L(o),n=!0)},o(e){U(o),n=!1},d(e){o&&o.d(e),e&&w(t)}}}function I(e){let t,n,o,r;const i=[J,G],l=[];function s(e,t){return void 0===e[2]?0:1}return n=s(e),o=l[n]=i[n](e),{c(){t=$("div"),o.c(),b(t,"class","autocomplete-items svelte-mb9t7t")},m(e,o){C(e,t,o),l[n].m(t,null),r=!0},p(e,r){let c=n;(n=s(e))===c?l[n].p(e,r):(x(),U(l[c],1,1,()=>{l[c]=null}),y(),(o=l[n])?o.p(e,r):(o=l[n]=i[n](e)).c(),L(o,1),o.m(t,null))},i(e){r||(L(o),r=!0)},o(e){U(o),r=!1},d(e){e&&w(t),l[n].d()}}}function G(e){let t,n=e[6],o=[];for(let r=0;r<n.length;r+=1)o[r]=K(z(e,n,r));return{c(){for(let e=0;e<o.length;e+=1)o[e].c();t=_()},m(e,n){for(let t=0;t<o.length;t+=1)o[t].m(e,n);C(e,t,n)},p(e,r){if(98&r){let i;for(n=e[6],i=0;i<n.length;i+=1){const l=z(e,n,i);o[i]?o[i].p(l,r):(o[i]=K(l),o[i].c(),o[i].m(t.parentNode,t))}for(;i<o.length;i+=1)o[i].d(1);o.length=n.length}},i:O,o:O,d(e){g(o,e),e&&w(t)}}}function J(e){let t,n,o;return n=new p({}),{c(){t=$("center"),h(n.$$.fragment)},m(e,r){C(e,t,r),j(n,t,null),o=!0},p:O,i(e){o||(L(n.$$.fragment,e),o=!0)},o(e){U(n.$$.fragment,e),o=!1},d(e){e&&w(t),v(n)}}}function K(e){let t,n,o,r,i,l,s,c=e[12].substr(0,e[1].length)+"",a=e[12].substr(e[1].length)+"";function u(){return e[11](e[12])}return{c(){t=$("div"),n=$("strong"),o=T(c),r=T(a),i=M(),b(t,"class","svelte-mb9t7t"),q(t,"autocomplete-active",e[5]===e[14])},m(e,c){C(e,t,c),m(t,n),m(n,o),m(t,r),m(t,i),l||(s=E(t,"mousedown",u),l=!0)},p(n,i){e=n,66&i&&c!==(c=e[12].substr(0,e[1].length)+"")&&A(o,c),66&i&&a!==(a=e[12].substr(e[1].length)+"")&&A(r,a),32&i&&q(t,"autocomplete-active",e[5]===e[14])},d(e){e&&w(t),l=!1,s()}}}function Q(e){let t,n,o,r,i,l,s,c,a,u,d,p,f,h,v,g,_,k=e[0].label+"",j=e[0].description&&F(e);const O=[H,B],S=[];function q(e,t){return void 0===e[4]?0:1}return f=q(e),h=S[f]=O[f](e),{c(){t=$("div"),n=$("div"),o=T(k),r=M(),j&&j.c(),i=T(":"),l=M(),s=$("div"),c=$("input"),p=M(),h.c(),b(n,"class","col-lg-3 bold text-lg-right my-auto"),b(c,"type","text"),b(c,"id",a=e[0].name),b(c,"name",u=e[0].name),b(c,"class","form-control nodecoration tiny bg-white px-2 py-1 mb-0"),b(c,"autocomplete","off"),b(c,"placeholder",d=e[0].hint),b(s,"class","autocomplete col-lg-6 pt-2 pt-lg-0 svelte-mb9t7t"),b(t,"class","row px-4 px-lg-3 pb-4")},m(a,u){C(a,t,u),m(t,n),m(n,o),m(n,r),j&&j.m(n,null),m(n,i),m(t,l),m(t,s),m(s,c),D(c,e[1]),m(s,p),S[f].m(s,null),v=!0,g||(_=[E(c,"input",e[7]),E(c,"focus",e[8]),E(c,"blur",e[9]),E(c,"keydown",e[10])],g=!0)},p(e,[t]){(!v||1&t)&&k!==(k=e[0].label+"")&&A(o,k),e[0].description?j?j.p(e,t):((j=F(e)).c(),j.m(n,i)):j&&(j.d(1),j=null),(!v||1&t&&a!==(a=e[0].name))&&b(c,"id",a),(!v||1&t&&u!==(u=e[0].name))&&b(c,"name",u),(!v||1&t&&d!==(d=e[0].hint))&&b(c,"placeholder",d),2&t&&c.value!==e[1]&&D(c,e[1]);let r=f;(f=q(e))===r?S[f].p(e,t):(x(),U(S[r],1,1,()=>{S[r]=null}),y(),(h=S[f])?h.p(e,t):(h=S[f]=O[f](e)).c(),L(h,1),h.m(s,null))},i(e){v||(L(h),v=!0)},o(e){U(h),v=!1},d(e){e&&w(t),j&&j.d(),S[f].d(),g=!1,P(_)}}}function R(e,t,n){let o,r,i,l,{args:s}=t,c=s.default,a=-1;return N(async()=>{try{if(void 0!==s.file_path){const e=await fetch(s.file_path),t=await e.json();if("object"!=typeof t)throw new Error("Unrecognized type for downloaded file");Array.isArray(t)?n(2,i=t):(console.warn("Legacy mode... please use an array"),n(2,i=t[Object.keys(t)[0]]))}else{if(void 0===s.choices)throw new Error("No autocomplete item source");if("object"!=typeof s.choices)throw new Error("Unrecognized type for choices");Array.isArray(s.choices)?n(2,i=s.choices):n(2,i=Object.keys(s.choices))}}catch(e){n(4,r="Failed to load autocomplete items"),n(2,i=[]),console.error(e)}}),e.$$set=e=>{"args"in e&&n(0,s=e.args)},e.$$.update=()=>{6&e.$$.dirty&&void 0!==i&&(n(6,l=i.filter(e=>e.toLowerCase().substr(0,c.length)===c.toLowerCase()&&e!==c).slice(0,7)),n(5,a=-1))},[s,c,i,o,r,a,l,function(){c=this.value,n(1,c)},()=>n(3,o=!0),()=>n(3,o=!1),e=>{"ArrowUp"===e.key?(e.preventDefault(),n(5,a=Math.max(-1,a-1))):"ArrowDown"===e.key?(e.preventDefault(),n(5,a=Math.min(l.length-1,a+1))):"Enter"===e.key&&(e.preventDefault(),a>=0&&n(1,c=l[a]),n(5,a=-1))},e=>n(1,c=e)]}return class extends f{constructor(e){var t;super(),document.getElementById("svelte-mb9t7t-style")||((t=$("style")).id="svelte-mb9t7t-style",t.textContent=".autocomplete.svelte-mb9t7t.svelte-mb9t7t{position:relative;display:inline-block}.autocomplete-items.svelte-mb9t7t.svelte-mb9t7t{background-color:white;position:absolute;border:1px solid #d4d4d4;border-bottom:none;border-top:none;z-index:99;top:100%;left:0;right:0}.autocomplete-items.svelte-mb9t7t div.svelte-mb9t7t{padding:10px;cursor:pointer;background-color:#fff;border-bottom:1px solid #d4d4d4}.autocomplete-items.svelte-mb9t7t div.svelte-mb9t7t:hover{background-color:#e9e9e9}.autocomplete-active.svelte-mb9t7t.svelte-mb9t7t{background-color:DodgerBlue !important;color:#ffffff}",m(document.head,t)),k(this,e,R,Q,S,{args:0})}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,